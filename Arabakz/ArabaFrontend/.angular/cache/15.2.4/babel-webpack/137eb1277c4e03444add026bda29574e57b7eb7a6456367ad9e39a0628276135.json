{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PartiallyOrderedSet = exports.CircularDependencyFoundException = exports.DependencyNotFoundException = void 0;\nconst exception_1 = require(\"../exception\");\nclass DependencyNotFoundException extends exception_1.BaseException {\n  constructor() {\n    super('One of the dependencies is not part of the set.');\n  }\n}\nexports.DependencyNotFoundException = DependencyNotFoundException;\nclass CircularDependencyFoundException extends exception_1.BaseException {\n  constructor() {\n    super('Circular dependencies found.');\n  }\n}\nexports.CircularDependencyFoundException = CircularDependencyFoundException;\nclass PartiallyOrderedSet {\n  constructor() {\n    this._items = new Map();\n  }\n  _checkCircularDependencies(item, deps) {\n    if (deps.has(item)) {\n      throw new CircularDependencyFoundException();\n    }\n    deps.forEach(dep => this._checkCircularDependencies(item, this._items.get(dep) || new Set()));\n  }\n  clear() {\n    this._items.clear();\n  }\n  has(item) {\n    return this._items.has(item);\n  }\n  get size() {\n    return this._items.size;\n  }\n  forEach(callbackfn, thisArg) {\n    for (const x of this) {\n      callbackfn.call(thisArg, x, x, this);\n    }\n  }\n  /**\n   * Returns an iterable of [v,v] pairs for every value `v` in the set.\n   */\n  *entries() {\n    for (const item of this) {\n      yield [item, item];\n    }\n  }\n  /**\n   * Despite its name, returns an iterable of the values in the set,\n   */\n  keys() {\n    return this.values();\n  }\n  /**\n   * Returns an iterable of values in the set.\n   */\n  values() {\n    return this[Symbol.iterator]();\n  }\n  add(item, deps = new Set()) {\n    if (Array.isArray(deps)) {\n      deps = new Set(deps);\n    }\n    // Verify item is not already in the set.\n    if (this._items.has(item)) {\n      const itemDeps = this._items.get(item) || new Set();\n      // If the dependency list is equal, just return, otherwise remove and keep going.\n      let equal = true;\n      for (const dep of deps) {\n        if (!itemDeps.has(dep)) {\n          equal = false;\n          break;\n        }\n      }\n      if (equal) {\n        for (const dep of itemDeps) {\n          if (!deps.has(dep)) {\n            equal = false;\n            break;\n          }\n        }\n      }\n      if (equal) {\n        return this;\n      } else {\n        this._items.delete(item);\n      }\n    }\n    // Verify all dependencies are part of the Set.\n    for (const dep of deps) {\n      if (!this._items.has(dep)) {\n        throw new DependencyNotFoundException();\n      }\n    }\n    // Verify there's no dependency cycle.\n    this._checkCircularDependencies(item, deps);\n    this._items.set(item, new Set(deps));\n    return this;\n  }\n  delete(item) {\n    if (!this._items.has(item)) {\n      return false;\n    }\n    // Remove it from all dependencies if force == true.\n    this._items.forEach(value => value.delete(item));\n    return this._items.delete(item);\n  }\n  *[Symbol.iterator]() {\n    const copy = new Map(this._items);\n    for (const [key, value] of copy.entries()) {\n      copy.set(key, new Set(value));\n    }\n    while (copy.size > 0) {\n      const run = [];\n      // Take the first item without dependencies.\n      for (const [item, deps] of copy.entries()) {\n        if (deps.size == 0) {\n          run.push(item);\n        }\n      }\n      for (const item of run) {\n        copy.forEach(s => s.delete(item));\n        copy.delete(item);\n        yield item;\n      }\n      if (run.length == 0) {\n        // uh oh...\n        throw new CircularDependencyFoundException();\n      }\n    }\n  }\n  get [Symbol.toStringTag]() {\n    return 'Set';\n  }\n}\nexports.PartiallyOrderedSet = PartiallyOrderedSet;","map":{"version":3,"names":["Object","defineProperty","exports","value","PartiallyOrderedSet","CircularDependencyFoundException","DependencyNotFoundException","exception_1","require","BaseException","constructor","_items","Map","_checkCircularDependencies","item","deps","has","forEach","dep","get","Set","clear","size","callbackfn","thisArg","x","call","entries","keys","values","Symbol","iterator","add","Array","isArray","itemDeps","equal","delete","set","copy","key","run","push","s","length","toStringTag"],"sources":["/Users/sabyrzhanolzhabay/Web-Dev/Arabakz/ArabaFrontend/node_modules/@angular/cli/node_modules/@angular-devkit/core/src/utils/partially-ordered-set.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PartiallyOrderedSet = exports.CircularDependencyFoundException = exports.DependencyNotFoundException = void 0;\nconst exception_1 = require(\"../exception\");\nclass DependencyNotFoundException extends exception_1.BaseException {\n    constructor() {\n        super('One of the dependencies is not part of the set.');\n    }\n}\nexports.DependencyNotFoundException = DependencyNotFoundException;\nclass CircularDependencyFoundException extends exception_1.BaseException {\n    constructor() {\n        super('Circular dependencies found.');\n    }\n}\nexports.CircularDependencyFoundException = CircularDependencyFoundException;\nclass PartiallyOrderedSet {\n    constructor() {\n        this._items = new Map();\n    }\n    _checkCircularDependencies(item, deps) {\n        if (deps.has(item)) {\n            throw new CircularDependencyFoundException();\n        }\n        deps.forEach((dep) => this._checkCircularDependencies(item, this._items.get(dep) || new Set()));\n    }\n    clear() {\n        this._items.clear();\n    }\n    has(item) {\n        return this._items.has(item);\n    }\n    get size() {\n        return this._items.size;\n    }\n    forEach(callbackfn, thisArg) {\n        for (const x of this) {\n            callbackfn.call(thisArg, x, x, this);\n        }\n    }\n    /**\n     * Returns an iterable of [v,v] pairs for every value `v` in the set.\n     */\n    *entries() {\n        for (const item of this) {\n            yield [item, item];\n        }\n    }\n    /**\n     * Despite its name, returns an iterable of the values in the set,\n     */\n    keys() {\n        return this.values();\n    }\n    /**\n     * Returns an iterable of values in the set.\n     */\n    values() {\n        return this[Symbol.iterator]();\n    }\n    add(item, deps = new Set()) {\n        if (Array.isArray(deps)) {\n            deps = new Set(deps);\n        }\n        // Verify item is not already in the set.\n        if (this._items.has(item)) {\n            const itemDeps = this._items.get(item) || new Set();\n            // If the dependency list is equal, just return, otherwise remove and keep going.\n            let equal = true;\n            for (const dep of deps) {\n                if (!itemDeps.has(dep)) {\n                    equal = false;\n                    break;\n                }\n            }\n            if (equal) {\n                for (const dep of itemDeps) {\n                    if (!deps.has(dep)) {\n                        equal = false;\n                        break;\n                    }\n                }\n            }\n            if (equal) {\n                return this;\n            }\n            else {\n                this._items.delete(item);\n            }\n        }\n        // Verify all dependencies are part of the Set.\n        for (const dep of deps) {\n            if (!this._items.has(dep)) {\n                throw new DependencyNotFoundException();\n            }\n        }\n        // Verify there's no dependency cycle.\n        this._checkCircularDependencies(item, deps);\n        this._items.set(item, new Set(deps));\n        return this;\n    }\n    delete(item) {\n        if (!this._items.has(item)) {\n            return false;\n        }\n        // Remove it from all dependencies if force == true.\n        this._items.forEach((value) => value.delete(item));\n        return this._items.delete(item);\n    }\n    *[Symbol.iterator]() {\n        const copy = new Map(this._items);\n        for (const [key, value] of copy.entries()) {\n            copy.set(key, new Set(value));\n        }\n        while (copy.size > 0) {\n            const run = [];\n            // Take the first item without dependencies.\n            for (const [item, deps] of copy.entries()) {\n                if (deps.size == 0) {\n                    run.push(item);\n                }\n            }\n            for (const item of run) {\n                copy.forEach((s) => s.delete(item));\n                copy.delete(item);\n                yield item;\n            }\n            if (run.length == 0) {\n                // uh oh...\n                throw new CircularDependencyFoundException();\n            }\n        }\n    }\n    get [Symbol.toStringTag]() {\n        return 'Set';\n    }\n}\nexports.PartiallyOrderedSet = PartiallyOrderedSet;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}