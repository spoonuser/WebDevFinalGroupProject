{"ast":null,"code":"var util = require('util'),\n  Match = require('../match');\n\n/**\n * This is a superclass for the individual detectors for\n * each of the detectable members of the ISO 2022 family\n * of encodings.\n */\n\nfunction ISO_2022() {}\nISO_2022.prototype.match = function (det) {\n  /**\n   * Matching function shared among the 2022 detectors JP, CN and KR\n   * Counts up the number of legal an unrecognized escape sequences in\n   * the sample of text, and computes a score based on the total number &\n   * the proportion that fit the encoding.\n   *\n   *\n   * @param text the byte buffer containing text to analyse\n   * @param textLen  the size of the text in the byte.\n   * @param escapeSequences the byte escape sequences to test for.\n   * @return match quality, in the range of 0-100.\n   */\n\n  var i, j;\n  var escN;\n  var hits = 0;\n  var misses = 0;\n  var shifts = 0;\n  var quality;\n\n  // TODO: refactor me\n  var text = det.fInputBytes;\n  var textLen = det.fInputLen;\n  scanInput: for (i = 0; i < textLen; i++) {\n    if (text[i] == 0x1b) {\n      checkEscapes: for (escN = 0; escN < this.escapeSequences.length; escN++) {\n        var seq = this.escapeSequences[escN];\n        if (textLen - i < seq.length) continue checkEscapes;\n        for (j = 1; j < seq.length; j++) if (seq[j] != text[i + j]) continue checkEscapes;\n        hits++;\n        i += seq.length - 1;\n        continue scanInput;\n      }\n      misses++;\n    }\n\n    // Shift in/out\n    if (text[i] == 0x0e || text[i] == 0x0f) shifts++;\n  }\n  if (hits == 0) return null;\n\n  //\n  // Initial quality is based on relative proportion of recongized vs.\n  //   unrecognized escape sequences.\n  //   All good:  quality = 100;\n  //   half or less good: quality = 0;\n  //   linear inbetween.\n  quality = (100 * hits - 100 * misses) / (hits + misses);\n\n  // Back off quality if there were too few escape sequences seen.\n  //   Include shifts in this computation, so that KR does not get penalized\n  //   for having only a single Escape sequence, but many shifts.\n  if (hits + shifts < 5) quality -= (5 - (hits + shifts)) * 10;\n  return quality <= 0 ? null : new Match(det, this, quality);\n};\nmodule.exports.ISO_2022_JP = function () {\n  this.name = function () {\n    return 'ISO-2022-JP';\n  };\n  this.escapeSequences = [[0x1b, 0x24, 0x28, 0x43],\n  // KS X 1001:1992\n  [0x1b, 0x24, 0x28, 0x44],\n  // JIS X 212-1990\n  [0x1b, 0x24, 0x40],\n  // JIS C 6226-1978\n  [0x1b, 0x24, 0x41],\n  // GB 2312-80\n  [0x1b, 0x24, 0x42],\n  // JIS X 208-1983\n  [0x1b, 0x26, 0x40],\n  // JIS X 208 1990, 1997\n  [0x1b, 0x28, 0x42],\n  // ASCII\n  [0x1b, 0x28, 0x48],\n  // JIS-Roman\n  [0x1b, 0x28, 0x49],\n  // Half-width katakana\n  [0x1b, 0x28, 0x4a],\n  // JIS-Roman\n  [0x1b, 0x2e, 0x41],\n  // ISO 8859-1\n  [0x1b, 0x2e, 0x46] // ISO 8859-7\n  ];\n};\n\nutil.inherits(module.exports.ISO_2022_JP, ISO_2022);\nmodule.exports.ISO_2022_KR = function () {\n  this.name = function () {\n    return 'ISO-2022-KR';\n  };\n  this.escapeSequences = [[0x1b, 0x24, 0x29, 0x43]];\n};\nutil.inherits(module.exports.ISO_2022_KR, ISO_2022);\nmodule.exports.ISO_2022_CN = function () {\n  this.name = function () {\n    return 'ISO-2022-CN';\n  };\n  this.escapeSequences = [[0x1b, 0x24, 0x29, 0x41],\n  // GB 2312-80\n  [0x1b, 0x24, 0x29, 0x47],\n  // CNS 11643-1992 Plane 1\n  [0x1b, 0x24, 0x2A, 0x48],\n  // CNS 11643-1992 Plane 2\n  [0x1b, 0x24, 0x29, 0x45],\n  // ISO-IR-165\n  [0x1b, 0x24, 0x2B, 0x49],\n  // CNS 11643-1992 Plane 3\n  [0x1b, 0x24, 0x2B, 0x4A],\n  // CNS 11643-1992 Plane 4\n  [0x1b, 0x24, 0x2B, 0x4B],\n  // CNS 11643-1992 Plane 5\n  [0x1b, 0x24, 0x2B, 0x4C],\n  // CNS 11643-1992 Plane 6\n  [0x1b, 0x24, 0x2B, 0x4D],\n  // CNS 11643-1992 Plane 7\n  [0x1b, 0x4e],\n  // SS2\n  [0x1b, 0x4f] // SS3\n  ];\n};\n\nutil.inherits(module.exports.ISO_2022_CN, ISO_2022);","map":{"version":3,"names":["util","require","Match","ISO_2022","prototype","match","det","i","j","escN","hits","misses","shifts","quality","text","fInputBytes","textLen","fInputLen","scanInput","checkEscapes","escapeSequences","length","seq","module","exports","ISO_2022_JP","name","inherits","ISO_2022_KR","ISO_2022_CN"],"sources":["/Users/sabyrzhanolzhabay/Web-Dev/Arabakz/ArabaFrontend/node_modules/chardet/encoding/iso2022.js"],"sourcesContent":["var util = require('util'),\n  Match = require ('../match');\n\n\n/**\n * This is a superclass for the individual detectors for\n * each of the detectable members of the ISO 2022 family\n * of encodings.\n */\n\nfunction ISO_2022() {}\n\nISO_2022.prototype.match = function(det) {\n\n  /**\n   * Matching function shared among the 2022 detectors JP, CN and KR\n   * Counts up the number of legal an unrecognized escape sequences in\n   * the sample of text, and computes a score based on the total number &\n   * the proportion that fit the encoding.\n   *\n   *\n   * @param text the byte buffer containing text to analyse\n   * @param textLen  the size of the text in the byte.\n   * @param escapeSequences the byte escape sequences to test for.\n   * @return match quality, in the range of 0-100.\n   */\n\n  var i, j;\n  var escN;\n  var hits   = 0;\n  var misses = 0;\n  var shifts = 0;\n  var quality;\n\n  // TODO: refactor me\n  var text = det.fInputBytes;\n  var textLen = det.fInputLen;\n\n  scanInput:\n    for (i = 0; i < textLen; i++) {\n      if (text[i] == 0x1b) {\n        checkEscapes:\n          for (escN = 0; escN < this.escapeSequences.length; escN++) {\n            var seq = this.escapeSequences[escN];\n\n            if ((textLen - i) < seq.length)\n              continue checkEscapes;\n\n            for (j = 1; j < seq.length; j++)\n              if (seq[j] != text[i + j])\n                continue checkEscapes;\n\n\n            hits++;\n            i += seq.length - 1;\n            continue scanInput;\n          }\n\n          misses++;\n      }\n\n      // Shift in/out\n      if (text[i] == 0x0e || text[i] == 0x0f)\n        shifts++;\n\n    }\n\n  if (hits == 0)\n    return null;\n\n  //\n  // Initial quality is based on relative proportion of recongized vs.\n  //   unrecognized escape sequences.\n  //   All good:  quality = 100;\n  //   half or less good: quality = 0;\n  //   linear inbetween.\n  quality = (100 * hits - 100 * misses) / (hits + misses);\n\n  // Back off quality if there were too few escape sequences seen.\n  //   Include shifts in this computation, so that KR does not get penalized\n  //   for having only a single Escape sequence, but many shifts.\n  if (hits + shifts < 5)\n    quality -= (5 - (hits + shifts)) * 10;\n\n  return quality <= 0 ? null : new Match(det, this, quality);\n};\n\nmodule.exports.ISO_2022_JP = function() {\n  this.name = function() {\n    return 'ISO-2022-JP';\n  };\n  this.escapeSequences = [\n    [ 0x1b, 0x24, 0x28, 0x43 ],   // KS X 1001:1992\n    [ 0x1b, 0x24, 0x28, 0x44 ],   // JIS X 212-1990\n    [ 0x1b, 0x24, 0x40 ],         // JIS C 6226-1978\n    [ 0x1b, 0x24, 0x41 ],         // GB 2312-80\n    [ 0x1b, 0x24, 0x42 ],         // JIS X 208-1983\n    [ 0x1b, 0x26, 0x40 ],         // JIS X 208 1990, 1997\n    [ 0x1b, 0x28, 0x42 ],         // ASCII\n    [ 0x1b, 0x28, 0x48 ],         // JIS-Roman\n    [ 0x1b, 0x28, 0x49 ],         // Half-width katakana\n    [ 0x1b, 0x28, 0x4a ],         // JIS-Roman\n    [ 0x1b, 0x2e, 0x41 ],         // ISO 8859-1\n    [ 0x1b, 0x2e, 0x46 ]          // ISO 8859-7\n  ];\n};\nutil.inherits(module.exports.ISO_2022_JP, ISO_2022);\n\n\n\nmodule.exports.ISO_2022_KR = function() {\n  this.name = function() {\n    return 'ISO-2022-KR';\n  };\n  this.escapeSequences = [\n    [ 0x1b, 0x24, 0x29, 0x43 ]\n  ];\n};\nutil.inherits(module.exports.ISO_2022_KR, ISO_2022);\n\n\n\nmodule.exports.ISO_2022_CN = function() {\n  this.name = function() {\n    return 'ISO-2022-CN';\n  };\n  this.escapeSequences = [\n    [ 0x1b, 0x24, 0x29, 0x41 ],   // GB 2312-80\n    [ 0x1b, 0x24, 0x29, 0x47 ],   // CNS 11643-1992 Plane 1\n    [ 0x1b, 0x24, 0x2A, 0x48 ],   // CNS 11643-1992 Plane 2\n    [ 0x1b, 0x24, 0x29, 0x45 ],   // ISO-IR-165\n    [ 0x1b, 0x24, 0x2B, 0x49 ],   // CNS 11643-1992 Plane 3\n    [ 0x1b, 0x24, 0x2B, 0x4A ],   // CNS 11643-1992 Plane 4\n    [ 0x1b, 0x24, 0x2B, 0x4B ],   // CNS 11643-1992 Plane 5\n    [ 0x1b, 0x24, 0x2B, 0x4C ],   // CNS 11643-1992 Plane 6\n    [ 0x1b, 0x24, 0x2B, 0x4D ],   // CNS 11643-1992 Plane 7\n    [ 0x1b, 0x4e ],               // SS2\n    [ 0x1b, 0x4f ]                // SS3\n  ];\n};\nutil.inherits(module.exports.ISO_2022_CN, ISO_2022);\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}