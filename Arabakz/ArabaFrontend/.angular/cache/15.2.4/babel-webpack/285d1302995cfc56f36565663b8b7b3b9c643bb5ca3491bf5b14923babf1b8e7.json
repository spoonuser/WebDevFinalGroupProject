{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AliasHost = void 0;\nconst path_1 = require(\"../path\");\nconst resolver_1 = require(\"./resolver\");\n/**\n * A Virtual Host that allow to alias some paths to other paths.\n *\n * This does not verify, when setting an alias, that the target or source exist. Neither does it\n * check whether it's a file or a directory. Please not that directories are also renamed/replaced.\n *\n * No recursion is done on the resolution, which means the following is perfectly valid then:\n *\n * ```\n *     host.aliases.set(normalize('/file/a'), normalize('/file/b'));\n *     host.aliases.set(normalize('/file/b'), normalize('/file/a'));\n * ```\n *\n * This will result in a proper swap of two files for each others.\n *\n * @example\n *   const host = new SimpleMemoryHost();\n *   host.write(normalize('/some/file'), content).subscribe();\n *\n *   const aHost = new AliasHost(host);\n *   aHost.read(normalize('/some/file'))\n *     .subscribe(x => expect(x).toBe(content));\n *   aHost.aliases.set(normalize('/some/file'), normalize('/other/path');\n *\n *   // This file will not exist because /other/path does not exist.\n *   aHost.read(normalize('/some/file'))\n *     .subscribe(undefined, err => expect(err.message).toMatch(/does not exist/));\n *\n * @example\n *   const host = new SimpleMemoryHost();\n *   host.write(normalize('/some/folder/file'), content).subscribe();\n *\n *   const aHost = new AliasHost(host);\n *   aHost.read(normalize('/some/folder/file'))\n *     .subscribe(x => expect(x).toBe(content));\n *   aHost.aliases.set(normalize('/some'), normalize('/other');\n *\n *   // This file will not exist because /other/path does not exist.\n *   aHost.read(normalize('/some/folder/file'))\n *     .subscribe(undefined, err => expect(err.message).toMatch(/does not exist/));\n *\n *   // Create the file with new content and verify that this has the new content.\n *   aHost.write(normalize('/other/folder/file'), content2).subscribe();\n *   aHost.read(normalize('/some/folder/file'))\n *     .subscribe(x => expect(x).toBe(content2));\n */\nclass AliasHost extends resolver_1.ResolverHost {\n  constructor() {\n    super(...arguments);\n    this._aliases = new Map();\n  }\n  _resolve(path) {\n    let maybeAlias = this._aliases.get(path);\n    const sp = (0, path_1.split)(path);\n    const remaining = [];\n    // Also resolve all parents of the requested files, only picking the first one that matches.\n    // This can have surprising behaviour when aliases are inside another alias. It will always\n    // use the closest one to the file.\n    while (!maybeAlias && sp.length > 0) {\n      const p = (0, path_1.join)(path_1.NormalizedRoot, ...sp);\n      maybeAlias = this._aliases.get(p);\n      if (maybeAlias) {\n        maybeAlias = (0, path_1.join)(maybeAlias, ...remaining);\n      }\n      // Allow non-null-operator because we know sp.length > 0 (condition on while).\n      remaining.unshift(sp.pop()); // eslint-disable-line @typescript-eslint/no-non-null-assertion\n    }\n\n    return maybeAlias || path;\n  }\n  get aliases() {\n    return this._aliases;\n  }\n}\nexports.AliasHost = AliasHost;","map":{"version":3,"names":["Object","defineProperty","exports","value","AliasHost","path_1","require","resolver_1","ResolverHost","constructor","arguments","_aliases","Map","_resolve","path","maybeAlias","get","sp","split","remaining","length","p","join","NormalizedRoot","unshift","pop","aliases"],"sources":["/Users/sabyrzhanolzhabay/Web-Dev/Arabakz/ArabaFrontend/node_modules/@angular/cli/node_modules/@angular-devkit/core/src/virtual-fs/host/alias.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AliasHost = void 0;\nconst path_1 = require(\"../path\");\nconst resolver_1 = require(\"./resolver\");\n/**\n * A Virtual Host that allow to alias some paths to other paths.\n *\n * This does not verify, when setting an alias, that the target or source exist. Neither does it\n * check whether it's a file or a directory. Please not that directories are also renamed/replaced.\n *\n * No recursion is done on the resolution, which means the following is perfectly valid then:\n *\n * ```\n *     host.aliases.set(normalize('/file/a'), normalize('/file/b'));\n *     host.aliases.set(normalize('/file/b'), normalize('/file/a'));\n * ```\n *\n * This will result in a proper swap of two files for each others.\n *\n * @example\n *   const host = new SimpleMemoryHost();\n *   host.write(normalize('/some/file'), content).subscribe();\n *\n *   const aHost = new AliasHost(host);\n *   aHost.read(normalize('/some/file'))\n *     .subscribe(x => expect(x).toBe(content));\n *   aHost.aliases.set(normalize('/some/file'), normalize('/other/path');\n *\n *   // This file will not exist because /other/path does not exist.\n *   aHost.read(normalize('/some/file'))\n *     .subscribe(undefined, err => expect(err.message).toMatch(/does not exist/));\n *\n * @example\n *   const host = new SimpleMemoryHost();\n *   host.write(normalize('/some/folder/file'), content).subscribe();\n *\n *   const aHost = new AliasHost(host);\n *   aHost.read(normalize('/some/folder/file'))\n *     .subscribe(x => expect(x).toBe(content));\n *   aHost.aliases.set(normalize('/some'), normalize('/other');\n *\n *   // This file will not exist because /other/path does not exist.\n *   aHost.read(normalize('/some/folder/file'))\n *     .subscribe(undefined, err => expect(err.message).toMatch(/does not exist/));\n *\n *   // Create the file with new content and verify that this has the new content.\n *   aHost.write(normalize('/other/folder/file'), content2).subscribe();\n *   aHost.read(normalize('/some/folder/file'))\n *     .subscribe(x => expect(x).toBe(content2));\n */\nclass AliasHost extends resolver_1.ResolverHost {\n    constructor() {\n        super(...arguments);\n        this._aliases = new Map();\n    }\n    _resolve(path) {\n        let maybeAlias = this._aliases.get(path);\n        const sp = (0, path_1.split)(path);\n        const remaining = [];\n        // Also resolve all parents of the requested files, only picking the first one that matches.\n        // This can have surprising behaviour when aliases are inside another alias. It will always\n        // use the closest one to the file.\n        while (!maybeAlias && sp.length > 0) {\n            const p = (0, path_1.join)(path_1.NormalizedRoot, ...sp);\n            maybeAlias = this._aliases.get(p);\n            if (maybeAlias) {\n                maybeAlias = (0, path_1.join)(maybeAlias, ...remaining);\n            }\n            // Allow non-null-operator because we know sp.length > 0 (condition on while).\n            remaining.unshift(sp.pop()); // eslint-disable-line @typescript-eslint/no-non-null-assertion\n        }\n        return maybeAlias || path;\n    }\n    get aliases() {\n        return this._aliases;\n    }\n}\nexports.AliasHost = AliasHost;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,SAAS,GAAG,KAAK,CAAC;AAC1B,MAAMC,MAAM,GAAGC,OAAO,CAAC,SAAS,CAAC;AACjC,MAAMC,UAAU,GAAGD,OAAO,CAAC,YAAY,CAAC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMF,SAAS,SAASG,UAAU,CAACC,YAAY,CAAC;EAC5CC,WAAW,GAAG;IACV,KAAK,CAAC,GAAGC,SAAS,CAAC;IACnB,IAAI,CAACC,QAAQ,GAAG,IAAIC,GAAG,EAAE;EAC7B;EACAC,QAAQ,CAACC,IAAI,EAAE;IACX,IAAIC,UAAU,GAAG,IAAI,CAACJ,QAAQ,CAACK,GAAG,CAACF,IAAI,CAAC;IACxC,MAAMG,EAAE,GAAG,CAAC,CAAC,EAAEZ,MAAM,CAACa,KAAK,EAAEJ,IAAI,CAAC;IAClC,MAAMK,SAAS,GAAG,EAAE;IACpB;IACA;IACA;IACA,OAAO,CAACJ,UAAU,IAAIE,EAAE,CAACG,MAAM,GAAG,CAAC,EAAE;MACjC,MAAMC,CAAC,GAAG,CAAC,CAAC,EAAEhB,MAAM,CAACiB,IAAI,EAAEjB,MAAM,CAACkB,cAAc,EAAE,GAAGN,EAAE,CAAC;MACxDF,UAAU,GAAG,IAAI,CAACJ,QAAQ,CAACK,GAAG,CAACK,CAAC,CAAC;MACjC,IAAIN,UAAU,EAAE;QACZA,UAAU,GAAG,CAAC,CAAC,EAAEV,MAAM,CAACiB,IAAI,EAAEP,UAAU,EAAE,GAAGI,SAAS,CAAC;MAC3D;MACA;MACAA,SAAS,CAACK,OAAO,CAACP,EAAE,CAACQ,GAAG,EAAE,CAAC,CAAC,CAAC;IACjC;;IACA,OAAOV,UAAU,IAAID,IAAI;EAC7B;EACA,IAAIY,OAAO,GAAG;IACV,OAAO,IAAI,CAACf,QAAQ;EACxB;AACJ;AACAT,OAAO,CAACE,SAAS,GAAGA,SAAS"},"metadata":{},"sourceType":"script","externalDependencies":[]}