{"ast":null,"code":"/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nconst base64VLQ = require(\"./base64-vlq\");\nconst util = require(\"./util\");\nconst ArraySet = require(\"./array-set\").ArraySet;\nconst MappingList = require(\"./mapping-list\").MappingList;\n\n/**\n * An instance of the SourceMapGenerator represents a source map which is\n * being built incrementally. You may pass an object with the following\n * properties:\n *\n *   - file: The filename of the generated source.\n *   - sourceRoot: A root for all relative URLs in this source map.\n */\nclass SourceMapGenerator {\n  constructor(aArgs) {\n    if (!aArgs) {\n      aArgs = {};\n    }\n    this._file = util.getArg(aArgs, \"file\", null);\n    this._sourceRoot = util.getArg(aArgs, \"sourceRoot\", null);\n    this._skipValidation = util.getArg(aArgs, \"skipValidation\", false);\n    this._sources = new ArraySet();\n    this._names = new ArraySet();\n    this._mappings = new MappingList();\n    this._sourcesContents = null;\n  }\n\n  /**\n   * Creates a new SourceMapGenerator based on a SourceMapConsumer\n   *\n   * @param aSourceMapConsumer The SourceMap.\n   */\n  static fromSourceMap(aSourceMapConsumer) {\n    const sourceRoot = aSourceMapConsumer.sourceRoot;\n    const generator = new SourceMapGenerator({\n      file: aSourceMapConsumer.file,\n      sourceRoot\n    });\n    aSourceMapConsumer.eachMapping(function (mapping) {\n      const newMapping = {\n        generated: {\n          line: mapping.generatedLine,\n          column: mapping.generatedColumn\n        }\n      };\n      if (mapping.source != null) {\n        newMapping.source = mapping.source;\n        if (sourceRoot != null) {\n          newMapping.source = util.relative(sourceRoot, newMapping.source);\n        }\n        newMapping.original = {\n          line: mapping.originalLine,\n          column: mapping.originalColumn\n        };\n        if (mapping.name != null) {\n          newMapping.name = mapping.name;\n        }\n      }\n      generator.addMapping(newMapping);\n    });\n    aSourceMapConsumer.sources.forEach(function (sourceFile) {\n      let sourceRelative = sourceFile;\n      if (sourceRoot !== null) {\n        sourceRelative = util.relative(sourceRoot, sourceFile);\n      }\n      if (!generator._sources.has(sourceRelative)) {\n        generator._sources.add(sourceRelative);\n      }\n      const content = aSourceMapConsumer.sourceContentFor(sourceFile);\n      if (content != null) {\n        generator.setSourceContent(sourceFile, content);\n      }\n    });\n    return generator;\n  }\n\n  /**\n   * Add a single mapping from original source line and column to the generated\n   * source's line and column for this source map being created. The mapping\n   * object should have the following properties:\n   *\n   *   - generated: An object with the generated line and column positions.\n   *   - original: An object with the original line and column positions.\n   *   - source: The original source file (relative to the sourceRoot).\n   *   - name: An optional original token name for this mapping.\n   */\n  addMapping(aArgs) {\n    const generated = util.getArg(aArgs, \"generated\");\n    const original = util.getArg(aArgs, \"original\", null);\n    let source = util.getArg(aArgs, \"source\", null);\n    let name = util.getArg(aArgs, \"name\", null);\n    if (!this._skipValidation) {\n      this._validateMapping(generated, original, source, name);\n    }\n    if (source != null) {\n      source = String(source);\n      if (!this._sources.has(source)) {\n        this._sources.add(source);\n      }\n    }\n    if (name != null) {\n      name = String(name);\n      if (!this._names.has(name)) {\n        this._names.add(name);\n      }\n    }\n    this._mappings.add({\n      generatedLine: generated.line,\n      generatedColumn: generated.column,\n      originalLine: original != null && original.line,\n      originalColumn: original != null && original.column,\n      source,\n      name\n    });\n  }\n\n  /**\n   * Set the source content for a source file.\n   */\n  setSourceContent(aSourceFile, aSourceContent) {\n    let source = aSourceFile;\n    if (this._sourceRoot != null) {\n      source = util.relative(this._sourceRoot, source);\n    }\n    if (aSourceContent != null) {\n      // Add the source content to the _sourcesContents map.\n      // Create a new _sourcesContents map if the property is null.\n      if (!this._sourcesContents) {\n        this._sourcesContents = Object.create(null);\n      }\n      this._sourcesContents[util.toSetString(source)] = aSourceContent;\n    } else if (this._sourcesContents) {\n      // Remove the source file from the _sourcesContents map.\n      // If the _sourcesContents map is empty, set the property to null.\n      delete this._sourcesContents[util.toSetString(source)];\n      if (Object.keys(this._sourcesContents).length === 0) {\n        this._sourcesContents = null;\n      }\n    }\n  }\n\n  /**\n   * Applies the mappings of a sub-source-map for a specific source file to the\n   * source map being generated. Each mapping to the supplied source file is\n   * rewritten using the supplied source map. Note: The resolution for the\n   * resulting mappings is the minimium of this map and the supplied map.\n   *\n   * @param aSourceMapConsumer The source map to be applied.\n   * @param aSourceFile Optional. The filename of the source file.\n   *        If omitted, SourceMapConsumer's file property will be used.\n   * @param aSourceMapPath Optional. The dirname of the path to the source map\n   *        to be applied. If relative, it is relative to the SourceMapConsumer.\n   *        This parameter is needed when the two source maps aren't in the same\n   *        directory, and the source map to be applied contains relative source\n   *        paths. If so, those relative source paths need to be rewritten\n   *        relative to the SourceMapGenerator.\n   */\n  applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {\n    let sourceFile = aSourceFile;\n    // If aSourceFile is omitted, we will use the file property of the SourceMap\n    if (aSourceFile == null) {\n      if (aSourceMapConsumer.file == null) {\n        throw new Error(\"SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, \" + 'or the source map\\'s \"file\" property. Both were omitted.');\n      }\n      sourceFile = aSourceMapConsumer.file;\n    }\n    const sourceRoot = this._sourceRoot;\n    // Make \"sourceFile\" relative if an absolute Url is passed.\n    if (sourceRoot != null) {\n      sourceFile = util.relative(sourceRoot, sourceFile);\n    }\n    // Applying the SourceMap can add and remove items from the sources and\n    // the names array.\n    const newSources = this._mappings.toArray().length > 0 ? new ArraySet() : this._sources;\n    const newNames = new ArraySet();\n\n    // Find mappings for the \"sourceFile\"\n    this._mappings.unsortedForEach(function (mapping) {\n      if (mapping.source === sourceFile && mapping.originalLine != null) {\n        // Check if it can be mapped by the source map, then update the mapping.\n        const original = aSourceMapConsumer.originalPositionFor({\n          line: mapping.originalLine,\n          column: mapping.originalColumn\n        });\n        if (original.source != null) {\n          // Copy mapping\n          mapping.source = original.source;\n          if (aSourceMapPath != null) {\n            mapping.source = util.join(aSourceMapPath, mapping.source);\n          }\n          if (sourceRoot != null) {\n            mapping.source = util.relative(sourceRoot, mapping.source);\n          }\n          mapping.originalLine = original.line;\n          mapping.originalColumn = original.column;\n          if (original.name != null) {\n            mapping.name = original.name;\n          }\n        }\n      }\n      const source = mapping.source;\n      if (source != null && !newSources.has(source)) {\n        newSources.add(source);\n      }\n      const name = mapping.name;\n      if (name != null && !newNames.has(name)) {\n        newNames.add(name);\n      }\n    }, this);\n    this._sources = newSources;\n    this._names = newNames;\n\n    // Copy sourcesContents of applied map.\n    aSourceMapConsumer.sources.forEach(function (srcFile) {\n      const content = aSourceMapConsumer.sourceContentFor(srcFile);\n      if (content != null) {\n        if (aSourceMapPath != null) {\n          srcFile = util.join(aSourceMapPath, srcFile);\n        }\n        if (sourceRoot != null) {\n          srcFile = util.relative(sourceRoot, srcFile);\n        }\n        this.setSourceContent(srcFile, content);\n      }\n    }, this);\n  }\n\n  /**\n   * A mapping can have one of the three levels of data:\n   *\n   *   1. Just the generated position.\n   *   2. The Generated position, original position, and original source.\n   *   3. Generated and original position, original source, as well as a name\n   *      token.\n   *\n   * To maintain consistency, we validate that any new mapping being added falls\n   * in to one of these categories.\n   */\n  _validateMapping(aGenerated, aOriginal, aSource, aName) {\n    // When aOriginal is truthy but has empty values for .line and .column,\n    // it is most likely a programmer error. In this case we throw a very\n    // specific error message to try to guide them the right way.\n    // For example: https://github.com/Polymer/polymer-bundler/pull/519\n    if (aOriginal && typeof aOriginal.line !== \"number\" && typeof aOriginal.column !== \"number\") {\n      throw new Error(\"original.line and original.column are not numbers -- you probably meant to omit \" + \"the original mapping entirely and only map the generated position. If so, pass \" + \"null for the original mapping instead of an object with empty or null values.\");\n    }\n    if (aGenerated && \"line\" in aGenerated && \"column\" in aGenerated && aGenerated.line > 0 && aGenerated.column >= 0 && !aOriginal && !aSource && !aName) {\n      // Case 1.\n    } else if (aGenerated && \"line\" in aGenerated && \"column\" in aGenerated && aOriginal && \"line\" in aOriginal && \"column\" in aOriginal && aGenerated.line > 0 && aGenerated.column >= 0 && aOriginal.line > 0 && aOriginal.column >= 0 && aSource) {\n      // Cases 2 and 3.\n    } else {\n      throw new Error(\"Invalid mapping: \" + JSON.stringify({\n        generated: aGenerated,\n        source: aSource,\n        original: aOriginal,\n        name: aName\n      }));\n    }\n  }\n\n  /**\n   * Serialize the accumulated mappings in to the stream of base 64 VLQs\n   * specified by the source map format.\n   */\n  _serializeMappings() {\n    let previousGeneratedColumn = 0;\n    let previousGeneratedLine = 1;\n    let previousOriginalColumn = 0;\n    let previousOriginalLine = 0;\n    let previousName = 0;\n    let previousSource = 0;\n    let result = \"\";\n    let next;\n    let mapping;\n    let nameIdx;\n    let sourceIdx;\n    const mappings = this._mappings.toArray();\n    for (let i = 0, len = mappings.length; i < len; i++) {\n      mapping = mappings[i];\n      next = \"\";\n      if (mapping.generatedLine !== previousGeneratedLine) {\n        previousGeneratedColumn = 0;\n        while (mapping.generatedLine !== previousGeneratedLine) {\n          next += \";\";\n          previousGeneratedLine++;\n        }\n      } else if (i > 0) {\n        if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {\n          continue;\n        }\n        next += \",\";\n      }\n      next += base64VLQ.encode(mapping.generatedColumn - previousGeneratedColumn);\n      previousGeneratedColumn = mapping.generatedColumn;\n      if (mapping.source != null) {\n        sourceIdx = this._sources.indexOf(mapping.source);\n        next += base64VLQ.encode(sourceIdx - previousSource);\n        previousSource = sourceIdx;\n\n        // lines are stored 0-based in SourceMap spec version 3\n        next += base64VLQ.encode(mapping.originalLine - 1 - previousOriginalLine);\n        previousOriginalLine = mapping.originalLine - 1;\n        next += base64VLQ.encode(mapping.originalColumn - previousOriginalColumn);\n        previousOriginalColumn = mapping.originalColumn;\n        if (mapping.name != null) {\n          nameIdx = this._names.indexOf(mapping.name);\n          next += base64VLQ.encode(nameIdx - previousName);\n          previousName = nameIdx;\n        }\n      }\n      result += next;\n    }\n    return result;\n  }\n  _generateSourcesContent(aSources, aSourceRoot) {\n    return aSources.map(function (source) {\n      if (!this._sourcesContents) {\n        return null;\n      }\n      if (aSourceRoot != null) {\n        source = util.relative(aSourceRoot, source);\n      }\n      const key = util.toSetString(source);\n      return Object.prototype.hasOwnProperty.call(this._sourcesContents, key) ? this._sourcesContents[key] : null;\n    }, this);\n  }\n\n  /**\n   * Externalize the source map.\n   */\n  toJSON() {\n    const map = {\n      version: this._version,\n      sources: this._sources.toArray(),\n      names: this._names.toArray(),\n      mappings: this._serializeMappings()\n    };\n    if (this._file != null) {\n      map.file = this._file;\n    }\n    if (this._sourceRoot != null) {\n      map.sourceRoot = this._sourceRoot;\n    }\n    if (this._sourcesContents) {\n      map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);\n    }\n    return map;\n  }\n\n  /**\n   * Render the source map being generated to a string.\n   */\n  toString() {\n    return JSON.stringify(this.toJSON());\n  }\n}\nSourceMapGenerator.prototype._version = 3;\nexports.SourceMapGenerator = SourceMapGenerator;","map":{"version":3,"names":["base64VLQ","require","util","ArraySet","MappingList","SourceMapGenerator","constructor","aArgs","_file","getArg","_sourceRoot","_skipValidation","_sources","_names","_mappings","_sourcesContents","fromSourceMap","aSourceMapConsumer","sourceRoot","generator","file","eachMapping","mapping","newMapping","generated","line","generatedLine","column","generatedColumn","source","relative","original","originalLine","originalColumn","name","addMapping","sources","forEach","sourceFile","sourceRelative","has","add","content","sourceContentFor","setSourceContent","_validateMapping","String","aSourceFile","aSourceContent","Object","create","toSetString","keys","length","applySourceMap","aSourceMapPath","Error","newSources","toArray","newNames","unsortedForEach","originalPositionFor","join","srcFile","aGenerated","aOriginal","aSource","aName","JSON","stringify","_serializeMappings","previousGeneratedColumn","previousGeneratedLine","previousOriginalColumn","previousOriginalLine","previousName","previousSource","result","next","nameIdx","sourceIdx","mappings","i","len","compareByGeneratedPositionsInflated","encode","indexOf","_generateSourcesContent","aSources","aSourceRoot","map","key","prototype","hasOwnProperty","call","toJSON","version","_version","names","sourcesContent","toString","exports"],"sources":["/Users/sabyrzhanolzhabay/Web-Dev/Arabakz/ArabaFrontend/node_modules/source-map/lib/source-map-generator.js"],"sourcesContent":["/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nconst base64VLQ = require(\"./base64-vlq\");\nconst util = require(\"./util\");\nconst ArraySet = require(\"./array-set\").ArraySet;\nconst MappingList = require(\"./mapping-list\").MappingList;\n\n/**\n * An instance of the SourceMapGenerator represents a source map which is\n * being built incrementally. You may pass an object with the following\n * properties:\n *\n *   - file: The filename of the generated source.\n *   - sourceRoot: A root for all relative URLs in this source map.\n */\nclass SourceMapGenerator {\n  constructor(aArgs) {\n    if (!aArgs) {\n      aArgs = {};\n    }\n    this._file = util.getArg(aArgs, \"file\", null);\n    this._sourceRoot = util.getArg(aArgs, \"sourceRoot\", null);\n    this._skipValidation = util.getArg(aArgs, \"skipValidation\", false);\n    this._sources = new ArraySet();\n    this._names = new ArraySet();\n    this._mappings = new MappingList();\n    this._sourcesContents = null;\n  }\n\n  /**\n   * Creates a new SourceMapGenerator based on a SourceMapConsumer\n   *\n   * @param aSourceMapConsumer The SourceMap.\n   */\n  static fromSourceMap(aSourceMapConsumer) {\n    const sourceRoot = aSourceMapConsumer.sourceRoot;\n    const generator = new SourceMapGenerator({\n      file: aSourceMapConsumer.file,\n      sourceRoot\n    });\n    aSourceMapConsumer.eachMapping(function(mapping) {\n      const newMapping = {\n        generated: {\n          line: mapping.generatedLine,\n          column: mapping.generatedColumn\n        }\n      };\n\n      if (mapping.source != null) {\n        newMapping.source = mapping.source;\n        if (sourceRoot != null) {\n          newMapping.source = util.relative(sourceRoot, newMapping.source);\n        }\n\n        newMapping.original = {\n          line: mapping.originalLine,\n          column: mapping.originalColumn\n        };\n\n        if (mapping.name != null) {\n          newMapping.name = mapping.name;\n        }\n      }\n\n      generator.addMapping(newMapping);\n    });\n    aSourceMapConsumer.sources.forEach(function(sourceFile) {\n      let sourceRelative = sourceFile;\n      if (sourceRoot !== null) {\n        sourceRelative = util.relative(sourceRoot, sourceFile);\n      }\n\n      if (!generator._sources.has(sourceRelative)) {\n        generator._sources.add(sourceRelative);\n      }\n\n      const content = aSourceMapConsumer.sourceContentFor(sourceFile);\n      if (content != null) {\n        generator.setSourceContent(sourceFile, content);\n      }\n    });\n    return generator;\n  }\n\n  /**\n   * Add a single mapping from original source line and column to the generated\n   * source's line and column for this source map being created. The mapping\n   * object should have the following properties:\n   *\n   *   - generated: An object with the generated line and column positions.\n   *   - original: An object with the original line and column positions.\n   *   - source: The original source file (relative to the sourceRoot).\n   *   - name: An optional original token name for this mapping.\n   */\n  addMapping(aArgs) {\n    const generated = util.getArg(aArgs, \"generated\");\n    const original = util.getArg(aArgs, \"original\", null);\n    let source = util.getArg(aArgs, \"source\", null);\n    let name = util.getArg(aArgs, \"name\", null);\n\n    if (!this._skipValidation) {\n      this._validateMapping(generated, original, source, name);\n    }\n\n    if (source != null) {\n      source = String(source);\n      if (!this._sources.has(source)) {\n        this._sources.add(source);\n      }\n    }\n\n    if (name != null) {\n      name = String(name);\n      if (!this._names.has(name)) {\n        this._names.add(name);\n      }\n    }\n\n    this._mappings.add({\n      generatedLine: generated.line,\n      generatedColumn: generated.column,\n      originalLine: original != null && original.line,\n      originalColumn: original != null && original.column,\n      source,\n      name\n    });\n  }\n\n  /**\n   * Set the source content for a source file.\n   */\n  setSourceContent(aSourceFile, aSourceContent) {\n    let source = aSourceFile;\n    if (this._sourceRoot != null) {\n      source = util.relative(this._sourceRoot, source);\n    }\n\n    if (aSourceContent != null) {\n      // Add the source content to the _sourcesContents map.\n      // Create a new _sourcesContents map if the property is null.\n      if (!this._sourcesContents) {\n        this._sourcesContents = Object.create(null);\n      }\n      this._sourcesContents[util.toSetString(source)] = aSourceContent;\n    } else if (this._sourcesContents) {\n      // Remove the source file from the _sourcesContents map.\n      // If the _sourcesContents map is empty, set the property to null.\n      delete this._sourcesContents[util.toSetString(source)];\n      if (Object.keys(this._sourcesContents).length === 0) {\n        this._sourcesContents = null;\n      }\n    }\n  }\n\n  /**\n   * Applies the mappings of a sub-source-map for a specific source file to the\n   * source map being generated. Each mapping to the supplied source file is\n   * rewritten using the supplied source map. Note: The resolution for the\n   * resulting mappings is the minimium of this map and the supplied map.\n   *\n   * @param aSourceMapConsumer The source map to be applied.\n   * @param aSourceFile Optional. The filename of the source file.\n   *        If omitted, SourceMapConsumer's file property will be used.\n   * @param aSourceMapPath Optional. The dirname of the path to the source map\n   *        to be applied. If relative, it is relative to the SourceMapConsumer.\n   *        This parameter is needed when the two source maps aren't in the same\n   *        directory, and the source map to be applied contains relative source\n   *        paths. If so, those relative source paths need to be rewritten\n   *        relative to the SourceMapGenerator.\n   */\n  applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {\n    let sourceFile = aSourceFile;\n    // If aSourceFile is omitted, we will use the file property of the SourceMap\n    if (aSourceFile == null) {\n      if (aSourceMapConsumer.file == null) {\n        throw new Error(\n          \"SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, \" +\n          'or the source map\\'s \"file\" property. Both were omitted.'\n        );\n      }\n      sourceFile = aSourceMapConsumer.file;\n    }\n    const sourceRoot = this._sourceRoot;\n    // Make \"sourceFile\" relative if an absolute Url is passed.\n    if (sourceRoot != null) {\n      sourceFile = util.relative(sourceRoot, sourceFile);\n    }\n    // Applying the SourceMap can add and remove items from the sources and\n    // the names array.\n    const newSources = this._mappings.toArray().length > 0\n      ? new ArraySet()\n      : this._sources;\n    const newNames = new ArraySet();\n\n    // Find mappings for the \"sourceFile\"\n    this._mappings.unsortedForEach(function(mapping) {\n      if (mapping.source === sourceFile && mapping.originalLine != null) {\n        // Check if it can be mapped by the source map, then update the mapping.\n        const original = aSourceMapConsumer.originalPositionFor({\n          line: mapping.originalLine,\n          column: mapping.originalColumn\n        });\n        if (original.source != null) {\n          // Copy mapping\n          mapping.source = original.source;\n          if (aSourceMapPath != null) {\n            mapping.source = util.join(aSourceMapPath, mapping.source);\n          }\n          if (sourceRoot != null) {\n            mapping.source = util.relative(sourceRoot, mapping.source);\n          }\n          mapping.originalLine = original.line;\n          mapping.originalColumn = original.column;\n          if (original.name != null) {\n            mapping.name = original.name;\n          }\n        }\n      }\n\n      const source = mapping.source;\n      if (source != null && !newSources.has(source)) {\n        newSources.add(source);\n      }\n\n      const name = mapping.name;\n      if (name != null && !newNames.has(name)) {\n        newNames.add(name);\n      }\n\n    }, this);\n    this._sources = newSources;\n    this._names = newNames;\n\n    // Copy sourcesContents of applied map.\n    aSourceMapConsumer.sources.forEach(function(srcFile) {\n      const content = aSourceMapConsumer.sourceContentFor(srcFile);\n      if (content != null) {\n        if (aSourceMapPath != null) {\n          srcFile = util.join(aSourceMapPath, srcFile);\n        }\n        if (sourceRoot != null) {\n          srcFile = util.relative(sourceRoot, srcFile);\n        }\n        this.setSourceContent(srcFile, content);\n      }\n    }, this);\n  }\n\n  /**\n   * A mapping can have one of the three levels of data:\n   *\n   *   1. Just the generated position.\n   *   2. The Generated position, original position, and original source.\n   *   3. Generated and original position, original source, as well as a name\n   *      token.\n   *\n   * To maintain consistency, we validate that any new mapping being added falls\n   * in to one of these categories.\n   */\n  _validateMapping(aGenerated, aOriginal, aSource, aName) {\n    // When aOriginal is truthy but has empty values for .line and .column,\n    // it is most likely a programmer error. In this case we throw a very\n    // specific error message to try to guide them the right way.\n    // For example: https://github.com/Polymer/polymer-bundler/pull/519\n    if (aOriginal && typeof aOriginal.line !== \"number\" && typeof aOriginal.column !== \"number\") {\n        throw new Error(\n            \"original.line and original.column are not numbers -- you probably meant to omit \" +\n            \"the original mapping entirely and only map the generated position. If so, pass \" +\n            \"null for the original mapping instead of an object with empty or null values.\"\n        );\n    }\n\n    if (aGenerated && \"line\" in aGenerated && \"column\" in aGenerated\n        && aGenerated.line > 0 && aGenerated.column >= 0\n        && !aOriginal && !aSource && !aName) {\n      // Case 1.\n\n    } else if (aGenerated && \"line\" in aGenerated && \"column\" in aGenerated\n             && aOriginal && \"line\" in aOriginal && \"column\" in aOriginal\n             && aGenerated.line > 0 && aGenerated.column >= 0\n             && aOriginal.line > 0 && aOriginal.column >= 0\n             && aSource) {\n      // Cases 2 and 3.\n\n    } else {\n      throw new Error(\"Invalid mapping: \" + JSON.stringify({\n        generated: aGenerated,\n        source: aSource,\n        original: aOriginal,\n        name: aName\n      }));\n    }\n  }\n\n  /**\n   * Serialize the accumulated mappings in to the stream of base 64 VLQs\n   * specified by the source map format.\n   */\n  _serializeMappings() {\n    let previousGeneratedColumn = 0;\n    let previousGeneratedLine = 1;\n    let previousOriginalColumn = 0;\n    let previousOriginalLine = 0;\n    let previousName = 0;\n    let previousSource = 0;\n    let result = \"\";\n    let next;\n    let mapping;\n    let nameIdx;\n    let sourceIdx;\n\n    const mappings = this._mappings.toArray();\n    for (let i = 0, len = mappings.length; i < len; i++) {\n      mapping = mappings[i];\n      next = \"\";\n\n      if (mapping.generatedLine !== previousGeneratedLine) {\n        previousGeneratedColumn = 0;\n        while (mapping.generatedLine !== previousGeneratedLine) {\n          next += \";\";\n          previousGeneratedLine++;\n        }\n      } else if (i > 0) {\n        if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {\n          continue;\n        }\n        next += \",\";\n      }\n\n      next += base64VLQ.encode(mapping.generatedColumn\n                                 - previousGeneratedColumn);\n      previousGeneratedColumn = mapping.generatedColumn;\n\n      if (mapping.source != null) {\n        sourceIdx = this._sources.indexOf(mapping.source);\n        next += base64VLQ.encode(sourceIdx - previousSource);\n        previousSource = sourceIdx;\n\n        // lines are stored 0-based in SourceMap spec version 3\n        next += base64VLQ.encode(mapping.originalLine - 1\n                                   - previousOriginalLine);\n        previousOriginalLine = mapping.originalLine - 1;\n\n        next += base64VLQ.encode(mapping.originalColumn\n                                   - previousOriginalColumn);\n        previousOriginalColumn = mapping.originalColumn;\n\n        if (mapping.name != null) {\n          nameIdx = this._names.indexOf(mapping.name);\n          next += base64VLQ.encode(nameIdx - previousName);\n          previousName = nameIdx;\n        }\n      }\n\n      result += next;\n    }\n\n    return result;\n  }\n\n  _generateSourcesContent(aSources, aSourceRoot) {\n    return aSources.map(function(source) {\n      if (!this._sourcesContents) {\n        return null;\n      }\n      if (aSourceRoot != null) {\n        source = util.relative(aSourceRoot, source);\n      }\n      const key = util.toSetString(source);\n      return Object.prototype.hasOwnProperty.call(this._sourcesContents, key)\n        ? this._sourcesContents[key]\n        : null;\n    }, this);\n  }\n\n  /**\n   * Externalize the source map.\n   */\n  toJSON() {\n    const map = {\n      version: this._version,\n      sources: this._sources.toArray(),\n      names: this._names.toArray(),\n      mappings: this._serializeMappings()\n    };\n    if (this._file != null) {\n      map.file = this._file;\n    }\n    if (this._sourceRoot != null) {\n      map.sourceRoot = this._sourceRoot;\n    }\n    if (this._sourcesContents) {\n      map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);\n    }\n\n    return map;\n  }\n\n  /**\n   * Render the source map being generated to a string.\n   */\n  toString() {\n    return JSON.stringify(this.toJSON());\n  }\n}\n\nSourceMapGenerator.prototype._version = 3;\nexports.SourceMapGenerator = SourceMapGenerator;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}