{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst codegen_1 = require(\"../../compile/codegen\");\nconst util_1 = require(\"../../compile/util\");\nconst error = {\n  message: ({\n    params\n  }) => (0, codegen_1.str)`must match \"${params.ifClause}\" schema`,\n  params: ({\n    params\n  }) => (0, codegen_1._)`{failingKeyword: ${params.ifClause}}`\n};\nconst def = {\n  keyword: \"if\",\n  schemaType: [\"object\", \"boolean\"],\n  trackErrors: true,\n  error,\n  code(cxt) {\n    const {\n      gen,\n      parentSchema,\n      it\n    } = cxt;\n    if (parentSchema.then === undefined && parentSchema.else === undefined) {\n      (0, util_1.checkStrictMode)(it, '\"if\" without \"then\" and \"else\" is ignored');\n    }\n    const hasThen = hasSchema(it, \"then\");\n    const hasElse = hasSchema(it, \"else\");\n    if (!hasThen && !hasElse) return;\n    const valid = gen.let(\"valid\", true);\n    const schValid = gen.name(\"_valid\");\n    validateIf();\n    cxt.reset();\n    if (hasThen && hasElse) {\n      const ifClause = gen.let(\"ifClause\");\n      cxt.setParams({\n        ifClause\n      });\n      gen.if(schValid, validateClause(\"then\", ifClause), validateClause(\"else\", ifClause));\n    } else if (hasThen) {\n      gen.if(schValid, validateClause(\"then\"));\n    } else {\n      gen.if((0, codegen_1.not)(schValid), validateClause(\"else\"));\n    }\n    cxt.pass(valid, () => cxt.error(true));\n    function validateIf() {\n      const schCxt = cxt.subschema({\n        keyword: \"if\",\n        compositeRule: true,\n        createErrors: false,\n        allErrors: false\n      }, schValid);\n      cxt.mergeEvaluated(schCxt);\n    }\n    function validateClause(keyword, ifClause) {\n      return () => {\n        const schCxt = cxt.subschema({\n          keyword\n        }, schValid);\n        gen.assign(valid, schValid);\n        cxt.mergeValidEvaluated(schCxt, valid);\n        if (ifClause) gen.assign(ifClause, (0, codegen_1._)`${keyword}`);else cxt.setParams({\n          ifClause: keyword\n        });\n      };\n    }\n  }\n};\nfunction hasSchema(it, keyword) {\n  const schema = it.schema[keyword];\n  return schema !== undefined && !(0, util_1.alwaysValidSchema)(it, schema);\n}\nexports.default = def;","map":{"version":3,"names":["Object","defineProperty","exports","value","codegen_1","require","util_1","error","message","params","str","ifClause","_","def","keyword","schemaType","trackErrors","code","cxt","gen","parentSchema","it","then","undefined","else","checkStrictMode","hasThen","hasSchema","hasElse","valid","let","schValid","name","validateIf","reset","setParams","if","validateClause","not","pass","schCxt","subschema","compositeRule","createErrors","allErrors","mergeEvaluated","assign","mergeValidEvaluated","schema","alwaysValidSchema","default"],"sources":["/Users/sabyrzhanolzhabay/Web-Dev/Arabakz/ArabaFrontend/node_modules/ajv/dist/vocabularies/applicator/if.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst codegen_1 = require(\"../../compile/codegen\");\nconst util_1 = require(\"../../compile/util\");\nconst error = {\n    message: ({ params }) => (0, codegen_1.str) `must match \"${params.ifClause}\" schema`,\n    params: ({ params }) => (0, codegen_1._) `{failingKeyword: ${params.ifClause}}`,\n};\nconst def = {\n    keyword: \"if\",\n    schemaType: [\"object\", \"boolean\"],\n    trackErrors: true,\n    error,\n    code(cxt) {\n        const { gen, parentSchema, it } = cxt;\n        if (parentSchema.then === undefined && parentSchema.else === undefined) {\n            (0, util_1.checkStrictMode)(it, '\"if\" without \"then\" and \"else\" is ignored');\n        }\n        const hasThen = hasSchema(it, \"then\");\n        const hasElse = hasSchema(it, \"else\");\n        if (!hasThen && !hasElse)\n            return;\n        const valid = gen.let(\"valid\", true);\n        const schValid = gen.name(\"_valid\");\n        validateIf();\n        cxt.reset();\n        if (hasThen && hasElse) {\n            const ifClause = gen.let(\"ifClause\");\n            cxt.setParams({ ifClause });\n            gen.if(schValid, validateClause(\"then\", ifClause), validateClause(\"else\", ifClause));\n        }\n        else if (hasThen) {\n            gen.if(schValid, validateClause(\"then\"));\n        }\n        else {\n            gen.if((0, codegen_1.not)(schValid), validateClause(\"else\"));\n        }\n        cxt.pass(valid, () => cxt.error(true));\n        function validateIf() {\n            const schCxt = cxt.subschema({\n                keyword: \"if\",\n                compositeRule: true,\n                createErrors: false,\n                allErrors: false,\n            }, schValid);\n            cxt.mergeEvaluated(schCxt);\n        }\n        function validateClause(keyword, ifClause) {\n            return () => {\n                const schCxt = cxt.subschema({ keyword }, schValid);\n                gen.assign(valid, schValid);\n                cxt.mergeValidEvaluated(schCxt, valid);\n                if (ifClause)\n                    gen.assign(ifClause, (0, codegen_1._) `${keyword}`);\n                else\n                    cxt.setParams({ ifClause: keyword });\n            };\n        }\n    },\n};\nfunction hasSchema(it, keyword) {\n    const schema = it.schema[keyword];\n    return schema !== undefined && !(0, util_1.alwaysValidSchema)(it, schema);\n}\nexports.default = def;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}