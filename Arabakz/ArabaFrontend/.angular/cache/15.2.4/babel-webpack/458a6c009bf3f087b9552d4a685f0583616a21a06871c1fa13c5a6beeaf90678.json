{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BaseWorkflow = void 0;\nconst core_1 = require(\"@angular-devkit/core\");\nconst rxjs_1 = require(\"rxjs\");\nconst operators_1 = require(\"rxjs/operators\");\nconst engine_1 = require(\"../engine\");\nconst exception_1 = require(\"../exception/exception\");\nconst formats_1 = require(\"../formats\");\nconst dryrun_1 = require(\"../sink/dryrun\");\nconst host_1 = require(\"../sink/host\");\nconst host_tree_1 = require(\"../tree/host-tree\");\n/**\n * Base class for workflows. Even without abstract methods, this class should not be used without\n * surrounding some initialization for the registry and host. This class only adds life cycle and\n * dryrun/force support. You need to provide any registry and task executors that you need to\n * support.\n * See {@see NodeWorkflow} implementation for how to make a specialized subclass of this.\n * TODO: add default set of CoreSchemaRegistry transforms. Once the job refactor is done, use that\n *       as the support for tasks.\n *\n * @public\n */\nclass BaseWorkflow {\n  constructor(options) {\n    this._reporter = new rxjs_1.Subject();\n    this._lifeCycle = new rxjs_1.Subject();\n    this._host = options.host;\n    this._engineHost = options.engineHost;\n    if (options.registry) {\n      this._registry = options.registry;\n    } else {\n      this._registry = new core_1.schema.CoreSchemaRegistry(formats_1.standardFormats);\n      this._registry.addPostTransform(core_1.schema.transforms.addUndefinedDefaults);\n    }\n    this._engine = new engine_1.SchematicEngine(this._engineHost, this);\n    this._context = [];\n    this._force = options.force || false;\n    this._dryRun = options.dryRun || false;\n  }\n  get context() {\n    const maybeContext = this._context[this._context.length - 1];\n    if (!maybeContext) {\n      throw new Error('Cannot get context when workflow is not executing...');\n    }\n    return maybeContext;\n  }\n  get engine() {\n    return this._engine;\n  }\n  get engineHost() {\n    return this._engineHost;\n  }\n  get registry() {\n    return this._registry;\n  }\n  get reporter() {\n    return this._reporter.asObservable();\n  }\n  get lifeCycle() {\n    return this._lifeCycle.asObservable();\n  }\n  _createSinks() {\n    let error = false;\n    const dryRunSink = new dryrun_1.DryRunSink(this._host, this._force);\n    const dryRunSubscriber = dryRunSink.reporter.subscribe(event => {\n      this._reporter.next(event);\n      error = error || event.kind == 'error';\n    });\n    // We need two sinks if we want to output what will happen, and actually do the work.\n    return [dryRunSink,\n    // Add a custom sink that clean ourselves and throws an error if an error happened.\n    {\n      commit() {\n        dryRunSubscriber.unsubscribe();\n        if (error) {\n          return (0, rxjs_1.throwError)(new exception_1.UnsuccessfulWorkflowExecution());\n        }\n        return (0, rxjs_1.of)();\n      }\n    },\n    // Only add a HostSink if this is not a dryRun.\n    ...(!this._dryRun ? [new host_1.HostSink(this._host, this._force)] : [])];\n  }\n  execute(options) {\n    const parentContext = this._context[this._context.length - 1];\n    if (!parentContext) {\n      this._lifeCycle.next({\n        kind: 'start'\n      });\n    }\n    /** Create the collection and the schematic. */\n    const collection = this._engine.createCollection(options.collection);\n    // Only allow private schematics if called from the same collection.\n    const allowPrivate = options.allowPrivate || parentContext && parentContext.collection === options.collection;\n    const schematic = collection.createSchematic(options.schematic, allowPrivate);\n    const sinks = this._createSinks();\n    this._lifeCycle.next({\n      kind: 'workflow-start'\n    });\n    const context = {\n      ...options,\n      debug: options.debug || false,\n      logger: options.logger || parentContext && parentContext.logger || new core_1.logging.NullLogger(),\n      parentContext\n    };\n    this._context.push(context);\n    return schematic.call(options.options, (0, rxjs_1.of)(new host_tree_1.HostTree(this._host)), {\n      logger: context.logger\n    }).pipe((0, operators_1.concatMap)(tree => {\n      // Process all sinks.\n      return (0, rxjs_1.concat)((0, rxjs_1.from)(sinks).pipe((0, operators_1.concatMap)(sink => sink.commit(tree)), (0, operators_1.ignoreElements)()), (0, rxjs_1.of)(tree));\n    }), (0, operators_1.concatMap)(() => {\n      if (this._dryRun) {\n        return rxjs_1.EMPTY;\n      }\n      this._lifeCycle.next({\n        kind: 'post-tasks-start'\n      });\n      return this._engine.executePostTasks().pipe((0, operators_1.tap)({\n        complete: () => this._lifeCycle.next({\n          kind: 'post-tasks-end'\n        })\n      }), (0, operators_1.defaultIfEmpty)(), (0, operators_1.last)());\n    }), (0, operators_1.tap)({\n      complete: () => {\n        this._lifeCycle.next({\n          kind: 'workflow-end'\n        });\n        this._context.pop();\n        if (this._context.length == 0) {\n          this._lifeCycle.next({\n            kind: 'end'\n          });\n        }\n      }\n    }));\n  }\n}\nexports.BaseWorkflow = BaseWorkflow;","map":{"version":3,"names":["Object","defineProperty","exports","value","BaseWorkflow","core_1","require","rxjs_1","operators_1","engine_1","exception_1","formats_1","dryrun_1","host_1","host_tree_1","constructor","options","_reporter","Subject","_lifeCycle","_host","host","_engineHost","engineHost","registry","_registry","schema","CoreSchemaRegistry","standardFormats","addPostTransform","transforms","addUndefinedDefaults","_engine","SchematicEngine","_context","_force","force","_dryRun","dryRun","context","maybeContext","length","Error","engine","reporter","asObservable","lifeCycle","_createSinks","error","dryRunSink","DryRunSink","dryRunSubscriber","subscribe","event","next","kind","commit","unsubscribe","throwError","UnsuccessfulWorkflowExecution","of","HostSink","execute","parentContext","collection","createCollection","allowPrivate","schematic","createSchematic","sinks","debug","logger","logging","NullLogger","push","call","HostTree","pipe","concatMap","tree","concat","from","sink","ignoreElements","EMPTY","executePostTasks","tap","complete","defaultIfEmpty","last","pop"],"sources":["/Users/sabyrzhanolzhabay/Web-Dev/Arabakz/ArabaFrontend/node_modules/@angular-devkit/schematics/src/workflow/base.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BaseWorkflow = void 0;\nconst core_1 = require(\"@angular-devkit/core\");\nconst rxjs_1 = require(\"rxjs\");\nconst operators_1 = require(\"rxjs/operators\");\nconst engine_1 = require(\"../engine\");\nconst exception_1 = require(\"../exception/exception\");\nconst formats_1 = require(\"../formats\");\nconst dryrun_1 = require(\"../sink/dryrun\");\nconst host_1 = require(\"../sink/host\");\nconst host_tree_1 = require(\"../tree/host-tree\");\n/**\n * Base class for workflows. Even without abstract methods, this class should not be used without\n * surrounding some initialization for the registry and host. This class only adds life cycle and\n * dryrun/force support. You need to provide any registry and task executors that you need to\n * support.\n * See {@see NodeWorkflow} implementation for how to make a specialized subclass of this.\n * TODO: add default set of CoreSchemaRegistry transforms. Once the job refactor is done, use that\n *       as the support for tasks.\n *\n * @public\n */\nclass BaseWorkflow {\n    constructor(options) {\n        this._reporter = new rxjs_1.Subject();\n        this._lifeCycle = new rxjs_1.Subject();\n        this._host = options.host;\n        this._engineHost = options.engineHost;\n        if (options.registry) {\n            this._registry = options.registry;\n        }\n        else {\n            this._registry = new core_1.schema.CoreSchemaRegistry(formats_1.standardFormats);\n            this._registry.addPostTransform(core_1.schema.transforms.addUndefinedDefaults);\n        }\n        this._engine = new engine_1.SchematicEngine(this._engineHost, this);\n        this._context = [];\n        this._force = options.force || false;\n        this._dryRun = options.dryRun || false;\n    }\n    get context() {\n        const maybeContext = this._context[this._context.length - 1];\n        if (!maybeContext) {\n            throw new Error('Cannot get context when workflow is not executing...');\n        }\n        return maybeContext;\n    }\n    get engine() {\n        return this._engine;\n    }\n    get engineHost() {\n        return this._engineHost;\n    }\n    get registry() {\n        return this._registry;\n    }\n    get reporter() {\n        return this._reporter.asObservable();\n    }\n    get lifeCycle() {\n        return this._lifeCycle.asObservable();\n    }\n    _createSinks() {\n        let error = false;\n        const dryRunSink = new dryrun_1.DryRunSink(this._host, this._force);\n        const dryRunSubscriber = dryRunSink.reporter.subscribe((event) => {\n            this._reporter.next(event);\n            error = error || event.kind == 'error';\n        });\n        // We need two sinks if we want to output what will happen, and actually do the work.\n        return [\n            dryRunSink,\n            // Add a custom sink that clean ourselves and throws an error if an error happened.\n            {\n                commit() {\n                    dryRunSubscriber.unsubscribe();\n                    if (error) {\n                        return (0, rxjs_1.throwError)(new exception_1.UnsuccessfulWorkflowExecution());\n                    }\n                    return (0, rxjs_1.of)();\n                },\n            },\n            // Only add a HostSink if this is not a dryRun.\n            ...(!this._dryRun ? [new host_1.HostSink(this._host, this._force)] : []),\n        ];\n    }\n    execute(options) {\n        const parentContext = this._context[this._context.length - 1];\n        if (!parentContext) {\n            this._lifeCycle.next({ kind: 'start' });\n        }\n        /** Create the collection and the schematic. */\n        const collection = this._engine.createCollection(options.collection);\n        // Only allow private schematics if called from the same collection.\n        const allowPrivate = options.allowPrivate || (parentContext && parentContext.collection === options.collection);\n        const schematic = collection.createSchematic(options.schematic, allowPrivate);\n        const sinks = this._createSinks();\n        this._lifeCycle.next({ kind: 'workflow-start' });\n        const context = {\n            ...options,\n            debug: options.debug || false,\n            logger: options.logger || (parentContext && parentContext.logger) || new core_1.logging.NullLogger(),\n            parentContext,\n        };\n        this._context.push(context);\n        return schematic\n            .call(options.options, (0, rxjs_1.of)(new host_tree_1.HostTree(this._host)), { logger: context.logger })\n            .pipe((0, operators_1.concatMap)((tree) => {\n            // Process all sinks.\n            return (0, rxjs_1.concat)((0, rxjs_1.from)(sinks).pipe((0, operators_1.concatMap)((sink) => sink.commit(tree)), (0, operators_1.ignoreElements)()), (0, rxjs_1.of)(tree));\n        }), (0, operators_1.concatMap)(() => {\n            if (this._dryRun) {\n                return rxjs_1.EMPTY;\n            }\n            this._lifeCycle.next({ kind: 'post-tasks-start' });\n            return this._engine\n                .executePostTasks()\n                .pipe((0, operators_1.tap)({ complete: () => this._lifeCycle.next({ kind: 'post-tasks-end' }) }), (0, operators_1.defaultIfEmpty)(), (0, operators_1.last)());\n        }), (0, operators_1.tap)({\n            complete: () => {\n                this._lifeCycle.next({ kind: 'workflow-end' });\n                this._context.pop();\n                if (this._context.length == 0) {\n                    this._lifeCycle.next({ kind: 'end' });\n                }\n            },\n        }));\n    }\n}\nexports.BaseWorkflow = BaseWorkflow;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}