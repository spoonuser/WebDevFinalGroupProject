{"ast":null,"code":"'use strict';\n\nconst {\n  fromEvent\n} = require('rxjs');\nconst {\n  filter,\n  map,\n  share,\n  takeUntil\n} = require('rxjs/operators');\nfunction normalizeKeypressEvents(value, key) {\n  return {\n    value,\n    key: key || {}\n  };\n}\nmodule.exports = function (rl) {\n  const keypress = fromEvent(rl.input, 'keypress', normalizeKeypressEvents).pipe(takeUntil(fromEvent(rl, 'close')))\n  // Ignore `enter` key. On the readline, we only care about the `line` event.\n  .pipe(filter(({\n    key\n  }) => key.name !== 'enter' && key.name !== 'return'));\n  return {\n    line: fromEvent(rl, 'line'),\n    keypress,\n    normalizedUpKey: keypress.pipe(filter(({\n      key\n    }) => key.name === 'up' || key.name === 'k' || key.name === 'p' && key.ctrl), share()),\n    normalizedDownKey: keypress.pipe(filter(({\n      key\n    }) => key.name === 'down' || key.name === 'j' || key.name === 'n' && key.ctrl), share()),\n    numberKey: keypress.pipe(filter(e => e.value && '123456789'.indexOf(e.value) >= 0), map(e => Number(e.value)), share()),\n    spaceKey: keypress.pipe(filter(({\n      key\n    }) => key && key.name === 'space'), share()),\n    aKey: keypress.pipe(filter(({\n      key\n    }) => key && key.name === 'a'), share()),\n    iKey: keypress.pipe(filter(({\n      key\n    }) => key && key.name === 'i'), share())\n  };\n};","map":{"version":3,"names":["fromEvent","require","filter","map","share","takeUntil","normalizeKeypressEvents","value","key","module","exports","rl","keypress","input","pipe","name","line","normalizedUpKey","ctrl","normalizedDownKey","numberKey","e","indexOf","Number","spaceKey","aKey","iKey"],"sources":["/Users/sabyrzhanolzhabay/Web-Dev/Arabakz/ArabaFrontend/node_modules/inquirer/lib/utils/events.js"],"sourcesContent":["'use strict';\nconst { fromEvent } = require('rxjs');\nconst { filter, map, share, takeUntil } = require('rxjs/operators');\n\nfunction normalizeKeypressEvents(value, key) {\n  return { value, key: key || {} };\n}\n\nmodule.exports = function (rl) {\n  const keypress = fromEvent(rl.input, 'keypress', normalizeKeypressEvents)\n    .pipe(takeUntil(fromEvent(rl, 'close')))\n    // Ignore `enter` key. On the readline, we only care about the `line` event.\n    .pipe(filter(({ key }) => key.name !== 'enter' && key.name !== 'return'));\n\n  return {\n    line: fromEvent(rl, 'line'),\n    keypress,\n\n    normalizedUpKey: keypress.pipe(\n      filter(\n        ({ key }) =>\n          key.name === 'up' || key.name === 'k' || (key.name === 'p' && key.ctrl)\n      ),\n      share()\n    ),\n\n    normalizedDownKey: keypress.pipe(\n      filter(\n        ({ key }) =>\n          key.name === 'down' || key.name === 'j' || (key.name === 'n' && key.ctrl)\n      ),\n      share()\n    ),\n\n    numberKey: keypress.pipe(\n      filter((e) => e.value && '123456789'.indexOf(e.value) >= 0),\n      map((e) => Number(e.value)),\n      share()\n    ),\n\n    spaceKey: keypress.pipe(\n      filter(({ key }) => key && key.name === 'space'),\n      share()\n    ),\n    aKey: keypress.pipe(\n      filter(({ key }) => key && key.name === 'a'),\n      share()\n    ),\n    iKey: keypress.pipe(\n      filter(({ key }) => key && key.name === 'i'),\n      share()\n    ),\n  };\n};\n"],"mappings":"AAAA,YAAY;;AACZ,MAAM;EAAEA;AAAU,CAAC,GAAGC,OAAO,CAAC,MAAM,CAAC;AACrC,MAAM;EAAEC,MAAM;EAAEC,GAAG;EAAEC,KAAK;EAAEC;AAAU,CAAC,GAAGJ,OAAO,CAAC,gBAAgB,CAAC;AAEnE,SAASK,uBAAuB,CAACC,KAAK,EAAEC,GAAG,EAAE;EAC3C,OAAO;IAAED,KAAK;IAAEC,GAAG,EAAEA,GAAG,IAAI,CAAC;EAAE,CAAC;AAClC;AAEAC,MAAM,CAACC,OAAO,GAAG,UAAUC,EAAE,EAAE;EAC7B,MAAMC,QAAQ,GAAGZ,SAAS,CAACW,EAAE,CAACE,KAAK,EAAE,UAAU,EAAEP,uBAAuB,CAAC,CACtEQ,IAAI,CAACT,SAAS,CAACL,SAAS,CAACW,EAAE,EAAE,OAAO,CAAC,CAAC;EACvC;EAAA,CACCG,IAAI,CAACZ,MAAM,CAAC,CAAC;IAAEM;EAAI,CAAC,KAAKA,GAAG,CAACO,IAAI,KAAK,OAAO,IAAIP,GAAG,CAACO,IAAI,KAAK,QAAQ,CAAC,CAAC;EAE3E,OAAO;IACLC,IAAI,EAAEhB,SAAS,CAACW,EAAE,EAAE,MAAM,CAAC;IAC3BC,QAAQ;IAERK,eAAe,EAAEL,QAAQ,CAACE,IAAI,CAC5BZ,MAAM,CACJ,CAAC;MAAEM;IAAI,CAAC,KACNA,GAAG,CAACO,IAAI,KAAK,IAAI,IAAIP,GAAG,CAACO,IAAI,KAAK,GAAG,IAAKP,GAAG,CAACO,IAAI,KAAK,GAAG,IAAIP,GAAG,CAACU,IAAK,CAC1E,EACDd,KAAK,EAAE,CACR;IAEDe,iBAAiB,EAAEP,QAAQ,CAACE,IAAI,CAC9BZ,MAAM,CACJ,CAAC;MAAEM;IAAI,CAAC,KACNA,GAAG,CAACO,IAAI,KAAK,MAAM,IAAIP,GAAG,CAACO,IAAI,KAAK,GAAG,IAAKP,GAAG,CAACO,IAAI,KAAK,GAAG,IAAIP,GAAG,CAACU,IAAK,CAC5E,EACDd,KAAK,EAAE,CACR;IAEDgB,SAAS,EAAER,QAAQ,CAACE,IAAI,CACtBZ,MAAM,CAAEmB,CAAC,IAAKA,CAAC,CAACd,KAAK,IAAI,WAAW,CAACe,OAAO,CAACD,CAAC,CAACd,KAAK,CAAC,IAAI,CAAC,CAAC,EAC3DJ,GAAG,CAAEkB,CAAC,IAAKE,MAAM,CAACF,CAAC,CAACd,KAAK,CAAC,CAAC,EAC3BH,KAAK,EAAE,CACR;IAEDoB,QAAQ,EAAEZ,QAAQ,CAACE,IAAI,CACrBZ,MAAM,CAAC,CAAC;MAAEM;IAAI,CAAC,KAAKA,GAAG,IAAIA,GAAG,CAACO,IAAI,KAAK,OAAO,CAAC,EAChDX,KAAK,EAAE,CACR;IACDqB,IAAI,EAAEb,QAAQ,CAACE,IAAI,CACjBZ,MAAM,CAAC,CAAC;MAAEM;IAAI,CAAC,KAAKA,GAAG,IAAIA,GAAG,CAACO,IAAI,KAAK,GAAG,CAAC,EAC5CX,KAAK,EAAE,CACR;IACDsB,IAAI,EAAEd,QAAQ,CAACE,IAAI,CACjBZ,MAAM,CAAC,CAAC;MAAEM;IAAI,CAAC,KAAKA,GAAG,IAAIA,GAAG,CAACO,IAAI,KAAK,GAAG,CAAC,EAC5CX,KAAK,EAAE;EAEX,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}