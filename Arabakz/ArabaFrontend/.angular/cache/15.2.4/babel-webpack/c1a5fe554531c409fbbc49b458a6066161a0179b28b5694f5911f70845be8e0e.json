{"ast":null,"code":"var _asyncToGenerator = require(\"/Users/sabyrzhanolzhabay/Web-Dev/Arabakz/ArabaFrontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nconst util = require(\"./util\");\nconst binarySearch = require(\"./binary-search\");\nconst ArraySet = require(\"./array-set\").ArraySet;\nconst base64VLQ = require(\"./base64-vlq\"); // eslint-disable-line no-unused-vars\nconst readWasm = require(\"../lib/read-wasm\");\nconst wasm = require(\"./wasm\");\nconst INTERNAL = Symbol(\"smcInternal\");\nclass SourceMapConsumer {\n  constructor(aSourceMap, aSourceMapURL) {\n    // If the constructor was called by super(), just return Promise<this>.\n    // Yes, this is a hack to retain the pre-existing API of the base-class\n    // constructor also being an async factory function.\n    if (aSourceMap == INTERNAL) {\n      return Promise.resolve(this);\n    }\n    return _factory(aSourceMap, aSourceMapURL);\n  }\n  static initialize(opts) {\n    readWasm.initialize(opts[\"lib/mappings.wasm\"]);\n  }\n  static fromSourceMap(aSourceMap, aSourceMapURL) {\n    return _factoryBSM(aSourceMap, aSourceMapURL);\n  }\n\n  /**\n   * Construct a new `SourceMapConsumer` from `rawSourceMap` and `sourceMapUrl`\n   * (see the `SourceMapConsumer` constructor for details. Then, invoke the `async\n   * function f(SourceMapConsumer) -> T` with the newly constructed consumer, wait\n   * for `f` to complete, call `destroy` on the consumer, and return `f`'s return\n   * value.\n   *\n   * You must not use the consumer after `f` completes!\n   *\n   * By using `with`, you do not have to remember to manually call `destroy` on\n   * the consumer, since it will be called automatically once `f` completes.\n   *\n   * ```js\n   * const xSquared = await SourceMapConsumer.with(\n   *   myRawSourceMap,\n   *   null,\n   *   async function (consumer) {\n   *     // Use `consumer` inside here and don't worry about remembering\n   *     // to call `destroy`.\n   *\n   *     const x = await whatever(consumer);\n   *     return x * x;\n   *   }\n   * );\n   *\n   * // You may not use that `consumer` anymore out here; it has\n   * // been destroyed. But you can use `xSquared`.\n   * console.log(xSquared);\n   * ```\n   */\n  static with(rawSourceMap, sourceMapUrl, f) {\n    return _asyncToGenerator(function* () {\n      const consumer = yield new SourceMapConsumer(rawSourceMap, sourceMapUrl);\n      try {\n        return yield f(consumer);\n      } finally {\n        consumer.destroy();\n      }\n    })();\n  }\n\n  /**\n   * Parse the mappings in a string in to a data structure which we can easily\n   * query (the ordered arrays in the `this.__generatedMappings` and\n   * `this.__originalMappings` properties).\n   */\n  _parseMappings(aStr, aSourceRoot) {\n    throw new Error(\"Subclasses must implement _parseMappings\");\n  }\n\n  /**\n   * Iterate over each mapping between an original source/line/column and a\n   * generated line/column in this source map.\n   *\n   * @param Function aCallback\n   *        The function that is called with each mapping.\n   * @param Object aContext\n   *        Optional. If specified, this object will be the value of `this` every\n   *        time that `aCallback` is called.\n   * @param aOrder\n   *        Either `SourceMapConsumer.GENERATED_ORDER` or\n   *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to\n   *        iterate over the mappings sorted by the generated file's line/column\n   *        order or the original's source/line/column order, respectively. Defaults to\n   *        `SourceMapConsumer.GENERATED_ORDER`.\n   */\n  eachMapping(aCallback, aContext, aOrder) {\n    throw new Error(\"Subclasses must implement eachMapping\");\n  }\n\n  /**\n   * Returns all generated line and column information for the original source,\n   * line, and column provided. If no column is provided, returns all mappings\n   * corresponding to a either the line we are searching for or the next\n   * closest line that has any mappings. Otherwise, returns all mappings\n   * corresponding to the given line and either the column we are searching for\n   * or the next closest column that has any offsets.\n   *\n   * The only argument is an object with the following properties:\n   *\n   *   - source: The filename of the original source.\n   *   - line: The line number in the original source.  The line number is 1-based.\n   *   - column: Optional. the column number in the original source.\n   *    The column number is 0-based.\n   *\n   * and an array of objects is returned, each with the following properties:\n   *\n   *   - line: The line number in the generated source, or null.  The\n   *    line number is 1-based.\n   *   - column: The column number in the generated source, or null.\n   *    The column number is 0-based.\n   */\n  allGeneratedPositionsFor(aArgs) {\n    throw new Error(\"Subclasses must implement allGeneratedPositionsFor\");\n  }\n  destroy() {\n    throw new Error(\"Subclasses must implement destroy\");\n  }\n}\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nSourceMapConsumer.prototype._version = 3;\nSourceMapConsumer.GENERATED_ORDER = 1;\nSourceMapConsumer.ORIGINAL_ORDER = 2;\nSourceMapConsumer.GREATEST_LOWER_BOUND = 1;\nSourceMapConsumer.LEAST_UPPER_BOUND = 2;\nexports.SourceMapConsumer = SourceMapConsumer;\n\n/**\n * A BasicSourceMapConsumer instance represents a parsed source map which we can\n * query for information about the original file positions by giving it a file\n * position in the generated source.\n *\n * The first parameter is the raw source map (either as a JSON string, or\n * already parsed to an object). According to the spec, source maps have the\n * following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - sources: An array of URLs to the original source files.\n *   - names: An array of identifiers which can be referenced by individual mappings.\n *   - sourceRoot: Optional. The URL root from which all sources are relative.\n *   - sourcesContent: Optional. An array of contents of the original source files.\n *   - mappings: A string of base64 VLQs which contain the actual mappings.\n *   - file: Optional. The generated file this source map is associated with.\n *\n * Here is an example source map, taken from the source map spec[0]:\n *\n *     {\n *       version : 3,\n *       file: \"out.js\",\n *       sourceRoot : \"\",\n *       sources: [\"foo.js\", \"bar.js\"],\n *       names: [\"src\", \"maps\", \"are\", \"fun\"],\n *       mappings: \"AA,AB;;ABCDE;\"\n *     }\n *\n * The second parameter, if given, is a string whose value is the URL\n * at which the source map was found.  This URL is used to compute the\n * sources array.\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#\n */\nclass BasicSourceMapConsumer extends SourceMapConsumer {\n  constructor(aSourceMap, aSourceMapURL) {\n    return super(INTERNAL).then(that => {\n      let sourceMap = aSourceMap;\n      if (typeof aSourceMap === \"string\") {\n        sourceMap = util.parseSourceMapInput(aSourceMap);\n      }\n      const version = util.getArg(sourceMap, \"version\");\n      let sources = util.getArg(sourceMap, \"sources\");\n      // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which\n      // requires the array) to play nice here.\n      const names = util.getArg(sourceMap, \"names\", []);\n      let sourceRoot = util.getArg(sourceMap, \"sourceRoot\", null);\n      const sourcesContent = util.getArg(sourceMap, \"sourcesContent\", null);\n      const mappings = util.getArg(sourceMap, \"mappings\");\n      const file = util.getArg(sourceMap, \"file\", null);\n\n      // Once again, Sass deviates from the spec and supplies the version as a\n      // string rather than a number, so we use loose equality checking here.\n      if (version != that._version) {\n        throw new Error(\"Unsupported version: \" + version);\n      }\n      if (sourceRoot) {\n        sourceRoot = util.normalize(sourceRoot);\n      }\n      sources = sources.map(String)\n      // Some source maps produce relative source paths like \"./foo.js\" instead of\n      // \"foo.js\".  Normalize these first so that future comparisons will succeed.\n      // See bugzil.la/1090768.\n      .map(util.normalize)\n      // Always ensure that absolute sources are internally stored relative to\n      // the source root, if the source root is absolute. Not doing this would\n      // be particularly problematic when the source root is a prefix of the\n      // source (valid, but why??). See github issue #199 and bugzil.la/1188982.\n      .map(function (source) {\n        return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source) ? util.relative(sourceRoot, source) : source;\n      });\n\n      // Pass `true` below to allow duplicate names and sources. While source maps\n      // are intended to be compressed and deduplicated, the TypeScript compiler\n      // sometimes generates source maps with duplicates in them. See Github issue\n      // #72 and bugzil.la/889492.\n      that._names = ArraySet.fromArray(names.map(String), true);\n      that._sources = ArraySet.fromArray(sources, true);\n      that._absoluteSources = that._sources.toArray().map(function (s) {\n        return util.computeSourceURL(sourceRoot, s, aSourceMapURL);\n      });\n      that.sourceRoot = sourceRoot;\n      that.sourcesContent = sourcesContent;\n      that._mappings = mappings;\n      that._sourceMapURL = aSourceMapURL;\n      that.file = file;\n      that._computedColumnSpans = false;\n      that._mappingsPtr = 0;\n      that._wasm = null;\n      return wasm().then(w => {\n        that._wasm = w;\n        return that;\n      });\n    });\n  }\n\n  /**\n   * Utility function to find the index of a source.  Returns -1 if not\n   * found.\n   */\n  _findSourceIndex(aSource) {\n    let relativeSource = aSource;\n    if (this.sourceRoot != null) {\n      relativeSource = util.relative(this.sourceRoot, relativeSource);\n    }\n    if (this._sources.has(relativeSource)) {\n      return this._sources.indexOf(relativeSource);\n    }\n\n    // Maybe aSource is an absolute URL as returned by |sources|.  In\n    // this case we can't simply undo the transform.\n    for (let i = 0; i < this._absoluteSources.length; ++i) {\n      if (this._absoluteSources[i] == aSource) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Create a BasicSourceMapConsumer from a SourceMapGenerator.\n   *\n   * @param SourceMapGenerator aSourceMap\n   *        The source map that will be consumed.\n   * @param String aSourceMapURL\n   *        The URL at which the source map can be found (optional)\n   * @returns BasicSourceMapConsumer\n   */\n  static fromSourceMap(aSourceMap, aSourceMapURL) {\n    return new BasicSourceMapConsumer(aSourceMap.toString());\n  }\n  get sources() {\n    return this._absoluteSources.slice();\n  }\n  _getMappingsPtr() {\n    if (this._mappingsPtr === 0) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n    return this._mappingsPtr;\n  }\n\n  /**\n   * Parse the mappings in a string in to a data structure which we can easily\n   * query (the ordered arrays in the `this.__generatedMappings` and\n   * `this.__originalMappings` properties).\n   */\n  _parseMappings(aStr, aSourceRoot) {\n    const size = aStr.length;\n    const mappingsBufPtr = this._wasm.exports.allocate_mappings(size);\n    const mappingsBuf = new Uint8Array(this._wasm.exports.memory.buffer, mappingsBufPtr, size);\n    for (let i = 0; i < size; i++) {\n      mappingsBuf[i] = aStr.charCodeAt(i);\n    }\n    const mappingsPtr = this._wasm.exports.parse_mappings(mappingsBufPtr);\n    if (!mappingsPtr) {\n      const error = this._wasm.exports.get_last_error();\n      let msg = `Error parsing mappings (code ${error}): `;\n\n      // XXX: keep these error codes in sync with `fitzgen/source-map-mappings`.\n      switch (error) {\n        case 1:\n          msg += \"the mappings contained a negative line, column, source index, or name index\";\n          break;\n        case 2:\n          msg += \"the mappings contained a number larger than 2**32\";\n          break;\n        case 3:\n          msg += \"reached EOF while in the middle of parsing a VLQ\";\n          break;\n        case 4:\n          msg += \"invalid base 64 character while parsing a VLQ\";\n          break;\n        default:\n          msg += \"unknown error code\";\n          break;\n      }\n      throw new Error(msg);\n    }\n    this._mappingsPtr = mappingsPtr;\n  }\n  eachMapping(aCallback, aContext, aOrder) {\n    const context = aContext || null;\n    const order = aOrder || SourceMapConsumer.GENERATED_ORDER;\n    const sourceRoot = this.sourceRoot;\n    this._wasm.withMappingCallback(mapping => {\n      if (mapping.source !== null) {\n        mapping.source = this._sources.at(mapping.source);\n        mapping.source = util.computeSourceURL(sourceRoot, mapping.source, this._sourceMapURL);\n        if (mapping.name !== null) {\n          mapping.name = this._names.at(mapping.name);\n        }\n      }\n      aCallback.call(context, mapping);\n    }, () => {\n      switch (order) {\n        case SourceMapConsumer.GENERATED_ORDER:\n          this._wasm.exports.by_generated_location(this._getMappingsPtr());\n          break;\n        case SourceMapConsumer.ORIGINAL_ORDER:\n          this._wasm.exports.by_original_location(this._getMappingsPtr());\n          break;\n        default:\n          throw new Error(\"Unknown order of iteration.\");\n      }\n    });\n  }\n  allGeneratedPositionsFor(aArgs) {\n    let source = util.getArg(aArgs, \"source\");\n    const originalLine = util.getArg(aArgs, \"line\");\n    const originalColumn = aArgs.column || 0;\n    source = this._findSourceIndex(source);\n    if (source < 0) {\n      return [];\n    }\n    if (originalLine < 1) {\n      throw new Error(\"Line numbers must be >= 1\");\n    }\n    if (originalColumn < 0) {\n      throw new Error(\"Column numbers must be >= 0\");\n    }\n    const mappings = [];\n    this._wasm.withMappingCallback(m => {\n      let lastColumn = m.lastGeneratedColumn;\n      if (this._computedColumnSpans && lastColumn === null) {\n        lastColumn = Infinity;\n      }\n      mappings.push({\n        line: m.generatedLine,\n        column: m.generatedColumn,\n        lastColumn\n      });\n    }, () => {\n      this._wasm.exports.all_generated_locations_for(this._getMappingsPtr(), source, originalLine - 1, \"column\" in aArgs, originalColumn);\n    });\n    return mappings;\n  }\n  destroy() {\n    if (this._mappingsPtr !== 0) {\n      this._wasm.exports.free_mappings(this._mappingsPtr);\n      this._mappingsPtr = 0;\n    }\n  }\n\n  /**\n   * Compute the last column for each generated mapping. The last column is\n   * inclusive.\n   */\n  computeColumnSpans() {\n    if (this._computedColumnSpans) {\n      return;\n    }\n    this._wasm.exports.compute_column_spans(this._getMappingsPtr());\n    this._computedColumnSpans = true;\n  }\n\n  /**\n   * Returns the original source, line, and column information for the generated\n   * source's line and column positions provided. The only argument is an object\n   * with the following properties:\n   *\n   *   - line: The line number in the generated source.  The line number\n   *     is 1-based.\n   *   - column: The column number in the generated source.  The column\n   *     number is 0-based.\n   *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n   *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n   *     closest element that is smaller than or greater than the one we are\n   *     searching for, respectively, if the exact element cannot be found.\n   *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n   *\n   * and an object is returned with the following properties:\n   *\n   *   - source: The original source file, or null.\n   *   - line: The line number in the original source, or null.  The\n   *     line number is 1-based.\n   *   - column: The column number in the original source, or null.  The\n   *     column number is 0-based.\n   *   - name: The original identifier, or null.\n   */\n  originalPositionFor(aArgs) {\n    const needle = {\n      generatedLine: util.getArg(aArgs, \"line\"),\n      generatedColumn: util.getArg(aArgs, \"column\")\n    };\n    if (needle.generatedLine < 1) {\n      throw new Error(\"Line numbers must be >= 1\");\n    }\n    if (needle.generatedColumn < 0) {\n      throw new Error(\"Column numbers must be >= 0\");\n    }\n    let bias = util.getArg(aArgs, \"bias\", SourceMapConsumer.GREATEST_LOWER_BOUND);\n    if (bias == null) {\n      bias = SourceMapConsumer.GREATEST_LOWER_BOUND;\n    }\n    let mapping;\n    this._wasm.withMappingCallback(m => mapping = m, () => {\n      this._wasm.exports.original_location_for(this._getMappingsPtr(), needle.generatedLine - 1, needle.generatedColumn, bias);\n    });\n    if (mapping) {\n      if (mapping.generatedLine === needle.generatedLine) {\n        let source = util.getArg(mapping, \"source\", null);\n        if (source !== null) {\n          source = this._sources.at(source);\n          source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);\n        }\n        let name = util.getArg(mapping, \"name\", null);\n        if (name !== null) {\n          name = this._names.at(name);\n        }\n        return {\n          source,\n          line: util.getArg(mapping, \"originalLine\", null),\n          column: util.getArg(mapping, \"originalColumn\", null),\n          name\n        };\n      }\n    }\n    return {\n      source: null,\n      line: null,\n      column: null,\n      name: null\n    };\n  }\n\n  /**\n   * Return true if we have the source content for every source in the source\n   * map, false otherwise.\n   */\n  hasContentsOfAllSources() {\n    if (!this.sourcesContent) {\n      return false;\n    }\n    return this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function (sc) {\n      return sc == null;\n    });\n  }\n\n  /**\n   * Returns the original source content. The only argument is the url of the\n   * original source file. Returns null if no original source content is\n   * available.\n   */\n  sourceContentFor(aSource, nullOnMissing) {\n    if (!this.sourcesContent) {\n      return null;\n    }\n    const index = this._findSourceIndex(aSource);\n    if (index >= 0) {\n      return this.sourcesContent[index];\n    }\n    let relativeSource = aSource;\n    if (this.sourceRoot != null) {\n      relativeSource = util.relative(this.sourceRoot, relativeSource);\n    }\n    let url;\n    if (this.sourceRoot != null && (url = util.urlParse(this.sourceRoot))) {\n      // XXX: file:// URIs and absolute paths lead to unexpected behavior for\n      // many users. We can help them out when they expect file:// URIs to\n      // behave like it would if they were running a local HTTP server. See\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.\n      const fileUriAbsPath = relativeSource.replace(/^file:\\/\\//, \"\");\n      if (url.scheme == \"file\" && this._sources.has(fileUriAbsPath)) {\n        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];\n      }\n      if ((!url.path || url.path == \"/\") && this._sources.has(\"/\" + relativeSource)) {\n        return this.sourcesContent[this._sources.indexOf(\"/\" + relativeSource)];\n      }\n    }\n\n    // This function is used recursively from\n    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we\n    // don't want to throw if we can't find the source - we just want to\n    // return null, so we provide a flag to exit gracefully.\n    if (nullOnMissing) {\n      return null;\n    }\n    throw new Error('\"' + relativeSource + '\" is not in the SourceMap.');\n  }\n\n  /**\n   * Returns the generated line and column information for the original source,\n   * line, and column positions provided. The only argument is an object with\n   * the following properties:\n   *\n   *   - source: The filename of the original source.\n   *   - line: The line number in the original source.  The line number\n   *     is 1-based.\n   *   - column: The column number in the original source.  The column\n   *     number is 0-based.\n   *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n   *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n   *     closest element that is smaller than or greater than the one we are\n   *     searching for, respectively, if the exact element cannot be found.\n   *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n   *\n   * and an object is returned with the following properties:\n   *\n   *   - line: The line number in the generated source, or null.  The\n   *     line number is 1-based.\n   *   - column: The column number in the generated source, or null.\n   *     The column number is 0-based.\n   */\n  generatedPositionFor(aArgs) {\n    let source = util.getArg(aArgs, \"source\");\n    source = this._findSourceIndex(source);\n    if (source < 0) {\n      return {\n        line: null,\n        column: null,\n        lastColumn: null\n      };\n    }\n    const needle = {\n      source,\n      originalLine: util.getArg(aArgs, \"line\"),\n      originalColumn: util.getArg(aArgs, \"column\")\n    };\n    if (needle.originalLine < 1) {\n      throw new Error(\"Line numbers must be >= 1\");\n    }\n    if (needle.originalColumn < 0) {\n      throw new Error(\"Column numbers must be >= 0\");\n    }\n    let bias = util.getArg(aArgs, \"bias\", SourceMapConsumer.GREATEST_LOWER_BOUND);\n    if (bias == null) {\n      bias = SourceMapConsumer.GREATEST_LOWER_BOUND;\n    }\n    let mapping;\n    this._wasm.withMappingCallback(m => mapping = m, () => {\n      this._wasm.exports.generated_location_for(this._getMappingsPtr(), needle.source, needle.originalLine - 1, needle.originalColumn, bias);\n    });\n    if (mapping) {\n      if (mapping.source === needle.source) {\n        let lastColumn = mapping.lastGeneratedColumn;\n        if (this._computedColumnSpans && lastColumn === null) {\n          lastColumn = Infinity;\n        }\n        return {\n          line: util.getArg(mapping, \"generatedLine\", null),\n          column: util.getArg(mapping, \"generatedColumn\", null),\n          lastColumn\n        };\n      }\n    }\n    return {\n      line: null,\n      column: null,\n      lastColumn: null\n    };\n  }\n}\nBasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;\nexports.BasicSourceMapConsumer = BasicSourceMapConsumer;\n\n/**\n * An IndexedSourceMapConsumer instance represents a parsed source map which\n * we can query for information. It differs from BasicSourceMapConsumer in\n * that it takes \"indexed\" source maps (i.e. ones with a \"sections\" field) as\n * input.\n *\n * The first parameter is a raw source map (either as a JSON string, or already\n * parsed to an object). According to the spec for indexed source maps, they\n * have the following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - file: Optional. The generated file this source map is associated with.\n *   - sections: A list of section definitions.\n *\n * Each value under the \"sections\" field has two fields:\n *   - offset: The offset into the original specified at which this section\n *       begins to apply, defined as an object with a \"line\" and \"column\"\n *       field.\n *   - map: A source map definition. This source map could also be indexed,\n *       but doesn't have to be.\n *\n * Instead of the \"map\" field, it's also possible to have a \"url\" field\n * specifying a URL to retrieve a source map from, but that's currently\n * unsupported.\n *\n * Here's an example source map, taken from the source map spec[0], but\n * modified to omit a section which uses the \"url\" field.\n *\n *  {\n *    version : 3,\n *    file: \"app.js\",\n *    sections: [{\n *      offset: {line:100, column:10},\n *      map: {\n *        version : 3,\n *        file: \"section.js\",\n *        sources: [\"foo.js\", \"bar.js\"],\n *        names: [\"src\", \"maps\", \"are\", \"fun\"],\n *        mappings: \"AAAA,E;;ABCDE;\"\n *      }\n *    }],\n *  }\n *\n * The second parameter, if given, is a string whose value is the URL\n * at which the source map was found.  This URL is used to compute the\n * sources array.\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt\n */\nclass IndexedSourceMapConsumer extends SourceMapConsumer {\n  constructor(aSourceMap, aSourceMapURL) {\n    return super(INTERNAL).then(that => {\n      let sourceMap = aSourceMap;\n      if (typeof aSourceMap === \"string\") {\n        sourceMap = util.parseSourceMapInput(aSourceMap);\n      }\n      const version = util.getArg(sourceMap, \"version\");\n      const sections = util.getArg(sourceMap, \"sections\");\n      if (version != that._version) {\n        throw new Error(\"Unsupported version: \" + version);\n      }\n      that._sources = new ArraySet();\n      that._names = new ArraySet();\n      that.__generatedMappings = null;\n      that.__originalMappings = null;\n      that.__generatedMappingsUnsorted = null;\n      that.__originalMappingsUnsorted = null;\n      let lastOffset = {\n        line: -1,\n        column: 0\n      };\n      return Promise.all(sections.map(s => {\n        if (s.url) {\n          // The url field will require support for asynchronicity.\n          // See https://github.com/mozilla/source-map/issues/16\n          throw new Error(\"Support for url field in sections not implemented.\");\n        }\n        const offset = util.getArg(s, \"offset\");\n        const offsetLine = util.getArg(offset, \"line\");\n        const offsetColumn = util.getArg(offset, \"column\");\n        if (offsetLine < lastOffset.line || offsetLine === lastOffset.line && offsetColumn < lastOffset.column) {\n          throw new Error(\"Section offsets must be ordered and non-overlapping.\");\n        }\n        lastOffset = offset;\n        const cons = new SourceMapConsumer(util.getArg(s, \"map\"), aSourceMapURL);\n        return cons.then(consumer => {\n          return {\n            generatedOffset: {\n              // The offset fields are 0-based, but we use 1-based indices when\n              // encoding/decoding from VLQ.\n              generatedLine: offsetLine + 1,\n              generatedColumn: offsetColumn + 1\n            },\n            consumer\n          };\n        });\n      })).then(s => {\n        that._sections = s;\n        return that;\n      });\n    });\n  }\n\n  // `__generatedMappings` and `__originalMappings` are arrays that hold the\n  // parsed mapping coordinates from the source map's \"mappings\" attribute. They\n  // are lazily instantiated, accessed via the `_generatedMappings` and\n  // `_originalMappings` getters respectively, and we only parse the mappings\n  // and create these arrays once queried for a source location. We jump through\n  // these hoops because there can be many thousands of mappings, and parsing\n  // them is expensive, so we only want to do it if we must.\n  //\n  // Each object in the arrays is of the form:\n  //\n  //     {\n  //       generatedLine: The line number in the generated code,\n  //       generatedColumn: The column number in the generated code,\n  //       source: The path to the original source file that generated this\n  //               chunk of code,\n  //       originalLine: The line number in the original source that\n  //                     corresponds to this chunk of generated code,\n  //       originalColumn: The column number in the original source that\n  //                       corresponds to this chunk of generated code,\n  //       name: The name of the original symbol which generated this chunk of\n  //             code.\n  //     }\n  //\n  // All properties except for `generatedLine` and `generatedColumn` can be\n  // `null`.\n  //\n  // `_generatedMappings` is ordered by the generated positions.\n  //\n  // `_originalMappings` is ordered by the original positions.\n  get _generatedMappings() {\n    if (!this.__generatedMappings) {\n      this._sortGeneratedMappings();\n    }\n    return this.__generatedMappings;\n  }\n  get _originalMappings() {\n    if (!this.__originalMappings) {\n      this._sortOriginalMappings();\n    }\n    return this.__originalMappings;\n  }\n  get _generatedMappingsUnsorted() {\n    if (!this.__generatedMappingsUnsorted) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n    return this.__generatedMappingsUnsorted;\n  }\n  get _originalMappingsUnsorted() {\n    if (!this.__originalMappingsUnsorted) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n    return this.__originalMappingsUnsorted;\n  }\n  _sortGeneratedMappings() {\n    const mappings = this._generatedMappingsUnsorted;\n    mappings.sort(util.compareByGeneratedPositionsDeflated);\n    this.__generatedMappings = mappings;\n  }\n  _sortOriginalMappings() {\n    const mappings = this._originalMappingsUnsorted;\n    mappings.sort(util.compareByOriginalPositions);\n    this.__originalMappings = mappings;\n  }\n\n  /**\n   * The list of original sources.\n   */\n  get sources() {\n    const sources = [];\n    for (let i = 0; i < this._sections.length; i++) {\n      for (let j = 0; j < this._sections[i].consumer.sources.length; j++) {\n        sources.push(this._sections[i].consumer.sources[j]);\n      }\n    }\n    return sources;\n  }\n\n  /**\n   * Returns the original source, line, and column information for the generated\n   * source's line and column positions provided. The only argument is an object\n   * with the following properties:\n   *\n   *   - line: The line number in the generated source.  The line number\n   *     is 1-based.\n   *   - column: The column number in the generated source.  The column\n   *     number is 0-based.\n   *\n   * and an object is returned with the following properties:\n   *\n   *   - source: The original source file, or null.\n   *   - line: The line number in the original source, or null.  The\n   *     line number is 1-based.\n   *   - column: The column number in the original source, or null.  The\n   *     column number is 0-based.\n   *   - name: The original identifier, or null.\n   */\n  originalPositionFor(aArgs) {\n    const needle = {\n      generatedLine: util.getArg(aArgs, \"line\"),\n      generatedColumn: util.getArg(aArgs, \"column\")\n    };\n\n    // Find the section containing the generated position we're trying to map\n    // to an original position.\n    const sectionIndex = binarySearch.search(needle, this._sections, function (aNeedle, section) {\n      const cmp = aNeedle.generatedLine - section.generatedOffset.generatedLine;\n      if (cmp) {\n        return cmp;\n      }\n      return aNeedle.generatedColumn - section.generatedOffset.generatedColumn;\n    });\n    const section = this._sections[sectionIndex];\n    if (!section) {\n      return {\n        source: null,\n        line: null,\n        column: null,\n        name: null\n      };\n    }\n    return section.consumer.originalPositionFor({\n      line: needle.generatedLine - (section.generatedOffset.generatedLine - 1),\n      column: needle.generatedColumn - (section.generatedOffset.generatedLine === needle.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),\n      bias: aArgs.bias\n    });\n  }\n\n  /**\n   * Return true if we have the source content for every source in the source\n   * map, false otherwise.\n   */\n  hasContentsOfAllSources() {\n    return this._sections.every(function (s) {\n      return s.consumer.hasContentsOfAllSources();\n    });\n  }\n\n  /**\n   * Returns the original source content. The only argument is the url of the\n   * original source file. Returns null if no original source content is\n   * available.\n   */\n  sourceContentFor(aSource, nullOnMissing) {\n    for (let i = 0; i < this._sections.length; i++) {\n      const section = this._sections[i];\n      const content = section.consumer.sourceContentFor(aSource, true);\n      if (content) {\n        return content;\n      }\n    }\n    if (nullOnMissing) {\n      return null;\n    }\n    throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n  }\n\n  /**\n   * Returns the generated line and column information for the original source,\n   * line, and column positions provided. The only argument is an object with\n   * the following properties:\n   *\n   *   - source: The filename of the original source.\n   *   - line: The line number in the original source.  The line number\n   *     is 1-based.\n   *   - column: The column number in the original source.  The column\n   *     number is 0-based.\n   *\n   * and an object is returned with the following properties:\n   *\n   *   - line: The line number in the generated source, or null.  The\n   *     line number is 1-based.\n   *   - column: The column number in the generated source, or null.\n   *     The column number is 0-based.\n   */\n  generatedPositionFor(aArgs) {\n    for (let i = 0; i < this._sections.length; i++) {\n      const section = this._sections[i];\n\n      // Only consider this section if the requested source is in the list of\n      // sources of the consumer.\n      if (section.consumer._findSourceIndex(util.getArg(aArgs, \"source\")) === -1) {\n        continue;\n      }\n      const generatedPosition = section.consumer.generatedPositionFor(aArgs);\n      if (generatedPosition) {\n        const ret = {\n          line: generatedPosition.line + (section.generatedOffset.generatedLine - 1),\n          column: generatedPosition.column + (section.generatedOffset.generatedLine === generatedPosition.line ? section.generatedOffset.generatedColumn - 1 : 0)\n        };\n        return ret;\n      }\n    }\n    return {\n      line: null,\n      column: null\n    };\n  }\n\n  /**\n   * Parse the mappings in a string in to a data structure which we can easily\n   * query (the ordered arrays in the `this.__generatedMappings` and\n   * `this.__originalMappings` properties).\n   */\n  _parseMappings(aStr, aSourceRoot) {\n    const generatedMappings = this.__generatedMappingsUnsorted = [];\n    const originalMappings = this.__originalMappingsUnsorted = [];\n    for (let i = 0; i < this._sections.length; i++) {\n      const section = this._sections[i];\n      const sectionMappings = [];\n      section.consumer.eachMapping(m => sectionMappings.push(m));\n      for (let j = 0; j < sectionMappings.length; j++) {\n        const mapping = sectionMappings[j];\n\n        // TODO: test if null is correct here.  The original code used\n        // `source`, which would actually have gotten used as null because\n        // var's get hoisted.\n        // See: https://github.com/mozilla/source-map/issues/333\n        let source = util.computeSourceURL(section.consumer.sourceRoot, null, this._sourceMapURL);\n        this._sources.add(source);\n        source = this._sources.indexOf(source);\n        let name = null;\n        if (mapping.name) {\n          this._names.add(mapping.name);\n          name = this._names.indexOf(mapping.name);\n        }\n\n        // The mappings coming from the consumer for the section have\n        // generated positions relative to the start of the section, so we\n        // need to offset them to be relative to the start of the concatenated\n        // generated file.\n        const adjustedMapping = {\n          source,\n          generatedLine: mapping.generatedLine + (section.generatedOffset.generatedLine - 1),\n          generatedColumn: mapping.generatedColumn + (section.generatedOffset.generatedLine === mapping.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),\n          originalLine: mapping.originalLine,\n          originalColumn: mapping.originalColumn,\n          name\n        };\n        generatedMappings.push(adjustedMapping);\n        if (typeof adjustedMapping.originalLine === \"number\") {\n          originalMappings.push(adjustedMapping);\n        }\n      }\n    }\n  }\n  eachMapping(aCallback, aContext, aOrder) {\n    const context = aContext || null;\n    const order = aOrder || SourceMapConsumer.GENERATED_ORDER;\n    let mappings;\n    switch (order) {\n      case SourceMapConsumer.GENERATED_ORDER:\n        mappings = this._generatedMappings;\n        break;\n      case SourceMapConsumer.ORIGINAL_ORDER:\n        mappings = this._originalMappings;\n        break;\n      default:\n        throw new Error(\"Unknown order of iteration.\");\n    }\n    const sourceRoot = this.sourceRoot;\n    mappings.map(function (mapping) {\n      let source = null;\n      if (mapping.source !== null) {\n        source = this._sources.at(mapping.source);\n        source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL);\n      }\n      return {\n        source,\n        generatedLine: mapping.generatedLine,\n        generatedColumn: mapping.generatedColumn,\n        originalLine: mapping.originalLine,\n        originalColumn: mapping.originalColumn,\n        name: mapping.name === null ? null : this._names.at(mapping.name)\n      };\n    }, this).forEach(aCallback, context);\n  }\n\n  /**\n   * Find the mapping that best matches the hypothetical \"needle\" mapping that\n   * we are searching for in the given \"haystack\" of mappings.\n   */\n  _findMapping(aNeedle, aMappings, aLineName, aColumnName, aComparator, aBias) {\n    // To return the position we are searching for, we must first find the\n    // mapping for the given position and then return the opposite position it\n    // points to. Because the mappings are sorted, we can use binary search to\n    // find the best mapping.\n\n    if (aNeedle[aLineName] <= 0) {\n      throw new TypeError(\"Line must be greater than or equal to 1, got \" + aNeedle[aLineName]);\n    }\n    if (aNeedle[aColumnName] < 0) {\n      throw new TypeError(\"Column must be greater than or equal to 0, got \" + aNeedle[aColumnName]);\n    }\n    return binarySearch.search(aNeedle, aMappings, aComparator, aBias);\n  }\n  allGeneratedPositionsFor(aArgs) {\n    const line = util.getArg(aArgs, \"line\");\n\n    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping\n    // returns the index of the closest mapping less than the needle. By\n    // setting needle.originalColumn to 0, we thus find the last mapping for\n    // the given line, provided such a mapping exists.\n    const needle = {\n      source: util.getArg(aArgs, \"source\"),\n      originalLine: line,\n      originalColumn: util.getArg(aArgs, \"column\", 0)\n    };\n    needle.source = this._findSourceIndex(needle.source);\n    if (needle.source < 0) {\n      return [];\n    }\n    if (needle.originalLine < 1) {\n      throw new Error(\"Line numbers must be >= 1\");\n    }\n    if (needle.originalColumn < 0) {\n      throw new Error(\"Column numbers must be >= 0\");\n    }\n    const mappings = [];\n    let index = this._findMapping(needle, this._originalMappings, \"originalLine\", \"originalColumn\", util.compareByOriginalPositions, binarySearch.LEAST_UPPER_BOUND);\n    if (index >= 0) {\n      let mapping = this._originalMappings[index];\n      if (aArgs.column === undefined) {\n        const originalLine = mapping.originalLine;\n\n        // Iterate until either we run out of mappings, or we run into\n        // a mapping for a different line than the one we found. Since\n        // mappings are sorted, this is guaranteed to find all mappings for\n        // the line we found.\n        while (mapping && mapping.originalLine === originalLine) {\n          let lastColumn = mapping.lastGeneratedColumn;\n          if (this._computedColumnSpans && lastColumn === null) {\n            lastColumn = Infinity;\n          }\n          mappings.push({\n            line: util.getArg(mapping, \"generatedLine\", null),\n            column: util.getArg(mapping, \"generatedColumn\", null),\n            lastColumn\n          });\n          mapping = this._originalMappings[++index];\n        }\n      } else {\n        const originalColumn = mapping.originalColumn;\n\n        // Iterate until either we run out of mappings, or we run into\n        // a mapping for a different line than the one we were searching for.\n        // Since mappings are sorted, this is guaranteed to find all mappings for\n        // the line we are searching for.\n        while (mapping && mapping.originalLine === line && mapping.originalColumn == originalColumn) {\n          let lastColumn = mapping.lastGeneratedColumn;\n          if (this._computedColumnSpans && lastColumn === null) {\n            lastColumn = Infinity;\n          }\n          mappings.push({\n            line: util.getArg(mapping, \"generatedLine\", null),\n            column: util.getArg(mapping, \"generatedColumn\", null),\n            lastColumn\n          });\n          mapping = this._originalMappings[++index];\n        }\n      }\n    }\n    return mappings;\n  }\n  destroy() {\n    for (let i = 0; i < this._sections.length; i++) {\n      this._sections[i].consumer.destroy();\n    }\n  }\n}\nexports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;\n\n/*\n * Cheat to get around inter-twingled classes.  `factory()` can be at the end\n * where it has access to non-hoisted classes, but it gets hoisted itself.\n */\nfunction _factory(aSourceMap, aSourceMapURL) {\n  let sourceMap = aSourceMap;\n  if (typeof aSourceMap === \"string\") {\n    sourceMap = util.parseSourceMapInput(aSourceMap);\n  }\n  const consumer = sourceMap.sections != null ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL) : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);\n  return Promise.resolve(consumer);\n}\nfunction _factoryBSM(aSourceMap, aSourceMapURL) {\n  return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);\n}","map":{"version":3,"names":["util","require","binarySearch","ArraySet","base64VLQ","readWasm","wasm","INTERNAL","Symbol","SourceMapConsumer","constructor","aSourceMap","aSourceMapURL","Promise","resolve","_factory","initialize","opts","fromSourceMap","_factoryBSM","with","rawSourceMap","sourceMapUrl","f","consumer","destroy","_parseMappings","aStr","aSourceRoot","Error","eachMapping","aCallback","aContext","aOrder","allGeneratedPositionsFor","aArgs","prototype","_version","GENERATED_ORDER","ORIGINAL_ORDER","GREATEST_LOWER_BOUND","LEAST_UPPER_BOUND","exports","BasicSourceMapConsumer","then","that","sourceMap","parseSourceMapInput","version","getArg","sources","names","sourceRoot","sourcesContent","mappings","file","normalize","map","String","source","isAbsolute","relative","_names","fromArray","_sources","_absoluteSources","toArray","s","computeSourceURL","_mappings","_sourceMapURL","_computedColumnSpans","_mappingsPtr","_wasm","w","_findSourceIndex","aSource","relativeSource","has","indexOf","i","length","toString","slice","_getMappingsPtr","size","mappingsBufPtr","allocate_mappings","mappingsBuf","Uint8Array","memory","buffer","charCodeAt","mappingsPtr","parse_mappings","error","get_last_error","msg","context","order","withMappingCallback","mapping","at","name","call","by_generated_location","by_original_location","originalLine","originalColumn","column","m","lastColumn","lastGeneratedColumn","Infinity","push","line","generatedLine","generatedColumn","all_generated_locations_for","free_mappings","computeColumnSpans","compute_column_spans","originalPositionFor","needle","bias","original_location_for","hasContentsOfAllSources","some","sc","sourceContentFor","nullOnMissing","index","url","urlParse","fileUriAbsPath","replace","scheme","path","generatedPositionFor","generated_location_for","IndexedSourceMapConsumer","sections","__generatedMappings","__originalMappings","__generatedMappingsUnsorted","__originalMappingsUnsorted","lastOffset","all","offset","offsetLine","offsetColumn","cons","generatedOffset","_sections","_generatedMappings","_sortGeneratedMappings","_originalMappings","_sortOriginalMappings","_generatedMappingsUnsorted","_originalMappingsUnsorted","sort","compareByGeneratedPositionsDeflated","compareByOriginalPositions","j","sectionIndex","search","aNeedle","section","cmp","every","content","generatedPosition","ret","generatedMappings","originalMappings","sectionMappings","add","adjustedMapping","forEach","_findMapping","aMappings","aLineName","aColumnName","aComparator","aBias","TypeError","undefined"],"sources":["/Users/sabyrzhanolzhabay/Web-Dev/Arabakz/ArabaFrontend/node_modules/source-map/lib/source-map-consumer.js"],"sourcesContent":["/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nconst util = require(\"./util\");\nconst binarySearch = require(\"./binary-search\");\nconst ArraySet = require(\"./array-set\").ArraySet;\nconst base64VLQ = require(\"./base64-vlq\"); // eslint-disable-line no-unused-vars\nconst readWasm = require(\"../lib/read-wasm\");\nconst wasm = require(\"./wasm\");\n\nconst INTERNAL = Symbol(\"smcInternal\");\n\nclass SourceMapConsumer {\n  constructor(aSourceMap, aSourceMapURL) {\n    // If the constructor was called by super(), just return Promise<this>.\n    // Yes, this is a hack to retain the pre-existing API of the base-class\n    // constructor also being an async factory function.\n    if (aSourceMap == INTERNAL) {\n      return Promise.resolve(this);\n    }\n\n    return _factory(aSourceMap, aSourceMapURL);\n  }\n\n  static initialize(opts) {\n    readWasm.initialize(opts[\"lib/mappings.wasm\"]);\n  }\n\n  static fromSourceMap(aSourceMap, aSourceMapURL) {\n    return _factoryBSM(aSourceMap, aSourceMapURL);\n  }\n\n  /**\n   * Construct a new `SourceMapConsumer` from `rawSourceMap` and `sourceMapUrl`\n   * (see the `SourceMapConsumer` constructor for details. Then, invoke the `async\n   * function f(SourceMapConsumer) -> T` with the newly constructed consumer, wait\n   * for `f` to complete, call `destroy` on the consumer, and return `f`'s return\n   * value.\n   *\n   * You must not use the consumer after `f` completes!\n   *\n   * By using `with`, you do not have to remember to manually call `destroy` on\n   * the consumer, since it will be called automatically once `f` completes.\n   *\n   * ```js\n   * const xSquared = await SourceMapConsumer.with(\n   *   myRawSourceMap,\n   *   null,\n   *   async function (consumer) {\n   *     // Use `consumer` inside here and don't worry about remembering\n   *     // to call `destroy`.\n   *\n   *     const x = await whatever(consumer);\n   *     return x * x;\n   *   }\n   * );\n   *\n   * // You may not use that `consumer` anymore out here; it has\n   * // been destroyed. But you can use `xSquared`.\n   * console.log(xSquared);\n   * ```\n   */\n  static async with(rawSourceMap, sourceMapUrl, f) {\n    const consumer = await new SourceMapConsumer(rawSourceMap, sourceMapUrl);\n    try {\n      return await f(consumer);\n    } finally {\n      consumer.destroy();\n    }\n  }\n\n  /**\n   * Parse the mappings in a string in to a data structure which we can easily\n   * query (the ordered arrays in the `this.__generatedMappings` and\n   * `this.__originalMappings` properties).\n   */\n  _parseMappings(aStr, aSourceRoot) {\n    throw new Error(\"Subclasses must implement _parseMappings\");\n  }\n\n  /**\n   * Iterate over each mapping between an original source/line/column and a\n   * generated line/column in this source map.\n   *\n   * @param Function aCallback\n   *        The function that is called with each mapping.\n   * @param Object aContext\n   *        Optional. If specified, this object will be the value of `this` every\n   *        time that `aCallback` is called.\n   * @param aOrder\n   *        Either `SourceMapConsumer.GENERATED_ORDER` or\n   *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to\n   *        iterate over the mappings sorted by the generated file's line/column\n   *        order or the original's source/line/column order, respectively. Defaults to\n   *        `SourceMapConsumer.GENERATED_ORDER`.\n   */\n  eachMapping(aCallback, aContext, aOrder) {\n    throw new Error(\"Subclasses must implement eachMapping\");\n  }\n\n  /**\n   * Returns all generated line and column information for the original source,\n   * line, and column provided. If no column is provided, returns all mappings\n   * corresponding to a either the line we are searching for or the next\n   * closest line that has any mappings. Otherwise, returns all mappings\n   * corresponding to the given line and either the column we are searching for\n   * or the next closest column that has any offsets.\n   *\n   * The only argument is an object with the following properties:\n   *\n   *   - source: The filename of the original source.\n   *   - line: The line number in the original source.  The line number is 1-based.\n   *   - column: Optional. the column number in the original source.\n   *    The column number is 0-based.\n   *\n   * and an array of objects is returned, each with the following properties:\n   *\n   *   - line: The line number in the generated source, or null.  The\n   *    line number is 1-based.\n   *   - column: The column number in the generated source, or null.\n   *    The column number is 0-based.\n   */\n  allGeneratedPositionsFor(aArgs) {\n    throw new Error(\"Subclasses must implement allGeneratedPositionsFor\");\n  }\n\n  destroy() {\n    throw new Error(\"Subclasses must implement destroy\");\n  }\n}\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nSourceMapConsumer.prototype._version = 3;\nSourceMapConsumer.GENERATED_ORDER = 1;\nSourceMapConsumer.ORIGINAL_ORDER = 2;\n\nSourceMapConsumer.GREATEST_LOWER_BOUND = 1;\nSourceMapConsumer.LEAST_UPPER_BOUND = 2;\n\nexports.SourceMapConsumer = SourceMapConsumer;\n\n/**\n * A BasicSourceMapConsumer instance represents a parsed source map which we can\n * query for information about the original file positions by giving it a file\n * position in the generated source.\n *\n * The first parameter is the raw source map (either as a JSON string, or\n * already parsed to an object). According to the spec, source maps have the\n * following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - sources: An array of URLs to the original source files.\n *   - names: An array of identifiers which can be referenced by individual mappings.\n *   - sourceRoot: Optional. The URL root from which all sources are relative.\n *   - sourcesContent: Optional. An array of contents of the original source files.\n *   - mappings: A string of base64 VLQs which contain the actual mappings.\n *   - file: Optional. The generated file this source map is associated with.\n *\n * Here is an example source map, taken from the source map spec[0]:\n *\n *     {\n *       version : 3,\n *       file: \"out.js\",\n *       sourceRoot : \"\",\n *       sources: [\"foo.js\", \"bar.js\"],\n *       names: [\"src\", \"maps\", \"are\", \"fun\"],\n *       mappings: \"AA,AB;;ABCDE;\"\n *     }\n *\n * The second parameter, if given, is a string whose value is the URL\n * at which the source map was found.  This URL is used to compute the\n * sources array.\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#\n */\nclass BasicSourceMapConsumer extends SourceMapConsumer {\n  constructor(aSourceMap, aSourceMapURL) {\n    return super(INTERNAL).then(that => {\n      let sourceMap = aSourceMap;\n      if (typeof aSourceMap === \"string\") {\n        sourceMap = util.parseSourceMapInput(aSourceMap);\n      }\n\n      const version = util.getArg(sourceMap, \"version\");\n      let sources = util.getArg(sourceMap, \"sources\");\n      // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which\n      // requires the array) to play nice here.\n      const names = util.getArg(sourceMap, \"names\", []);\n      let sourceRoot = util.getArg(sourceMap, \"sourceRoot\", null);\n      const sourcesContent = util.getArg(sourceMap, \"sourcesContent\", null);\n      const mappings = util.getArg(sourceMap, \"mappings\");\n      const file = util.getArg(sourceMap, \"file\", null);\n\n      // Once again, Sass deviates from the spec and supplies the version as a\n      // string rather than a number, so we use loose equality checking here.\n      if (version != that._version) {\n        throw new Error(\"Unsupported version: \" + version);\n      }\n\n      if (sourceRoot) {\n        sourceRoot = util.normalize(sourceRoot);\n      }\n\n      sources = sources\n        .map(String)\n        // Some source maps produce relative source paths like \"./foo.js\" instead of\n        // \"foo.js\".  Normalize these first so that future comparisons will succeed.\n        // See bugzil.la/1090768.\n        .map(util.normalize)\n        // Always ensure that absolute sources are internally stored relative to\n        // the source root, if the source root is absolute. Not doing this would\n        // be particularly problematic when the source root is a prefix of the\n        // source (valid, but why??). See github issue #199 and bugzil.la/1188982.\n        .map(function(source) {\n          return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source)\n            ? util.relative(sourceRoot, source)\n            : source;\n        });\n\n      // Pass `true` below to allow duplicate names and sources. While source maps\n      // are intended to be compressed and deduplicated, the TypeScript compiler\n      // sometimes generates source maps with duplicates in them. See Github issue\n      // #72 and bugzil.la/889492.\n      that._names = ArraySet.fromArray(names.map(String), true);\n      that._sources = ArraySet.fromArray(sources, true);\n\n      that._absoluteSources = that._sources.toArray().map(function(s) {\n        return util.computeSourceURL(sourceRoot, s, aSourceMapURL);\n      });\n\n      that.sourceRoot = sourceRoot;\n      that.sourcesContent = sourcesContent;\n      that._mappings = mappings;\n      that._sourceMapURL = aSourceMapURL;\n      that.file = file;\n\n      that._computedColumnSpans = false;\n      that._mappingsPtr = 0;\n      that._wasm = null;\n\n      return wasm().then(w => {\n        that._wasm = w;\n        return that;\n      });\n    });\n  }\n\n  /**\n   * Utility function to find the index of a source.  Returns -1 if not\n   * found.\n   */\n  _findSourceIndex(aSource) {\n    let relativeSource = aSource;\n    if (this.sourceRoot != null) {\n      relativeSource = util.relative(this.sourceRoot, relativeSource);\n    }\n\n    if (this._sources.has(relativeSource)) {\n      return this._sources.indexOf(relativeSource);\n    }\n\n    // Maybe aSource is an absolute URL as returned by |sources|.  In\n    // this case we can't simply undo the transform.\n    for (let i = 0; i < this._absoluteSources.length; ++i) {\n      if (this._absoluteSources[i] == aSource) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  /**\n   * Create a BasicSourceMapConsumer from a SourceMapGenerator.\n   *\n   * @param SourceMapGenerator aSourceMap\n   *        The source map that will be consumed.\n   * @param String aSourceMapURL\n   *        The URL at which the source map can be found (optional)\n   * @returns BasicSourceMapConsumer\n   */\n  static fromSourceMap(aSourceMap, aSourceMapURL) {\n    return new BasicSourceMapConsumer(aSourceMap.toString());\n  }\n\n  get sources() {\n    return this._absoluteSources.slice();\n  }\n\n  _getMappingsPtr() {\n    if (this._mappingsPtr === 0) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n\n    return this._mappingsPtr;\n  }\n\n  /**\n   * Parse the mappings in a string in to a data structure which we can easily\n   * query (the ordered arrays in the `this.__generatedMappings` and\n   * `this.__originalMappings` properties).\n   */\n  _parseMappings(aStr, aSourceRoot) {\n    const size = aStr.length;\n\n    const mappingsBufPtr = this._wasm.exports.allocate_mappings(size);\n    const mappingsBuf = new Uint8Array(this._wasm.exports.memory.buffer, mappingsBufPtr, size);\n    for (let i = 0; i < size; i++) {\n      mappingsBuf[i] = aStr.charCodeAt(i);\n    }\n\n    const mappingsPtr = this._wasm.exports.parse_mappings(mappingsBufPtr);\n\n    if (!mappingsPtr) {\n      const error = this._wasm.exports.get_last_error();\n      let msg = `Error parsing mappings (code ${error}): `;\n\n      // XXX: keep these error codes in sync with `fitzgen/source-map-mappings`.\n      switch (error) {\n        case 1:\n          msg += \"the mappings contained a negative line, column, source index, or name index\";\n          break;\n        case 2:\n          msg += \"the mappings contained a number larger than 2**32\";\n          break;\n        case 3:\n          msg += \"reached EOF while in the middle of parsing a VLQ\";\n          break;\n        case 4:\n          msg += \"invalid base 64 character while parsing a VLQ\";\n          break;\n        default:\n          msg += \"unknown error code\";\n          break;\n      }\n\n      throw new Error(msg);\n    }\n\n    this._mappingsPtr = mappingsPtr;\n  }\n\n  eachMapping(aCallback, aContext, aOrder) {\n    const context = aContext || null;\n    const order = aOrder || SourceMapConsumer.GENERATED_ORDER;\n    const sourceRoot = this.sourceRoot;\n\n    this._wasm.withMappingCallback(\n      mapping => {\n        if (mapping.source !== null) {\n          mapping.source = this._sources.at(mapping.source);\n          mapping.source = util.computeSourceURL(sourceRoot, mapping.source, this._sourceMapURL);\n\n          if (mapping.name !== null) {\n            mapping.name = this._names.at(mapping.name);\n          }\n        }\n\n        aCallback.call(context, mapping);\n      },\n      () => {\n        switch (order) {\n        case SourceMapConsumer.GENERATED_ORDER:\n          this._wasm.exports.by_generated_location(this._getMappingsPtr());\n          break;\n        case SourceMapConsumer.ORIGINAL_ORDER:\n          this._wasm.exports.by_original_location(this._getMappingsPtr());\n          break;\n        default:\n          throw new Error(\"Unknown order of iteration.\");\n        }\n      }\n    );\n  }\n\n  allGeneratedPositionsFor(aArgs) {\n    let source = util.getArg(aArgs, \"source\");\n    const originalLine = util.getArg(aArgs, \"line\");\n    const originalColumn = aArgs.column || 0;\n\n    source = this._findSourceIndex(source);\n    if (source < 0) {\n      return [];\n    }\n\n    if (originalLine < 1) {\n      throw new Error(\"Line numbers must be >= 1\");\n    }\n\n    if (originalColumn < 0) {\n      throw new Error(\"Column numbers must be >= 0\");\n    }\n\n    const mappings = [];\n\n    this._wasm.withMappingCallback(\n      m => {\n        let lastColumn = m.lastGeneratedColumn;\n        if (this._computedColumnSpans && lastColumn === null) {\n          lastColumn = Infinity;\n        }\n        mappings.push({\n          line: m.generatedLine,\n          column: m.generatedColumn,\n          lastColumn,\n        });\n      }, () => {\n        this._wasm.exports.all_generated_locations_for(\n          this._getMappingsPtr(),\n          source,\n          originalLine - 1,\n          \"column\" in aArgs,\n          originalColumn\n        );\n      }\n    );\n\n    return mappings;\n  }\n\n  destroy() {\n    if (this._mappingsPtr !== 0) {\n      this._wasm.exports.free_mappings(this._mappingsPtr);\n      this._mappingsPtr = 0;\n    }\n  }\n\n  /**\n   * Compute the last column for each generated mapping. The last column is\n   * inclusive.\n   */\n  computeColumnSpans() {\n    if (this._computedColumnSpans) {\n      return;\n    }\n\n    this._wasm.exports.compute_column_spans(this._getMappingsPtr());\n    this._computedColumnSpans = true;\n  }\n\n  /**\n   * Returns the original source, line, and column information for the generated\n   * source's line and column positions provided. The only argument is an object\n   * with the following properties:\n   *\n   *   - line: The line number in the generated source.  The line number\n   *     is 1-based.\n   *   - column: The column number in the generated source.  The column\n   *     number is 0-based.\n   *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n   *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n   *     closest element that is smaller than or greater than the one we are\n   *     searching for, respectively, if the exact element cannot be found.\n   *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n   *\n   * and an object is returned with the following properties:\n   *\n   *   - source: The original source file, or null.\n   *   - line: The line number in the original source, or null.  The\n   *     line number is 1-based.\n   *   - column: The column number in the original source, or null.  The\n   *     column number is 0-based.\n   *   - name: The original identifier, or null.\n   */\n  originalPositionFor(aArgs) {\n    const needle = {\n      generatedLine: util.getArg(aArgs, \"line\"),\n      generatedColumn: util.getArg(aArgs, \"column\")\n    };\n\n    if (needle.generatedLine < 1) {\n      throw new Error(\"Line numbers must be >= 1\");\n    }\n\n    if (needle.generatedColumn < 0) {\n      throw new Error(\"Column numbers must be >= 0\");\n    }\n\n    let bias = util.getArg(aArgs, \"bias\", SourceMapConsumer.GREATEST_LOWER_BOUND);\n    if (bias == null) {\n      bias = SourceMapConsumer.GREATEST_LOWER_BOUND;\n    }\n\n    let mapping;\n    this._wasm.withMappingCallback(m => mapping = m, () => {\n      this._wasm.exports.original_location_for(\n        this._getMappingsPtr(),\n        needle.generatedLine - 1,\n        needle.generatedColumn,\n        bias\n      );\n    });\n\n    if (mapping) {\n      if (mapping.generatedLine === needle.generatedLine) {\n        let source = util.getArg(mapping, \"source\", null);\n        if (source !== null) {\n          source = this._sources.at(source);\n          source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);\n        }\n\n        let name = util.getArg(mapping, \"name\", null);\n        if (name !== null) {\n          name = this._names.at(name);\n        }\n\n        return {\n          source,\n          line: util.getArg(mapping, \"originalLine\", null),\n          column: util.getArg(mapping, \"originalColumn\", null),\n          name\n        };\n      }\n    }\n\n    return {\n      source: null,\n      line: null,\n      column: null,\n      name: null\n    };\n  }\n\n  /**\n   * Return true if we have the source content for every source in the source\n   * map, false otherwise.\n   */\n  hasContentsOfAllSources() {\n    if (!this.sourcesContent) {\n      return false;\n    }\n    return this.sourcesContent.length >= this._sources.size() &&\n      !this.sourcesContent.some(function(sc) { return sc == null; });\n  }\n\n  /**\n   * Returns the original source content. The only argument is the url of the\n   * original source file. Returns null if no original source content is\n   * available.\n   */\n  sourceContentFor(aSource, nullOnMissing) {\n    if (!this.sourcesContent) {\n      return null;\n    }\n\n    const index = this._findSourceIndex(aSource);\n    if (index >= 0) {\n      return this.sourcesContent[index];\n    }\n\n    let relativeSource = aSource;\n    if (this.sourceRoot != null) {\n      relativeSource = util.relative(this.sourceRoot, relativeSource);\n    }\n\n    let url;\n    if (this.sourceRoot != null\n        && (url = util.urlParse(this.sourceRoot))) {\n      // XXX: file:// URIs and absolute paths lead to unexpected behavior for\n      // many users. We can help them out when they expect file:// URIs to\n      // behave like it would if they were running a local HTTP server. See\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.\n      const fileUriAbsPath = relativeSource.replace(/^file:\\/\\//, \"\");\n      if (url.scheme == \"file\"\n          && this._sources.has(fileUriAbsPath)) {\n        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];\n      }\n\n      if ((!url.path || url.path == \"/\")\n          && this._sources.has(\"/\" + relativeSource)) {\n        return this.sourcesContent[this._sources.indexOf(\"/\" + relativeSource)];\n      }\n    }\n\n    // This function is used recursively from\n    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we\n    // don't want to throw if we can't find the source - we just want to\n    // return null, so we provide a flag to exit gracefully.\n    if (nullOnMissing) {\n      return null;\n    }\n\n    throw new Error('\"' + relativeSource + '\" is not in the SourceMap.');\n  }\n\n  /**\n   * Returns the generated line and column information for the original source,\n   * line, and column positions provided. The only argument is an object with\n   * the following properties:\n   *\n   *   - source: The filename of the original source.\n   *   - line: The line number in the original source.  The line number\n   *     is 1-based.\n   *   - column: The column number in the original source.  The column\n   *     number is 0-based.\n   *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n   *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n   *     closest element that is smaller than or greater than the one we are\n   *     searching for, respectively, if the exact element cannot be found.\n   *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n   *\n   * and an object is returned with the following properties:\n   *\n   *   - line: The line number in the generated source, or null.  The\n   *     line number is 1-based.\n   *   - column: The column number in the generated source, or null.\n   *     The column number is 0-based.\n   */\n  generatedPositionFor(aArgs) {\n    let source = util.getArg(aArgs, \"source\");\n    source = this._findSourceIndex(source);\n    if (source < 0) {\n      return {\n        line: null,\n        column: null,\n        lastColumn: null\n      };\n    }\n\n    const needle = {\n      source,\n      originalLine: util.getArg(aArgs, \"line\"),\n      originalColumn: util.getArg(aArgs, \"column\")\n    };\n\n    if (needle.originalLine < 1) {\n      throw new Error(\"Line numbers must be >= 1\");\n    }\n\n    if (needle.originalColumn < 0) {\n      throw new Error(\"Column numbers must be >= 0\");\n    }\n\n    let bias = util.getArg(aArgs, \"bias\", SourceMapConsumer.GREATEST_LOWER_BOUND);\n    if (bias == null) {\n      bias = SourceMapConsumer.GREATEST_LOWER_BOUND;\n    }\n\n    let mapping;\n    this._wasm.withMappingCallback(m => mapping = m, () => {\n      this._wasm.exports.generated_location_for(\n        this._getMappingsPtr(),\n        needle.source,\n        needle.originalLine - 1,\n        needle.originalColumn,\n        bias\n      );\n    });\n\n    if (mapping) {\n      if (mapping.source === needle.source) {\n        let lastColumn = mapping.lastGeneratedColumn;\n        if (this._computedColumnSpans && lastColumn === null) {\n          lastColumn = Infinity;\n        }\n        return {\n          line: util.getArg(mapping, \"generatedLine\", null),\n          column: util.getArg(mapping, \"generatedColumn\", null),\n          lastColumn,\n        };\n      }\n    }\n\n    return {\n      line: null,\n      column: null,\n      lastColumn: null\n    };\n  }\n}\n\nBasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;\nexports.BasicSourceMapConsumer = BasicSourceMapConsumer;\n\n/**\n * An IndexedSourceMapConsumer instance represents a parsed source map which\n * we can query for information. It differs from BasicSourceMapConsumer in\n * that it takes \"indexed\" source maps (i.e. ones with a \"sections\" field) as\n * input.\n *\n * The first parameter is a raw source map (either as a JSON string, or already\n * parsed to an object). According to the spec for indexed source maps, they\n * have the following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - file: Optional. The generated file this source map is associated with.\n *   - sections: A list of section definitions.\n *\n * Each value under the \"sections\" field has two fields:\n *   - offset: The offset into the original specified at which this section\n *       begins to apply, defined as an object with a \"line\" and \"column\"\n *       field.\n *   - map: A source map definition. This source map could also be indexed,\n *       but doesn't have to be.\n *\n * Instead of the \"map\" field, it's also possible to have a \"url\" field\n * specifying a URL to retrieve a source map from, but that's currently\n * unsupported.\n *\n * Here's an example source map, taken from the source map spec[0], but\n * modified to omit a section which uses the \"url\" field.\n *\n *  {\n *    version : 3,\n *    file: \"app.js\",\n *    sections: [{\n *      offset: {line:100, column:10},\n *      map: {\n *        version : 3,\n *        file: \"section.js\",\n *        sources: [\"foo.js\", \"bar.js\"],\n *        names: [\"src\", \"maps\", \"are\", \"fun\"],\n *        mappings: \"AAAA,E;;ABCDE;\"\n *      }\n *    }],\n *  }\n *\n * The second parameter, if given, is a string whose value is the URL\n * at which the source map was found.  This URL is used to compute the\n * sources array.\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt\n */\nclass IndexedSourceMapConsumer extends SourceMapConsumer {\n  constructor(aSourceMap, aSourceMapURL) {\n    return super(INTERNAL).then(that => {\n      let sourceMap = aSourceMap;\n      if (typeof aSourceMap === \"string\") {\n        sourceMap = util.parseSourceMapInput(aSourceMap);\n      }\n\n      const version = util.getArg(sourceMap, \"version\");\n      const sections = util.getArg(sourceMap, \"sections\");\n\n      if (version != that._version) {\n        throw new Error(\"Unsupported version: \" + version);\n      }\n\n      that._sources = new ArraySet();\n      that._names = new ArraySet();\n      that.__generatedMappings = null;\n      that.__originalMappings = null;\n      that.__generatedMappingsUnsorted = null;\n      that.__originalMappingsUnsorted = null;\n\n      let lastOffset = {\n        line: -1,\n        column: 0\n      };\n      return Promise.all(sections.map(s => {\n        if (s.url) {\n          // The url field will require support for asynchronicity.\n          // See https://github.com/mozilla/source-map/issues/16\n          throw new Error(\"Support for url field in sections not implemented.\");\n        }\n        const offset = util.getArg(s, \"offset\");\n        const offsetLine = util.getArg(offset, \"line\");\n        const offsetColumn = util.getArg(offset, \"column\");\n\n        if (offsetLine < lastOffset.line ||\n            (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {\n          throw new Error(\"Section offsets must be ordered and non-overlapping.\");\n        }\n        lastOffset = offset;\n\n        const cons = new SourceMapConsumer(util.getArg(s, \"map\"), aSourceMapURL);\n        return cons.then(consumer => {\n          return {\n            generatedOffset: {\n              // The offset fields are 0-based, but we use 1-based indices when\n              // encoding/decoding from VLQ.\n              generatedLine: offsetLine + 1,\n              generatedColumn: offsetColumn + 1\n            },\n            consumer\n          };\n        });\n      })).then(s => {\n        that._sections = s;\n        return that;\n      });\n    });\n  }\n\n  // `__generatedMappings` and `__originalMappings` are arrays that hold the\n  // parsed mapping coordinates from the source map's \"mappings\" attribute. They\n  // are lazily instantiated, accessed via the `_generatedMappings` and\n  // `_originalMappings` getters respectively, and we only parse the mappings\n  // and create these arrays once queried for a source location. We jump through\n  // these hoops because there can be many thousands of mappings, and parsing\n  // them is expensive, so we only want to do it if we must.\n  //\n  // Each object in the arrays is of the form:\n  //\n  //     {\n  //       generatedLine: The line number in the generated code,\n  //       generatedColumn: The column number in the generated code,\n  //       source: The path to the original source file that generated this\n  //               chunk of code,\n  //       originalLine: The line number in the original source that\n  //                     corresponds to this chunk of generated code,\n  //       originalColumn: The column number in the original source that\n  //                       corresponds to this chunk of generated code,\n  //       name: The name of the original symbol which generated this chunk of\n  //             code.\n  //     }\n  //\n  // All properties except for `generatedLine` and `generatedColumn` can be\n  // `null`.\n  //\n  // `_generatedMappings` is ordered by the generated positions.\n  //\n  // `_originalMappings` is ordered by the original positions.\n  get _generatedMappings() {\n    if (!this.__generatedMappings) {\n      this._sortGeneratedMappings();\n    }\n\n    return this.__generatedMappings;\n  }\n\n  get _originalMappings() {\n    if (!this.__originalMappings) {\n      this._sortOriginalMappings();\n    }\n\n    return this.__originalMappings;\n  }\n\n  get _generatedMappingsUnsorted() {\n    if (!this.__generatedMappingsUnsorted) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n\n    return this.__generatedMappingsUnsorted;\n  }\n\n  get _originalMappingsUnsorted() {\n    if (!this.__originalMappingsUnsorted) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n\n    return this.__originalMappingsUnsorted;\n  }\n\n  _sortGeneratedMappings() {\n    const mappings = this._generatedMappingsUnsorted;\n    mappings.sort(util.compareByGeneratedPositionsDeflated);\n    this.__generatedMappings = mappings;\n  }\n\n  _sortOriginalMappings() {\n    const mappings = this._originalMappingsUnsorted;\n    mappings.sort(util.compareByOriginalPositions);\n    this.__originalMappings = mappings;\n  }\n\n  /**\n   * The list of original sources.\n   */\n  get sources() {\n    const sources = [];\n    for (let i = 0; i < this._sections.length; i++) {\n      for (let j = 0; j < this._sections[i].consumer.sources.length; j++) {\n        sources.push(this._sections[i].consumer.sources[j]);\n      }\n    }\n    return sources;\n  }\n\n  /**\n   * Returns the original source, line, and column information for the generated\n   * source's line and column positions provided. The only argument is an object\n   * with the following properties:\n   *\n   *   - line: The line number in the generated source.  The line number\n   *     is 1-based.\n   *   - column: The column number in the generated source.  The column\n   *     number is 0-based.\n   *\n   * and an object is returned with the following properties:\n   *\n   *   - source: The original source file, or null.\n   *   - line: The line number in the original source, or null.  The\n   *     line number is 1-based.\n   *   - column: The column number in the original source, or null.  The\n   *     column number is 0-based.\n   *   - name: The original identifier, or null.\n   */\n  originalPositionFor(aArgs) {\n    const needle = {\n      generatedLine: util.getArg(aArgs, \"line\"),\n      generatedColumn: util.getArg(aArgs, \"column\")\n    };\n\n    // Find the section containing the generated position we're trying to map\n    // to an original position.\n    const sectionIndex = binarySearch.search(needle, this._sections,\n      function(aNeedle, section) {\n        const cmp = aNeedle.generatedLine - section.generatedOffset.generatedLine;\n        if (cmp) {\n          return cmp;\n        }\n\n        return (aNeedle.generatedColumn -\n                section.generatedOffset.generatedColumn);\n      });\n    const section = this._sections[sectionIndex];\n\n    if (!section) {\n      return {\n        source: null,\n        line: null,\n        column: null,\n        name: null\n      };\n    }\n\n    return section.consumer.originalPositionFor({\n      line: needle.generatedLine -\n        (section.generatedOffset.generatedLine - 1),\n      column: needle.generatedColumn -\n        (section.generatedOffset.generatedLine === needle.generatedLine\n         ? section.generatedOffset.generatedColumn - 1\n         : 0),\n      bias: aArgs.bias\n    });\n  }\n\n  /**\n   * Return true if we have the source content for every source in the source\n   * map, false otherwise.\n   */\n  hasContentsOfAllSources() {\n    return this._sections.every(function(s) {\n      return s.consumer.hasContentsOfAllSources();\n    });\n  }\n\n  /**\n   * Returns the original source content. The only argument is the url of the\n   * original source file. Returns null if no original source content is\n   * available.\n   */\n  sourceContentFor(aSource, nullOnMissing) {\n    for (let i = 0; i < this._sections.length; i++) {\n      const section = this._sections[i];\n\n      const content = section.consumer.sourceContentFor(aSource, true);\n      if (content) {\n        return content;\n      }\n    }\n    if (nullOnMissing) {\n      return null;\n    }\n    throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n  }\n\n  /**\n   * Returns the generated line and column information for the original source,\n   * line, and column positions provided. The only argument is an object with\n   * the following properties:\n   *\n   *   - source: The filename of the original source.\n   *   - line: The line number in the original source.  The line number\n   *     is 1-based.\n   *   - column: The column number in the original source.  The column\n   *     number is 0-based.\n   *\n   * and an object is returned with the following properties:\n   *\n   *   - line: The line number in the generated source, or null.  The\n   *     line number is 1-based.\n   *   - column: The column number in the generated source, or null.\n   *     The column number is 0-based.\n   */\n  generatedPositionFor(aArgs) {\n    for (let i = 0; i < this._sections.length; i++) {\n      const section = this._sections[i];\n\n      // Only consider this section if the requested source is in the list of\n      // sources of the consumer.\n      if (section.consumer._findSourceIndex(util.getArg(aArgs, \"source\")) === -1) {\n        continue;\n      }\n      const generatedPosition = section.consumer.generatedPositionFor(aArgs);\n      if (generatedPosition) {\n        const ret = {\n          line: generatedPosition.line +\n            (section.generatedOffset.generatedLine - 1),\n          column: generatedPosition.column +\n            (section.generatedOffset.generatedLine === generatedPosition.line\n             ? section.generatedOffset.generatedColumn - 1\n             : 0)\n        };\n        return ret;\n      }\n    }\n\n    return {\n      line: null,\n      column: null\n    };\n  }\n\n  /**\n   * Parse the mappings in a string in to a data structure which we can easily\n   * query (the ordered arrays in the `this.__generatedMappings` and\n   * `this.__originalMappings` properties).\n   */\n  _parseMappings(aStr, aSourceRoot) {\n    const generatedMappings = this.__generatedMappingsUnsorted = [];\n    const originalMappings = this.__originalMappingsUnsorted = [];\n    for (let i = 0; i < this._sections.length; i++) {\n      const section = this._sections[i];\n\n      const sectionMappings = [];\n      section.consumer.eachMapping(m => sectionMappings.push(m));\n\n      for (let j = 0; j < sectionMappings.length; j++) {\n        const mapping = sectionMappings[j];\n\n        // TODO: test if null is correct here.  The original code used\n        // `source`, which would actually have gotten used as null because\n        // var's get hoisted.\n        // See: https://github.com/mozilla/source-map/issues/333\n        let source = util.computeSourceURL(section.consumer.sourceRoot, null, this._sourceMapURL);\n        this._sources.add(source);\n        source = this._sources.indexOf(source);\n\n        let name = null;\n        if (mapping.name) {\n          this._names.add(mapping.name);\n          name = this._names.indexOf(mapping.name);\n        }\n\n        // The mappings coming from the consumer for the section have\n        // generated positions relative to the start of the section, so we\n        // need to offset them to be relative to the start of the concatenated\n        // generated file.\n        const adjustedMapping = {\n          source,\n          generatedLine: mapping.generatedLine +\n            (section.generatedOffset.generatedLine - 1),\n          generatedColumn: mapping.generatedColumn +\n            (section.generatedOffset.generatedLine === mapping.generatedLine\n            ? section.generatedOffset.generatedColumn - 1\n            : 0),\n          originalLine: mapping.originalLine,\n          originalColumn: mapping.originalColumn,\n          name\n        };\n\n        generatedMappings.push(adjustedMapping);\n        if (typeof adjustedMapping.originalLine === \"number\") {\n          originalMappings.push(adjustedMapping);\n        }\n      }\n    }\n  }\n\n  eachMapping(aCallback, aContext, aOrder) {\n    const context = aContext || null;\n    const order = aOrder || SourceMapConsumer.GENERATED_ORDER;\n\n    let mappings;\n    switch (order) {\n    case SourceMapConsumer.GENERATED_ORDER:\n      mappings = this._generatedMappings;\n      break;\n    case SourceMapConsumer.ORIGINAL_ORDER:\n      mappings = this._originalMappings;\n      break;\n    default:\n      throw new Error(\"Unknown order of iteration.\");\n    }\n\n    const sourceRoot = this.sourceRoot;\n    mappings.map(function(mapping) {\n      let source = null;\n      if (mapping.source !== null) {\n        source = this._sources.at(mapping.source);\n        source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL);\n      }\n      return {\n        source,\n        generatedLine: mapping.generatedLine,\n        generatedColumn: mapping.generatedColumn,\n        originalLine: mapping.originalLine,\n        originalColumn: mapping.originalColumn,\n        name: mapping.name === null ? null : this._names.at(mapping.name)\n      };\n    }, this).forEach(aCallback, context);\n  }\n\n  /**\n   * Find the mapping that best matches the hypothetical \"needle\" mapping that\n   * we are searching for in the given \"haystack\" of mappings.\n   */\n  _findMapping(aNeedle, aMappings, aLineName,\n              aColumnName, aComparator, aBias) {\n    // To return the position we are searching for, we must first find the\n    // mapping for the given position and then return the opposite position it\n    // points to. Because the mappings are sorted, we can use binary search to\n    // find the best mapping.\n\n    if (aNeedle[aLineName] <= 0) {\n      throw new TypeError(\"Line must be greater than or equal to 1, got \"\n                          + aNeedle[aLineName]);\n    }\n    if (aNeedle[aColumnName] < 0) {\n      throw new TypeError(\"Column must be greater than or equal to 0, got \"\n                          + aNeedle[aColumnName]);\n    }\n\n    return binarySearch.search(aNeedle, aMappings, aComparator, aBias);\n  }\n\n  allGeneratedPositionsFor(aArgs) {\n    const line = util.getArg(aArgs, \"line\");\n\n    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping\n    // returns the index of the closest mapping less than the needle. By\n    // setting needle.originalColumn to 0, we thus find the last mapping for\n    // the given line, provided such a mapping exists.\n    const needle = {\n      source: util.getArg(aArgs, \"source\"),\n      originalLine: line,\n      originalColumn: util.getArg(aArgs, \"column\", 0)\n    };\n\n    needle.source = this._findSourceIndex(needle.source);\n    if (needle.source < 0) {\n      return [];\n    }\n\n    if (needle.originalLine < 1) {\n      throw new Error(\"Line numbers must be >= 1\");\n    }\n\n    if (needle.originalColumn < 0) {\n      throw new Error(\"Column numbers must be >= 0\");\n    }\n\n    const mappings = [];\n\n    let index = this._findMapping(needle,\n                                  this._originalMappings,\n                                  \"originalLine\",\n                                  \"originalColumn\",\n                                  util.compareByOriginalPositions,\n                                  binarySearch.LEAST_UPPER_BOUND);\n    if (index >= 0) {\n      let mapping = this._originalMappings[index];\n\n      if (aArgs.column === undefined) {\n        const originalLine = mapping.originalLine;\n\n        // Iterate until either we run out of mappings, or we run into\n        // a mapping for a different line than the one we found. Since\n        // mappings are sorted, this is guaranteed to find all mappings for\n        // the line we found.\n        while (mapping && mapping.originalLine === originalLine) {\n          let lastColumn = mapping.lastGeneratedColumn;\n          if (this._computedColumnSpans && lastColumn === null) {\n            lastColumn = Infinity;\n          }\n          mappings.push({\n            line: util.getArg(mapping, \"generatedLine\", null),\n            column: util.getArg(mapping, \"generatedColumn\", null),\n            lastColumn,\n          });\n\n          mapping = this._originalMappings[++index];\n        }\n      } else {\n        const originalColumn = mapping.originalColumn;\n\n        // Iterate until either we run out of mappings, or we run into\n        // a mapping for a different line than the one we were searching for.\n        // Since mappings are sorted, this is guaranteed to find all mappings for\n        // the line we are searching for.\n        while (mapping &&\n               mapping.originalLine === line &&\n               mapping.originalColumn == originalColumn) {\n          let lastColumn = mapping.lastGeneratedColumn;\n          if (this._computedColumnSpans && lastColumn === null) {\n            lastColumn = Infinity;\n          }\n          mappings.push({\n            line: util.getArg(mapping, \"generatedLine\", null),\n            column: util.getArg(mapping, \"generatedColumn\", null),\n            lastColumn,\n          });\n\n          mapping = this._originalMappings[++index];\n        }\n      }\n    }\n\n    return mappings;\n  }\n\n  destroy() {\n    for (let i = 0; i < this._sections.length; i++) {\n      this._sections[i].consumer.destroy();\n    }\n  }\n}\nexports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;\n\n/*\n * Cheat to get around inter-twingled classes.  `factory()` can be at the end\n * where it has access to non-hoisted classes, but it gets hoisted itself.\n */\nfunction _factory(aSourceMap, aSourceMapURL) {\n  let sourceMap = aSourceMap;\n  if (typeof aSourceMap === \"string\") {\n    sourceMap = util.parseSourceMapInput(aSourceMap);\n  }\n\n  const consumer = sourceMap.sections != null\n      ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL)\n      : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);\n  return Promise.resolve(consumer);\n}\n\nfunction _factoryBSM(aSourceMap, aSourceMapURL) {\n  return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}