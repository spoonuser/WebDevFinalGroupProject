{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _asyncToGenerator = require(\"/Users/sabyrzhanolzhabay/Web-Dev/Arabakz/ArabaFrontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getAnalyticsInfoString = exports.getAnalyticsUserId = exports.promptAnalytics = exports.setAnalyticsConfig = exports.isPackageNameSafeForAnalytics = exports.analyticsPackageSafelist = void 0;\nconst core_1 = require(\"@angular-devkit/core\");\nconst crypto_1 = require(\"crypto\");\nconst color_1 = require(\"../utilities/color\");\nconst config_1 = require(\"../utilities/config\");\nconst environment_options_1 = require(\"../utilities/environment-options\");\nconst tty_1 = require(\"../utilities/tty\");\n/* eslint-disable no-console */\n/**\n * This is the ultimate safelist for checking if a package name is safe to report to analytics.\n */\nexports.analyticsPackageSafelist = [/^@angular\\//, /^@angular-devkit\\//, /^@nguniversal\\//, '@schematics/angular'];\nfunction isPackageNameSafeForAnalytics(name) {\n  return exports.analyticsPackageSafelist.some(pattern => {\n    if (typeof pattern == 'string') {\n      return pattern === name;\n    } else {\n      return pattern.test(name);\n    }\n  });\n}\nexports.isPackageNameSafeForAnalytics = isPackageNameSafeForAnalytics;\n/**\n * Set analytics settings. This does not work if the user is not inside a project.\n * @param global Which config to use. \"global\" for user-level, and \"local\" for project-level.\n * @param value Either a user ID, true to generate a new User ID, or false to disable analytics.\n */\nfunction setAnalyticsConfig(_x, _x2) {\n  return _setAnalyticsConfig.apply(this, arguments);\n}\nfunction _setAnalyticsConfig() {\n  _setAnalyticsConfig = _asyncToGenerator(function* (global, value) {\n    var _a;\n    var _b;\n    const level = global ? 'global' : 'local';\n    const workspace = yield (0, config_1.getWorkspace)(level);\n    if (!workspace) {\n      throw new Error(`Could not find ${level} workspace.`);\n    }\n    const cli = (_a = (_b = workspace.extensions)['cli']) !== null && _a !== void 0 ? _a : _b['cli'] = {};\n    if (!workspace || !core_1.json.isJsonObject(cli)) {\n      throw new Error(`Invalid config found at ${workspace.filePath}. CLI should be an object.`);\n    }\n    cli.analytics = value === true ? (0, crypto_1.randomUUID)() : value;\n    yield workspace.save();\n  });\n  return _setAnalyticsConfig.apply(this, arguments);\n}\nexports.setAnalyticsConfig = setAnalyticsConfig;\n/**\n * Prompt the user for usage gathering permission.\n * @param force Whether to ask regardless of whether or not the user is using an interactive shell.\n * @return Whether or not the user was shown a prompt.\n */\nfunction promptAnalytics(_x3, _x4) {\n  return _promptAnalytics.apply(this, arguments);\n}\nfunction _promptAnalytics() {\n  _promptAnalytics = _asyncToGenerator(function* (context, global, force = false) {\n    const level = global ? 'global' : 'local';\n    const workspace = yield (0, config_1.getWorkspace)(level);\n    if (!workspace) {\n      throw new Error(`Could not find a ${level} workspace. Are you in a project?`);\n    }\n    if (force || (0, tty_1.isTTY)()) {\n      const {\n        prompt\n      } = yield Promise.resolve().then(() => __importStar(require('inquirer')));\n      const answers = yield prompt([{\n        type: 'confirm',\n        name: 'analytics',\n        message: core_1.tags.stripIndents`\n           Would you like to share pseudonymous usage data about this project with the Angular Team\n           at Google under Google's Privacy Policy at https://policies.google.com/privacy. For more\n           details and how to change this setting, see https://angular.io/analytics.\n\n         `,\n        default: false\n      }]);\n      yield setAnalyticsConfig(global, answers.analytics);\n      if (answers.analytics) {\n        console.log('');\n        console.log(core_1.tags.stripIndent`\n         Thank you for sharing pseudonymous usage data. Should you change your mind, the following\n         command will disable this feature entirely:\n\n             ${color_1.colors.yellow(`ng analytics disable${global ? ' --global' : ''}`)}\n       `);\n        console.log('');\n      }\n      process.stderr.write(yield getAnalyticsInfoString(context));\n      return true;\n    }\n    return false;\n  });\n  return _promptAnalytics.apply(this, arguments);\n}\nexports.promptAnalytics = promptAnalytics;\n/**\n * Get the analytics user id.\n *\n * @returns\n * - `string` user id.\n * - `false` when disabled.\n * - `undefined` when not configured.\n */\nfunction getAnalyticsUserIdForLevel(_x5) {\n  return _getAnalyticsUserIdForLevel.apply(this, arguments);\n}\nfunction _getAnalyticsUserIdForLevel() {\n  _getAnalyticsUserIdForLevel = _asyncToGenerator(function* (level) {\n    var _a;\n    if (environment_options_1.analyticsDisabled) {\n      return false;\n    }\n    const workspace = yield (0, config_1.getWorkspace)(level);\n    const analyticsConfig = (_a = workspace === null || workspace === void 0 ? void 0 : workspace.getCli()) === null || _a === void 0 ? void 0 : _a['analytics'];\n    if (analyticsConfig === false) {\n      return false;\n    } else if (analyticsConfig === undefined || analyticsConfig === null) {\n      return undefined;\n    } else {\n      if (typeof analyticsConfig == 'string') {\n        return analyticsConfig;\n      } else if (typeof analyticsConfig == 'object' && typeof analyticsConfig['uid'] == 'string') {\n        return analyticsConfig['uid'];\n      }\n      return undefined;\n    }\n  });\n  return _getAnalyticsUserIdForLevel.apply(this, arguments);\n}\nfunction getAnalyticsUserId(_x6) {\n  return _getAnalyticsUserId.apply(this, arguments);\n}\nfunction _getAnalyticsUserId() {\n  _getAnalyticsUserId = _asyncToGenerator(function* (context, skipPrompt = false) {\n    const {\n      workspace\n    } = context;\n    // Global config takes precedence over local config only for the disabled check.\n    // IE:\n    // global: disabled & local: enabled = disabled\n    // global: id: 123 & local: id: 456 = 456\n    // check global\n    const globalConfig = yield getAnalyticsUserIdForLevel('global');\n    if (globalConfig === false) {\n      return undefined;\n    }\n    // Not disabled globally, check locally or not set globally and command is run outside of workspace example: `ng new`\n    if (workspace || globalConfig === undefined) {\n      const level = workspace ? 'local' : 'global';\n      let localOrGlobalConfig = yield getAnalyticsUserIdForLevel(level);\n      if (localOrGlobalConfig === undefined) {\n        if (!skipPrompt) {\n          // config is unset, prompt user.\n          // TODO: This should honor the `no-interactive` option.\n          // It is currently not an `ng` option but rather only an option for specific commands.\n          // The concept of `ng`-wide options are needed to cleanly handle this.\n          yield promptAnalytics(context, !workspace /** global */);\n          localOrGlobalConfig = yield getAnalyticsUserIdForLevel(level);\n        }\n      }\n      if (localOrGlobalConfig === false) {\n        return undefined;\n      } else if (typeof localOrGlobalConfig === 'string') {\n        return localOrGlobalConfig;\n      }\n    }\n    return globalConfig;\n  });\n  return _getAnalyticsUserId.apply(this, arguments);\n}\nexports.getAnalyticsUserId = getAnalyticsUserId;\nfunction analyticsConfigValueToHumanFormat(value) {\n  if (value === false) {\n    return 'disabled';\n  } else if (typeof value === 'string' || value === true) {\n    return 'enabled';\n  } else {\n    return 'not set';\n  }\n}\nfunction getAnalyticsInfoString(_x7) {\n  return _getAnalyticsInfoString.apply(this, arguments);\n}\nfunction _getAnalyticsInfoString() {\n  _getAnalyticsInfoString = _asyncToGenerator(function* (context) {\n    var _a, _b;\n    const analyticsInstance = yield getAnalyticsUserId(context, true /** skipPrompt */);\n    const {\n      globalConfiguration,\n      workspace: localWorkspace\n    } = context;\n    const globalSetting = (_a = globalConfiguration === null || globalConfiguration === void 0 ? void 0 : globalConfiguration.getCli()) === null || _a === void 0 ? void 0 : _a['analytics'];\n    const localSetting = (_b = localWorkspace === null || localWorkspace === void 0 ? void 0 : localWorkspace.getCli()) === null || _b === void 0 ? void 0 : _b['analytics'];\n    return core_1.tags.stripIndents`\n     Global setting: ${analyticsConfigValueToHumanFormat(globalSetting)}\n     Local setting: ${localWorkspace ? analyticsConfigValueToHumanFormat(localSetting) : 'No local workspace configuration file.'}\n     Effective status: ${analyticsInstance ? 'enabled' : 'disabled'}\n   ` + '\\n';\n  });\n  return _getAnalyticsInfoString.apply(this, arguments);\n}\nexports.getAnalyticsInfoString = getAnalyticsInfoString;","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","exports","getAnalyticsInfoString","getAnalyticsUserId","promptAnalytics","setAnalyticsConfig","isPackageNameSafeForAnalytics","analyticsPackageSafelist","core_1","require","crypto_1","color_1","config_1","environment_options_1","tty_1","name","some","pattern","test","global","_a","_b","level","workspace","getWorkspace","Error","cli","extensions","json","isJsonObject","filePath","analytics","randomUUID","save","context","force","isTTY","prompt","Promise","resolve","then","answers","type","message","tags","stripIndents","default","console","log","stripIndent","colors","yellow","process","stderr","write","getAnalyticsUserIdForLevel","analyticsDisabled","analyticsConfig","getCli","skipPrompt","globalConfig","localOrGlobalConfig","analyticsConfigValueToHumanFormat","analyticsInstance","globalConfiguration","localWorkspace","globalSetting","localSetting"],"sources":["/Users/sabyrzhanolzhabay/Web-Dev/Arabakz/ArabaFrontend/node_modules/@angular/cli/src/analytics/analytics.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getAnalyticsInfoString = exports.getAnalyticsUserId = exports.promptAnalytics = exports.setAnalyticsConfig = exports.isPackageNameSafeForAnalytics = exports.analyticsPackageSafelist = void 0;\nconst core_1 = require(\"@angular-devkit/core\");\nconst crypto_1 = require(\"crypto\");\nconst color_1 = require(\"../utilities/color\");\nconst config_1 = require(\"../utilities/config\");\nconst environment_options_1 = require(\"../utilities/environment-options\");\nconst tty_1 = require(\"../utilities/tty\");\n/* eslint-disable no-console */\n/**\n * This is the ultimate safelist for checking if a package name is safe to report to analytics.\n */\nexports.analyticsPackageSafelist = [\n    /^@angular\\//,\n    /^@angular-devkit\\//,\n    /^@nguniversal\\//,\n    '@schematics/angular',\n];\nfunction isPackageNameSafeForAnalytics(name) {\n    return exports.analyticsPackageSafelist.some((pattern) => {\n        if (typeof pattern == 'string') {\n            return pattern === name;\n        }\n        else {\n            return pattern.test(name);\n        }\n    });\n}\nexports.isPackageNameSafeForAnalytics = isPackageNameSafeForAnalytics;\n/**\n * Set analytics settings. This does not work if the user is not inside a project.\n * @param global Which config to use. \"global\" for user-level, and \"local\" for project-level.\n * @param value Either a user ID, true to generate a new User ID, or false to disable analytics.\n */\nasync function setAnalyticsConfig(global, value) {\n    var _a;\n    var _b;\n    const level = global ? 'global' : 'local';\n    const workspace = await (0, config_1.getWorkspace)(level);\n    if (!workspace) {\n        throw new Error(`Could not find ${level} workspace.`);\n    }\n    const cli = ((_a = (_b = workspace.extensions)['cli']) !== null && _a !== void 0 ? _a : (_b['cli'] = {}));\n    if (!workspace || !core_1.json.isJsonObject(cli)) {\n        throw new Error(`Invalid config found at ${workspace.filePath}. CLI should be an object.`);\n    }\n    cli.analytics = value === true ? (0, crypto_1.randomUUID)() : value;\n    await workspace.save();\n}\nexports.setAnalyticsConfig = setAnalyticsConfig;\n/**\n * Prompt the user for usage gathering permission.\n * @param force Whether to ask regardless of whether or not the user is using an interactive shell.\n * @return Whether or not the user was shown a prompt.\n */\nasync function promptAnalytics(context, global, force = false) {\n    const level = global ? 'global' : 'local';\n    const workspace = await (0, config_1.getWorkspace)(level);\n    if (!workspace) {\n        throw new Error(`Could not find a ${level} workspace. Are you in a project?`);\n    }\n    if (force || (0, tty_1.isTTY)()) {\n        const { prompt } = await Promise.resolve().then(() => __importStar(require('inquirer')));\n        const answers = await prompt([\n            {\n                type: 'confirm',\n                name: 'analytics',\n                message: core_1.tags.stripIndents `\n           Would you like to share pseudonymous usage data about this project with the Angular Team\n           at Google under Google's Privacy Policy at https://policies.google.com/privacy. For more\n           details and how to change this setting, see https://angular.io/analytics.\n\n         `,\n                default: false,\n            },\n        ]);\n        await setAnalyticsConfig(global, answers.analytics);\n        if (answers.analytics) {\n            console.log('');\n            console.log(core_1.tags.stripIndent `\n         Thank you for sharing pseudonymous usage data. Should you change your mind, the following\n         command will disable this feature entirely:\n\n             ${color_1.colors.yellow(`ng analytics disable${global ? ' --global' : ''}`)}\n       `);\n            console.log('');\n        }\n        process.stderr.write(await getAnalyticsInfoString(context));\n        return true;\n    }\n    return false;\n}\nexports.promptAnalytics = promptAnalytics;\n/**\n * Get the analytics user id.\n *\n * @returns\n * - `string` user id.\n * - `false` when disabled.\n * - `undefined` when not configured.\n */\nasync function getAnalyticsUserIdForLevel(level) {\n    var _a;\n    if (environment_options_1.analyticsDisabled) {\n        return false;\n    }\n    const workspace = await (0, config_1.getWorkspace)(level);\n    const analyticsConfig = (_a = workspace === null || workspace === void 0 ? void 0 : workspace.getCli()) === null || _a === void 0 ? void 0 : _a['analytics'];\n    if (analyticsConfig === false) {\n        return false;\n    }\n    else if (analyticsConfig === undefined || analyticsConfig === null) {\n        return undefined;\n    }\n    else {\n        if (typeof analyticsConfig == 'string') {\n            return analyticsConfig;\n        }\n        else if (typeof analyticsConfig == 'object' && typeof analyticsConfig['uid'] == 'string') {\n            return analyticsConfig['uid'];\n        }\n        return undefined;\n    }\n}\nasync function getAnalyticsUserId(context, skipPrompt = false) {\n    const { workspace } = context;\n    // Global config takes precedence over local config only for the disabled check.\n    // IE:\n    // global: disabled & local: enabled = disabled\n    // global: id: 123 & local: id: 456 = 456\n    // check global\n    const globalConfig = await getAnalyticsUserIdForLevel('global');\n    if (globalConfig === false) {\n        return undefined;\n    }\n    // Not disabled globally, check locally or not set globally and command is run outside of workspace example: `ng new`\n    if (workspace || globalConfig === undefined) {\n        const level = workspace ? 'local' : 'global';\n        let localOrGlobalConfig = await getAnalyticsUserIdForLevel(level);\n        if (localOrGlobalConfig === undefined) {\n            if (!skipPrompt) {\n                // config is unset, prompt user.\n                // TODO: This should honor the `no-interactive` option.\n                // It is currently not an `ng` option but rather only an option for specific commands.\n                // The concept of `ng`-wide options are needed to cleanly handle this.\n                await promptAnalytics(context, !workspace /** global */);\n                localOrGlobalConfig = await getAnalyticsUserIdForLevel(level);\n            }\n        }\n        if (localOrGlobalConfig === false) {\n            return undefined;\n        }\n        else if (typeof localOrGlobalConfig === 'string') {\n            return localOrGlobalConfig;\n        }\n    }\n    return globalConfig;\n}\nexports.getAnalyticsUserId = getAnalyticsUserId;\nfunction analyticsConfigValueToHumanFormat(value) {\n    if (value === false) {\n        return 'disabled';\n    }\n    else if (typeof value === 'string' || value === true) {\n        return 'enabled';\n    }\n    else {\n        return 'not set';\n    }\n}\nasync function getAnalyticsInfoString(context) {\n    var _a, _b;\n    const analyticsInstance = await getAnalyticsUserId(context, true /** skipPrompt */);\n    const { globalConfiguration, workspace: localWorkspace } = context;\n    const globalSetting = (_a = globalConfiguration === null || globalConfiguration === void 0 ? void 0 : globalConfiguration.getCli()) === null || _a === void 0 ? void 0 : _a['analytics'];\n    const localSetting = (_b = localWorkspace === null || localWorkspace === void 0 ? void 0 : localWorkspace.getCli()) === null || _b === void 0 ? void 0 : _b['analytics'];\n    return (core_1.tags.stripIndents `\n     Global setting: ${analyticsConfigValueToHumanFormat(globalSetting)}\n     Local setting: ${localWorkspace\n        ? analyticsConfigValueToHumanFormat(localSetting)\n        : 'No local workspace configuration file.'}\n     Effective status: ${analyticsInstance ? 'enabled' : 'disabled'}\n   ` + '\\n');\n}\nexports.getAnalyticsInfoString = getAnalyticsInfoString;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}