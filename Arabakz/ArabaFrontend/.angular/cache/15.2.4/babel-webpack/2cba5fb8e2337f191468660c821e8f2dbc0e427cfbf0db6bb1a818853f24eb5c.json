{"ast":null,"code":"'use strict';\n\nconst _ = {\n  isPlainObject: require('lodash/isPlainObject'),\n  get: require('lodash/get'),\n  set: require('lodash/set')\n};\nconst {\n  defer,\n  empty,\n  from,\n  of\n} = require('rxjs');\nconst {\n  concatMap,\n  filter,\n  publish,\n  reduce\n} = require('rxjs/operators');\nconst runAsync = require('run-async');\nconst utils = require('../utils/utils');\nconst Base = require('./baseUI');\n\n/**\n * Base interface class other can inherits from\n */\n\nclass PromptUI extends Base {\n  constructor(prompts, opt) {\n    super(opt);\n    this.prompts = prompts;\n  }\n  run(questions, answers) {\n    // Keep global reference to the answers\n    if (_.isPlainObject(answers)) {\n      this.answers = {\n        ...answers\n      };\n    } else {\n      this.answers = {};\n    }\n\n    // Make sure questions is an array.\n    if (_.isPlainObject(questions)) {\n      // It's either an object of questions or a single question\n      questions = Object.values(questions).every(v => _.isPlainObject(v) && v.name === undefined) ? Object.entries(questions).map(([name, question]) => ({\n        name,\n        ...question\n      })) : [questions];\n    }\n\n    // Create an observable, unless we received one as parameter.\n    // Note: As this is a public interface, we cannot do an instanceof check as we won't\n    // be using the exact same object in memory.\n    const obs = Array.isArray(questions) ? from(questions) : questions;\n    this.process = obs.pipe(concatMap(this.processQuestion.bind(this)), publish() // Creates a hot Observable. It prevents duplicating prompts.\n    );\n\n    this.process.connect();\n    return this.process.pipe(reduce((answers, answer) => {\n      _.set(answers, answer.name, answer.answer);\n      return answers;\n    }, this.answers)).toPromise(Promise).then(this.onCompletion.bind(this), this.onError.bind(this));\n  }\n\n  /**\n   * Once all prompt are over\n   */\n\n  onCompletion() {\n    this.close();\n    return this.answers;\n  }\n  onError(error) {\n    this.close();\n    return Promise.reject(error);\n  }\n  processQuestion(question) {\n    question = {\n      ...question\n    };\n    return defer(() => {\n      const obs = of(question);\n      return obs.pipe(concatMap(this.setDefaultType.bind(this)), concatMap(this.filterIfRunnable.bind(this)), concatMap(() => utils.fetchAsyncQuestionProperty(question, 'message', this.answers)), concatMap(() => utils.fetchAsyncQuestionProperty(question, 'default', this.answers)), concatMap(() => utils.fetchAsyncQuestionProperty(question, 'choices', this.answers)), concatMap(this.fetchAnswer.bind(this)));\n    });\n  }\n  fetchAnswer(question) {\n    const Prompt = this.prompts[question.type];\n    this.activePrompt = new Prompt(question, this.rl, this.answers);\n    return defer(() => from(this.activePrompt.run().then(answer => ({\n      name: question.name,\n      answer\n    }))));\n  }\n  setDefaultType(question) {\n    // Default type to input\n    if (!this.prompts[question.type]) {\n      question.type = 'input';\n    }\n    return defer(() => of(question));\n  }\n  filterIfRunnable(question) {\n    if (question.askAnswered !== true && _.get(this.answers, question.name) !== undefined) {\n      return empty();\n    }\n    if (question.when === false) {\n      return empty();\n    }\n    if (typeof question.when !== 'function') {\n      return of(question);\n    }\n    const {\n      answers\n    } = this;\n    return defer(() => from(runAsync(question.when)(answers).then(shouldRun => {\n      if (shouldRun) {\n        return question;\n      }\n    })).pipe(filter(val => val != null)));\n  }\n}\nmodule.exports = PromptUI;","map":{"version":3,"names":["_","isPlainObject","require","get","set","defer","empty","from","of","concatMap","filter","publish","reduce","runAsync","utils","Base","PromptUI","constructor","prompts","opt","run","questions","answers","Object","values","every","v","name","undefined","entries","map","question","obs","Array","isArray","process","pipe","processQuestion","bind","connect","answer","toPromise","Promise","then","onCompletion","onError","close","error","reject","setDefaultType","filterIfRunnable","fetchAsyncQuestionProperty","fetchAnswer","Prompt","type","activePrompt","rl","askAnswered","when","shouldRun","val","module","exports"],"sources":["/Users/sabyrzhanolzhabay/Web-Dev/Arabakz/ArabaFrontend/node_modules/inquirer/lib/ui/prompt.js"],"sourcesContent":["'use strict';\nconst _ = {\n  isPlainObject: require('lodash/isPlainObject'),\n  get: require('lodash/get'),\n  set: require('lodash/set'),\n};\nconst { defer, empty, from, of } = require('rxjs');\nconst { concatMap, filter, publish, reduce } = require('rxjs/operators');\nconst runAsync = require('run-async');\nconst utils = require('../utils/utils');\nconst Base = require('./baseUI');\n\n/**\n * Base interface class other can inherits from\n */\n\nclass PromptUI extends Base {\n  constructor(prompts, opt) {\n    super(opt);\n    this.prompts = prompts;\n  }\n\n  run(questions, answers) {\n    // Keep global reference to the answers\n    if (_.isPlainObject(answers)) {\n      this.answers = { ...answers };\n    } else {\n      this.answers = {};\n    }\n\n    // Make sure questions is an array.\n    if (_.isPlainObject(questions)) {\n      // It's either an object of questions or a single question\n      questions = Object.values(questions).every(\n        (v) => _.isPlainObject(v) && v.name === undefined\n      )\n        ? Object.entries(questions).map(([name, question]) => ({ name, ...question }))\n        : [questions];\n    }\n\n    // Create an observable, unless we received one as parameter.\n    // Note: As this is a public interface, we cannot do an instanceof check as we won't\n    // be using the exact same object in memory.\n    const obs = Array.isArray(questions) ? from(questions) : questions;\n\n    this.process = obs.pipe(\n      concatMap(this.processQuestion.bind(this)),\n      publish() // Creates a hot Observable. It prevents duplicating prompts.\n    );\n\n    this.process.connect();\n\n    return this.process\n      .pipe(\n        reduce((answers, answer) => {\n          _.set(answers, answer.name, answer.answer);\n          return answers;\n        }, this.answers)\n      )\n      .toPromise(Promise)\n      .then(this.onCompletion.bind(this), this.onError.bind(this));\n  }\n\n  /**\n   * Once all prompt are over\n   */\n\n  onCompletion() {\n    this.close();\n\n    return this.answers;\n  }\n\n  onError(error) {\n    this.close();\n    return Promise.reject(error);\n  }\n\n  processQuestion(question) {\n    question = { ...question };\n    return defer(() => {\n      const obs = of(question);\n\n      return obs.pipe(\n        concatMap(this.setDefaultType.bind(this)),\n        concatMap(this.filterIfRunnable.bind(this)),\n        concatMap(() =>\n          utils.fetchAsyncQuestionProperty(question, 'message', this.answers)\n        ),\n        concatMap(() =>\n          utils.fetchAsyncQuestionProperty(question, 'default', this.answers)\n        ),\n        concatMap(() =>\n          utils.fetchAsyncQuestionProperty(question, 'choices', this.answers)\n        ),\n        concatMap(this.fetchAnswer.bind(this))\n      );\n    });\n  }\n\n  fetchAnswer(question) {\n    const Prompt = this.prompts[question.type];\n    this.activePrompt = new Prompt(question, this.rl, this.answers);\n    return defer(() =>\n      from(this.activePrompt.run().then((answer) => ({ name: question.name, answer })))\n    );\n  }\n\n  setDefaultType(question) {\n    // Default type to input\n    if (!this.prompts[question.type]) {\n      question.type = 'input';\n    }\n\n    return defer(() => of(question));\n  }\n\n  filterIfRunnable(question) {\n    if (\n      question.askAnswered !== true &&\n      _.get(this.answers, question.name) !== undefined\n    ) {\n      return empty();\n    }\n\n    if (question.when === false) {\n      return empty();\n    }\n\n    if (typeof question.when !== 'function') {\n      return of(question);\n    }\n\n    const { answers } = this;\n    return defer(() =>\n      from(\n        runAsync(question.when)(answers).then((shouldRun) => {\n          if (shouldRun) {\n            return question;\n          }\n        })\n      ).pipe(filter((val) => val != null))\n    );\n  }\n}\n\nmodule.exports = PromptUI;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}