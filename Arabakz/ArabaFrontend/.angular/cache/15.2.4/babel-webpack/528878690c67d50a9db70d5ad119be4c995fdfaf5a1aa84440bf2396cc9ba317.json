{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nconst base_url = \"http://127.0.0.1:8000\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Authorization': 'JWT ' + localStorage.getItem('token')\n      })\n    };\n  }\n  login(user) {\n    return this.http.post(`${base_url}/login/`, user);\n  }\n  register(user) {\n    return this.http.post(`${base_url}/registration/`, user).subscribe(resp => {\n      this.router.navigate(['../login']);\n    }, error => {});\n  }\n  logout() {\n    localStorage.removeItem('token');\n  }\n  getUser() {\n    return this.http.get(`${base_url}/user/`, this.httpOptions);\n  }\n  getToken() {\n    // Получить токен из localStorage\n    return localStorage.getItem('token');\n  }\n  isLoggedIn() {\n    // Проверить наличие токена в localStorage\n    const token = this.getToken();\n    return token != null;\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAoBA,WAAW,QAAO,sBAAsB;;;;AAQ5D,MAAMC,QAAQ,GAAG,uBAAuB;AAKxC,OAAM,MAAOC,WAAW;EAMtBC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,SAAI,GAAJD,IAAI;IAAsB,WAAM,GAANC,MAAM;IAL5C,gBAAW,GAAG;MACpBC,OAAO,EAAE,IAAIN,WAAW,CAAC;QACvB,eAAe,EAAE,MAAM,GAAGO,YAAY,CAACC,OAAO,CAAC,OAAO;OACvD;KACF;EAC+D;EAEhEC,KAAK,CAACC,IAAU;IACd,OAAO,IAAI,CAACN,IAAI,CAACO,IAAI,CAAiB,GAAGV,QAAQ,SAAS,EAAES,IAAI,CAAC;EACnE;EAEAE,QAAQ,CAACF,IAAa;IACpB,OAAO,IAAI,CAACN,IAAI,CAACO,IAAI,CAAC,GAAGV,QAAQ,gBAAgB,EAAES,IAAI,CAAC,CAACG,SAAS,CAACC,IAAI,IAAE;MACvE,IAAI,CAACT,MAAM,CAACU,QAAQ,CAAC,CAAC,UAAU,CAAC,CAAC;IACpC,CAAC,EAAEC,KAAK,IAAG,CACX,CAAC,CAAC;EACJ;EACAC,MAAM;IACJV,YAAY,CAACW,UAAU,CAAC,OAAO,CAAC;EAClC;EAEAC,OAAO;IACL,OAAO,IAAI,CAACf,IAAI,CAACgB,GAAG,CAAQ,GAAGnB,QAAQ,QAAQ,EAAE,IAAI,CAACoB,WAAW,CAAC;EACpE;EACAC,QAAQ;IACN;IACA,OAAOf,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EACtC;EAEAe,UAAU;IACR;IACA,MAAMC,KAAK,GAAG,IAAI,CAACF,QAAQ,EAAE;IAC7B,OAAOE,KAAK,IAAI,IAAI;EACtB;;AAlCWtB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAuB,SAAXvB,WAAW;EAAAwB,YAFV;AAAM","names":["HttpHeaders","base_url","AuthService","constructor","http","router","headers","localStorage","getItem","login","user","post","register","subscribe","resp","navigate","error","logout","removeItem","getUser","get","httpOptions","getToken","isLoggedIn","token","factory","providedIn"],"sourceRoot":"","sources":["/Users/sabyrzhanolzhabay/Web-Dev/Arabakz/ArabaFrontend/src/app/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {HttpClient, HttpHeaders} from \"@angular/common/http\";\nimport {Observable} from \"rxjs\";\nimport {User}  from \"./authorization/authorization.component\";\nimport {User as User2}  from \"./account/account.component\";\nimport {NewUser} from \"./registration/registration.component\";\nimport {Router} from \"@angular/router\";\nimport {Product} from \"./models\";\n\nconst base_url = \"http://127.0.0.1:8000\"\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private httpOptions = {\n    headers: new HttpHeaders({\n      'Authorization': 'JWT ' + localStorage.getItem('token')\n    })\n  };\n  constructor(private http: HttpClient, private router: Router) { }\n\n  login(user: User): Observable<{token: string}>{\n    return this.http.post<{token:string}>(`${base_url}/login/`, user)\n  }\n\n  register(user: NewUser){\n    return this.http.post(`${base_url}/registration/`, user).subscribe(resp=>{\n      this.router.navigate(['../login'])\n    }, error => {\n    })\n  }\n  logout(){\n    localStorage.removeItem('token');\n  }\n\n  getUser(): Observable<User2>{\n    return this.http.get<User2>(`${base_url}/user/`, this.httpOptions)\n  }\n  getToken() {\n    // Получить токен из localStorage\n    return localStorage.getItem('token');\n  }\n\n  isLoggedIn() {\n    // Проверить наличие токена в localStorage\n    const token = this.getToken();\n    return token != null;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}