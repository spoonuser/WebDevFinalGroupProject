{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.partition = exports.merge = exports.branch = exports.empty = void 0;\nconst exception_1 = require(\"../exception/exception\");\nconst host_tree_1 = require(\"./host-tree\");\nconst interface_1 = require(\"./interface\");\nfunction empty() {\n  return new host_tree_1.HostTree();\n}\nexports.empty = empty;\nfunction branch(tree) {\n  return tree.branch();\n}\nexports.branch = branch;\nfunction merge(tree, other, strategy = interface_1.MergeStrategy.Default) {\n  tree.merge(other, strategy);\n  return tree;\n}\nexports.merge = merge;\nfunction partition(tree, predicate) {\n  if (tree instanceof host_tree_1.HostTree) {\n    return [new host_tree_1.FilterHostTree(tree, predicate), new host_tree_1.FilterHostTree(tree, (path, entry) => !predicate(path, entry))];\n  } else {\n    throw new exception_1.SchematicsException('Tree type is not supported.');\n  }\n}\nexports.partition = partition;","map":{"version":3,"names":["Object","defineProperty","exports","value","partition","merge","branch","empty","exception_1","require","host_tree_1","interface_1","HostTree","tree","other","strategy","MergeStrategy","Default","predicate","FilterHostTree","path","entry","SchematicsException"],"sources":["/Users/sabyrzhanolzhabay/Web-Dev/Arabakz/ArabaFrontend/node_modules/@angular-devkit/schematics/src/tree/static.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.partition = exports.merge = exports.branch = exports.empty = void 0;\nconst exception_1 = require(\"../exception/exception\");\nconst host_tree_1 = require(\"./host-tree\");\nconst interface_1 = require(\"./interface\");\nfunction empty() {\n    return new host_tree_1.HostTree();\n}\nexports.empty = empty;\nfunction branch(tree) {\n    return tree.branch();\n}\nexports.branch = branch;\nfunction merge(tree, other, strategy = interface_1.MergeStrategy.Default) {\n    tree.merge(other, strategy);\n    return tree;\n}\nexports.merge = merge;\nfunction partition(tree, predicate) {\n    if (tree instanceof host_tree_1.HostTree) {\n        return [\n            new host_tree_1.FilterHostTree(tree, predicate),\n            new host_tree_1.FilterHostTree(tree, (path, entry) => !predicate(path, entry)),\n        ];\n    }\n    else {\n        throw new exception_1.SchematicsException('Tree type is not supported.');\n    }\n}\nexports.partition = partition;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,SAAS,GAAGF,OAAO,CAACG,KAAK,GAAGH,OAAO,CAACI,MAAM,GAAGJ,OAAO,CAACK,KAAK,GAAG,KAAK,CAAC;AAC3E,MAAMC,WAAW,GAAGC,OAAO,CAAC,wBAAwB,CAAC;AACrD,MAAMC,WAAW,GAAGD,OAAO,CAAC,aAAa,CAAC;AAC1C,MAAME,WAAW,GAAGF,OAAO,CAAC,aAAa,CAAC;AAC1C,SAASF,KAAK,GAAG;EACb,OAAO,IAAIG,WAAW,CAACE,QAAQ,EAAE;AACrC;AACAV,OAAO,CAACK,KAAK,GAAGA,KAAK;AACrB,SAASD,MAAM,CAACO,IAAI,EAAE;EAClB,OAAOA,IAAI,CAACP,MAAM,EAAE;AACxB;AACAJ,OAAO,CAACI,MAAM,GAAGA,MAAM;AACvB,SAASD,KAAK,CAACQ,IAAI,EAAEC,KAAK,EAAEC,QAAQ,GAAGJ,WAAW,CAACK,aAAa,CAACC,OAAO,EAAE;EACtEJ,IAAI,CAACR,KAAK,CAACS,KAAK,EAAEC,QAAQ,CAAC;EAC3B,OAAOF,IAAI;AACf;AACAX,OAAO,CAACG,KAAK,GAAGA,KAAK;AACrB,SAASD,SAAS,CAACS,IAAI,EAAEK,SAAS,EAAE;EAChC,IAAIL,IAAI,YAAYH,WAAW,CAACE,QAAQ,EAAE;IACtC,OAAO,CACH,IAAIF,WAAW,CAACS,cAAc,CAACN,IAAI,EAAEK,SAAS,CAAC,EAC/C,IAAIR,WAAW,CAACS,cAAc,CAACN,IAAI,EAAE,CAACO,IAAI,EAAEC,KAAK,KAAK,CAACH,SAAS,CAACE,IAAI,EAAEC,KAAK,CAAC,CAAC,CACjF;EACL,CAAC,MACI;IACD,MAAM,IAAIb,WAAW,CAACc,mBAAmB,CAAC,6BAA6B,CAAC;EAC5E;AACJ;AACApB,OAAO,CAACE,SAAS,GAAGA,SAAS"},"metadata":{},"sourceType":"script","externalDependencies":[]}