{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport { createScanner } from './scanner';\nexport function format(documentText, range, options) {\n  let initialIndentLevel;\n  let formatText;\n  let formatTextStart;\n  let rangeStart;\n  let rangeEnd;\n  if (range) {\n    rangeStart = range.offset;\n    rangeEnd = rangeStart + range.length;\n    formatTextStart = rangeStart;\n    while (formatTextStart > 0 && !isEOL(documentText, formatTextStart - 1)) {\n      formatTextStart--;\n    }\n    let endOffset = rangeEnd;\n    while (endOffset < documentText.length && !isEOL(documentText, endOffset)) {\n      endOffset++;\n    }\n    formatText = documentText.substring(formatTextStart, endOffset);\n    initialIndentLevel = computeIndentLevel(formatText, options);\n  } else {\n    formatText = documentText;\n    initialIndentLevel = 0;\n    formatTextStart = 0;\n    rangeStart = 0;\n    rangeEnd = documentText.length;\n  }\n  const eol = getEOL(options, documentText);\n  let numberLineBreaks = 0;\n  let indentLevel = 0;\n  let indentValue;\n  if (options.insertSpaces) {\n    indentValue = repeat(' ', options.tabSize || 4);\n  } else {\n    indentValue = '\\t';\n  }\n  let scanner = createScanner(formatText, false);\n  let hasError = false;\n  function newLinesAndIndent() {\n    if (numberLineBreaks > 1) {\n      return repeat(eol, numberLineBreaks) + repeat(indentValue, initialIndentLevel + indentLevel);\n    } else {\n      return eol + repeat(indentValue, initialIndentLevel + indentLevel);\n    }\n  }\n  function scanNext() {\n    let token = scanner.scan();\n    numberLineBreaks = 0;\n    while (token === 15 /* SyntaxKind.Trivia */ || token === 14 /* SyntaxKind.LineBreakTrivia */) {\n      if (token === 14 /* SyntaxKind.LineBreakTrivia */ && options.keepLines) {\n        numberLineBreaks += 1;\n      } else if (token === 14 /* SyntaxKind.LineBreakTrivia */) {\n        numberLineBreaks = 1;\n      }\n      token = scanner.scan();\n    }\n    hasError = token === 16 /* SyntaxKind.Unknown */ || scanner.getTokenError() !== 0 /* ScanError.None */;\n    return token;\n  }\n  const editOperations = [];\n  function addEdit(text, startOffset, endOffset) {\n    if (!hasError && (!range || startOffset < rangeEnd && endOffset > rangeStart) && documentText.substring(startOffset, endOffset) !== text) {\n      editOperations.push({\n        offset: startOffset,\n        length: endOffset - startOffset,\n        content: text\n      });\n    }\n  }\n  let firstToken = scanNext();\n  if (options.keepLines && numberLineBreaks > 0) {\n    addEdit(repeat(eol, numberLineBreaks), 0, 0);\n  }\n  if (firstToken !== 17 /* SyntaxKind.EOF */) {\n    let firstTokenStart = scanner.getTokenOffset() + formatTextStart;\n    let initialIndent = repeat(indentValue, initialIndentLevel);\n    addEdit(initialIndent, formatTextStart, firstTokenStart);\n  }\n  while (firstToken !== 17 /* SyntaxKind.EOF */) {\n    let firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;\n    let secondToken = scanNext();\n    let replaceContent = '';\n    let needsLineBreak = false;\n    while (numberLineBreaks === 0 && (secondToken === 12 /* SyntaxKind.LineCommentTrivia */ || secondToken === 13 /* SyntaxKind.BlockCommentTrivia */)) {\n      let commentTokenStart = scanner.getTokenOffset() + formatTextStart;\n      addEdit(' ', firstTokenEnd, commentTokenStart);\n      firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;\n      needsLineBreak = secondToken === 12 /* SyntaxKind.LineCommentTrivia */;\n      replaceContent = needsLineBreak ? newLinesAndIndent() : '';\n      secondToken = scanNext();\n    }\n    if (secondToken === 2 /* SyntaxKind.CloseBraceToken */) {\n      if (firstToken !== 1 /* SyntaxKind.OpenBraceToken */) {\n        indentLevel--;\n      }\n      ;\n      if (options.keepLines && numberLineBreaks > 0 || !options.keepLines && firstToken !== 1 /* SyntaxKind.OpenBraceToken */) {\n        replaceContent = newLinesAndIndent();\n      } else if (options.keepLines) {\n        replaceContent = ' ';\n      }\n    } else if (secondToken === 4 /* SyntaxKind.CloseBracketToken */) {\n      if (firstToken !== 3 /* SyntaxKind.OpenBracketToken */) {\n        indentLevel--;\n      }\n      ;\n      if (options.keepLines && numberLineBreaks > 0 || !options.keepLines && firstToken !== 3 /* SyntaxKind.OpenBracketToken */) {\n        replaceContent = newLinesAndIndent();\n      } else if (options.keepLines) {\n        replaceContent = ' ';\n      }\n    } else {\n      switch (firstToken) {\n        case 3 /* SyntaxKind.OpenBracketToken */:\n        case 1 /* SyntaxKind.OpenBraceToken */:\n          indentLevel++;\n          if (options.keepLines && numberLineBreaks > 0 || !options.keepLines) {\n            replaceContent = newLinesAndIndent();\n          } else {\n            replaceContent = ' ';\n          }\n          break;\n        case 5 /* SyntaxKind.CommaToken */:\n          if (options.keepLines && numberLineBreaks > 0 || !options.keepLines) {\n            replaceContent = newLinesAndIndent();\n          } else {\n            replaceContent = ' ';\n          }\n          break;\n        case 12 /* SyntaxKind.LineCommentTrivia */:\n          replaceContent = newLinesAndIndent();\n          break;\n        case 13 /* SyntaxKind.BlockCommentTrivia */:\n          if (numberLineBreaks > 0) {\n            replaceContent = newLinesAndIndent();\n          } else if (!needsLineBreak) {\n            replaceContent = ' ';\n          }\n          break;\n        case 6 /* SyntaxKind.ColonToken */:\n          if (options.keepLines && numberLineBreaks > 0) {\n            replaceContent = newLinesAndIndent();\n          } else if (!needsLineBreak) {\n            replaceContent = ' ';\n          }\n          break;\n        case 10 /* SyntaxKind.StringLiteral */:\n          if (options.keepLines && numberLineBreaks > 0) {\n            replaceContent = newLinesAndIndent();\n          } else if (secondToken === 6 /* SyntaxKind.ColonToken */ && !needsLineBreak) {\n            replaceContent = '';\n          }\n          break;\n        case 7 /* SyntaxKind.NullKeyword */:\n        case 8 /* SyntaxKind.TrueKeyword */:\n        case 9 /* SyntaxKind.FalseKeyword */:\n        case 11 /* SyntaxKind.NumericLiteral */:\n        case 2 /* SyntaxKind.CloseBraceToken */:\n        case 4 /* SyntaxKind.CloseBracketToken */:\n          if (options.keepLines && numberLineBreaks > 0) {\n            replaceContent = newLinesAndIndent();\n          } else {\n            if ((secondToken === 12 /* SyntaxKind.LineCommentTrivia */ || secondToken === 13 /* SyntaxKind.BlockCommentTrivia */) && !needsLineBreak) {\n              replaceContent = ' ';\n            } else if (secondToken !== 5 /* SyntaxKind.CommaToken */ && secondToken !== 17 /* SyntaxKind.EOF */) {\n              hasError = true;\n            }\n          }\n          break;\n        case 16 /* SyntaxKind.Unknown */:\n          hasError = true;\n          break;\n      }\n      if (numberLineBreaks > 0 && (secondToken === 12 /* SyntaxKind.LineCommentTrivia */ || secondToken === 13 /* SyntaxKind.BlockCommentTrivia */)) {\n        replaceContent = newLinesAndIndent();\n      }\n    }\n    if (secondToken === 17 /* SyntaxKind.EOF */) {\n      if (options.keepLines && numberLineBreaks > 0) {\n        replaceContent = newLinesAndIndent();\n      } else {\n        replaceContent = options.insertFinalNewline ? eol : '';\n      }\n    }\n    const secondTokenStart = scanner.getTokenOffset() + formatTextStart;\n    addEdit(replaceContent, firstTokenEnd, secondTokenStart);\n    firstToken = secondToken;\n  }\n  return editOperations;\n}\nfunction repeat(s, count) {\n  let result = '';\n  for (let i = 0; i < count; i++) {\n    result += s;\n  }\n  return result;\n}\nfunction computeIndentLevel(content, options) {\n  let i = 0;\n  let nChars = 0;\n  const tabSize = options.tabSize || 4;\n  while (i < content.length) {\n    let ch = content.charAt(i);\n    if (ch === ' ') {\n      nChars++;\n    } else if (ch === '\\t') {\n      nChars += tabSize;\n    } else {\n      break;\n    }\n    i++;\n  }\n  return Math.floor(nChars / tabSize);\n}\nfunction getEOL(options, text) {\n  for (let i = 0; i < text.length; i++) {\n    const ch = text.charAt(i);\n    if (ch === '\\r') {\n      if (i + 1 < text.length && text.charAt(i + 1) === '\\n') {\n        return '\\r\\n';\n      }\n      return '\\r';\n    } else if (ch === '\\n') {\n      return '\\n';\n    }\n  }\n  return options && options.eol || '\\n';\n}\nexport function isEOL(text, offset) {\n  return '\\r\\n'.indexOf(text.charAt(offset)) !== -1;\n}","map":{"version":3,"names":["createScanner","format","documentText","range","options","initialIndentLevel","formatText","formatTextStart","rangeStart","rangeEnd","offset","length","isEOL","endOffset","substring","computeIndentLevel","eol","getEOL","numberLineBreaks","indentLevel","indentValue","insertSpaces","repeat","tabSize","scanner","hasError","newLinesAndIndent","scanNext","token","scan","keepLines","getTokenError","editOperations","addEdit","text","startOffset","push","content","firstToken","firstTokenStart","getTokenOffset","initialIndent","firstTokenEnd","getTokenLength","secondToken","replaceContent","needsLineBreak","commentTokenStart","insertFinalNewline","secondTokenStart","s","count","result","i","nChars","ch","charAt","Math","floor","indexOf"],"sources":["/Users/sabyrzhanolzhabay/Web-Dev/Arabakz/ArabaFrontend/node_modules/jsonc-parser/lib/esm/impl/format.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport { createScanner } from './scanner';\nexport function format(documentText, range, options) {\n    let initialIndentLevel;\n    let formatText;\n    let formatTextStart;\n    let rangeStart;\n    let rangeEnd;\n    if (range) {\n        rangeStart = range.offset;\n        rangeEnd = rangeStart + range.length;\n        formatTextStart = rangeStart;\n        while (formatTextStart > 0 && !isEOL(documentText, formatTextStart - 1)) {\n            formatTextStart--;\n        }\n        let endOffset = rangeEnd;\n        while (endOffset < documentText.length && !isEOL(documentText, endOffset)) {\n            endOffset++;\n        }\n        formatText = documentText.substring(formatTextStart, endOffset);\n        initialIndentLevel = computeIndentLevel(formatText, options);\n    }\n    else {\n        formatText = documentText;\n        initialIndentLevel = 0;\n        formatTextStart = 0;\n        rangeStart = 0;\n        rangeEnd = documentText.length;\n    }\n    const eol = getEOL(options, documentText);\n    let numberLineBreaks = 0;\n    let indentLevel = 0;\n    let indentValue;\n    if (options.insertSpaces) {\n        indentValue = repeat(' ', options.tabSize || 4);\n    }\n    else {\n        indentValue = '\\t';\n    }\n    let scanner = createScanner(formatText, false);\n    let hasError = false;\n    function newLinesAndIndent() {\n        if (numberLineBreaks > 1) {\n            return repeat(eol, numberLineBreaks) + repeat(indentValue, initialIndentLevel + indentLevel);\n        }\n        else {\n            return eol + repeat(indentValue, initialIndentLevel + indentLevel);\n        }\n    }\n    function scanNext() {\n        let token = scanner.scan();\n        numberLineBreaks = 0;\n        while (token === 15 /* SyntaxKind.Trivia */ || token === 14 /* SyntaxKind.LineBreakTrivia */) {\n            if (token === 14 /* SyntaxKind.LineBreakTrivia */ && options.keepLines) {\n                numberLineBreaks += 1;\n            }\n            else if (token === 14 /* SyntaxKind.LineBreakTrivia */) {\n                numberLineBreaks = 1;\n            }\n            token = scanner.scan();\n        }\n        hasError = token === 16 /* SyntaxKind.Unknown */ || scanner.getTokenError() !== 0 /* ScanError.None */;\n        return token;\n    }\n    const editOperations = [];\n    function addEdit(text, startOffset, endOffset) {\n        if (!hasError && (!range || (startOffset < rangeEnd && endOffset > rangeStart)) && documentText.substring(startOffset, endOffset) !== text) {\n            editOperations.push({ offset: startOffset, length: endOffset - startOffset, content: text });\n        }\n    }\n    let firstToken = scanNext();\n    if (options.keepLines && numberLineBreaks > 0) {\n        addEdit(repeat(eol, numberLineBreaks), 0, 0);\n    }\n    if (firstToken !== 17 /* SyntaxKind.EOF */) {\n        let firstTokenStart = scanner.getTokenOffset() + formatTextStart;\n        let initialIndent = repeat(indentValue, initialIndentLevel);\n        addEdit(initialIndent, formatTextStart, firstTokenStart);\n    }\n    while (firstToken !== 17 /* SyntaxKind.EOF */) {\n        let firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;\n        let secondToken = scanNext();\n        let replaceContent = '';\n        let needsLineBreak = false;\n        while (numberLineBreaks === 0 && (secondToken === 12 /* SyntaxKind.LineCommentTrivia */ || secondToken === 13 /* SyntaxKind.BlockCommentTrivia */)) {\n            let commentTokenStart = scanner.getTokenOffset() + formatTextStart;\n            addEdit(' ', firstTokenEnd, commentTokenStart);\n            firstTokenEnd = scanner.getTokenOffset() + scanner.getTokenLength() + formatTextStart;\n            needsLineBreak = secondToken === 12 /* SyntaxKind.LineCommentTrivia */;\n            replaceContent = needsLineBreak ? newLinesAndIndent() : '';\n            secondToken = scanNext();\n        }\n        if (secondToken === 2 /* SyntaxKind.CloseBraceToken */) {\n            if (firstToken !== 1 /* SyntaxKind.OpenBraceToken */) {\n                indentLevel--;\n            }\n            ;\n            if (options.keepLines && numberLineBreaks > 0 || !options.keepLines && firstToken !== 1 /* SyntaxKind.OpenBraceToken */) {\n                replaceContent = newLinesAndIndent();\n            }\n            else if (options.keepLines) {\n                replaceContent = ' ';\n            }\n        }\n        else if (secondToken === 4 /* SyntaxKind.CloseBracketToken */) {\n            if (firstToken !== 3 /* SyntaxKind.OpenBracketToken */) {\n                indentLevel--;\n            }\n            ;\n            if (options.keepLines && numberLineBreaks > 0 || !options.keepLines && firstToken !== 3 /* SyntaxKind.OpenBracketToken */) {\n                replaceContent = newLinesAndIndent();\n            }\n            else if (options.keepLines) {\n                replaceContent = ' ';\n            }\n        }\n        else {\n            switch (firstToken) {\n                case 3 /* SyntaxKind.OpenBracketToken */:\n                case 1 /* SyntaxKind.OpenBraceToken */:\n                    indentLevel++;\n                    if (options.keepLines && numberLineBreaks > 0 || !options.keepLines) {\n                        replaceContent = newLinesAndIndent();\n                    }\n                    else {\n                        replaceContent = ' ';\n                    }\n                    break;\n                case 5 /* SyntaxKind.CommaToken */:\n                    if (options.keepLines && numberLineBreaks > 0 || !options.keepLines) {\n                        replaceContent = newLinesAndIndent();\n                    }\n                    else {\n                        replaceContent = ' ';\n                    }\n                    break;\n                case 12 /* SyntaxKind.LineCommentTrivia */:\n                    replaceContent = newLinesAndIndent();\n                    break;\n                case 13 /* SyntaxKind.BlockCommentTrivia */:\n                    if (numberLineBreaks > 0) {\n                        replaceContent = newLinesAndIndent();\n                    }\n                    else if (!needsLineBreak) {\n                        replaceContent = ' ';\n                    }\n                    break;\n                case 6 /* SyntaxKind.ColonToken */:\n                    if (options.keepLines && numberLineBreaks > 0) {\n                        replaceContent = newLinesAndIndent();\n                    }\n                    else if (!needsLineBreak) {\n                        replaceContent = ' ';\n                    }\n                    break;\n                case 10 /* SyntaxKind.StringLiteral */:\n                    if (options.keepLines && numberLineBreaks > 0) {\n                        replaceContent = newLinesAndIndent();\n                    }\n                    else if (secondToken === 6 /* SyntaxKind.ColonToken */ && !needsLineBreak) {\n                        replaceContent = '';\n                    }\n                    break;\n                case 7 /* SyntaxKind.NullKeyword */:\n                case 8 /* SyntaxKind.TrueKeyword */:\n                case 9 /* SyntaxKind.FalseKeyword */:\n                case 11 /* SyntaxKind.NumericLiteral */:\n                case 2 /* SyntaxKind.CloseBraceToken */:\n                case 4 /* SyntaxKind.CloseBracketToken */:\n                    if (options.keepLines && numberLineBreaks > 0) {\n                        replaceContent = newLinesAndIndent();\n                    }\n                    else {\n                        if ((secondToken === 12 /* SyntaxKind.LineCommentTrivia */ || secondToken === 13 /* SyntaxKind.BlockCommentTrivia */) && !needsLineBreak) {\n                            replaceContent = ' ';\n                        }\n                        else if (secondToken !== 5 /* SyntaxKind.CommaToken */ && secondToken !== 17 /* SyntaxKind.EOF */) {\n                            hasError = true;\n                        }\n                    }\n                    break;\n                case 16 /* SyntaxKind.Unknown */:\n                    hasError = true;\n                    break;\n            }\n            if (numberLineBreaks > 0 && (secondToken === 12 /* SyntaxKind.LineCommentTrivia */ || secondToken === 13 /* SyntaxKind.BlockCommentTrivia */)) {\n                replaceContent = newLinesAndIndent();\n            }\n        }\n        if (secondToken === 17 /* SyntaxKind.EOF */) {\n            if (options.keepLines && numberLineBreaks > 0) {\n                replaceContent = newLinesAndIndent();\n            }\n            else {\n                replaceContent = options.insertFinalNewline ? eol : '';\n            }\n        }\n        const secondTokenStart = scanner.getTokenOffset() + formatTextStart;\n        addEdit(replaceContent, firstTokenEnd, secondTokenStart);\n        firstToken = secondToken;\n    }\n    return editOperations;\n}\nfunction repeat(s, count) {\n    let result = '';\n    for (let i = 0; i < count; i++) {\n        result += s;\n    }\n    return result;\n}\nfunction computeIndentLevel(content, options) {\n    let i = 0;\n    let nChars = 0;\n    const tabSize = options.tabSize || 4;\n    while (i < content.length) {\n        let ch = content.charAt(i);\n        if (ch === ' ') {\n            nChars++;\n        }\n        else if (ch === '\\t') {\n            nChars += tabSize;\n        }\n        else {\n            break;\n        }\n        i++;\n    }\n    return Math.floor(nChars / tabSize);\n}\nfunction getEOL(options, text) {\n    for (let i = 0; i < text.length; i++) {\n        const ch = text.charAt(i);\n        if (ch === '\\r') {\n            if (i + 1 < text.length && text.charAt(i + 1) === '\\n') {\n                return '\\r\\n';\n            }\n            return '\\r';\n        }\n        else if (ch === '\\n') {\n            return '\\n';\n        }\n    }\n    return (options && options.eol) || '\\n';\n}\nexport function isEOL(text, offset) {\n    return '\\r\\n'.indexOf(text.charAt(offset)) !== -1;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}