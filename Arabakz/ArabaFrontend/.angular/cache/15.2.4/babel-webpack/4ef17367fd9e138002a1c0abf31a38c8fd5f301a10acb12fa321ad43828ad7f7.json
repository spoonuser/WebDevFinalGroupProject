{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createConsoleLogger = void 0;\nconst operators_1 = require(\"rxjs/operators\");\nconst src_1 = require(\"../src\");\n/**\n * A Logger that sends information to STDOUT and STDERR.\n */\nfunction createConsoleLogger(verbose = false, stdout = process.stdout, stderr = process.stderr, colors) {\n  const logger = new src_1.logging.IndentLogger('cling');\n  logger.pipe((0, operators_1.filter)(entry => entry.level !== 'debug' || verbose)).subscribe(entry => {\n    const color = colors && colors[entry.level];\n    let output = stdout;\n    switch (entry.level) {\n      case 'warn':\n      case 'fatal':\n      case 'error':\n        output = stderr;\n        break;\n    }\n    // If we do console.log(message) or process.stdout.write(message + '\\n'), the process might\n    // stop before the whole message is written and the stream is flushed. This happens when\n    // streams are asynchronous.\n    //\n    // NodeJS IO streams are different depending on platform and usage. In POSIX environment,\n    // for example, they're asynchronous when writing to a pipe, but synchronous when writing\n    // to a TTY. In windows, it's the other way around. You can verify which is which with\n    // stream.isTTY and platform, but this is not good enough.\n    // In the async case, one should wait for the callback before sending more data or\n    // continuing the process. In our case it would be rather hard to do (but not impossible).\n    //\n    // Instead we take the easy way out and simply chunk the message and call the write\n    // function while the buffer drain itself asynchronously. With a smaller chunk size than\n    // the buffer, we are mostly certain that it works. In this case, the chunk has been picked\n    // as half a page size (4096/2 = 2048), minus some bytes for the color formatting.\n    // On POSIX it seems the buffer is 2 pages (8192), but just to be sure (could be different\n    // by platform).\n    //\n    // For more details, see https://nodejs.org/api/process.html#process_a_note_on_process_i_o\n    const chunkSize = 2000; // Small chunk.\n    let message = entry.message;\n    while (message) {\n      const chunk = message.slice(0, chunkSize);\n      message = message.slice(chunkSize);\n      output.write(color ? color(chunk) : chunk);\n    }\n    output.write('\\n');\n  });\n  return logger;\n}\nexports.createConsoleLogger = createConsoleLogger;","map":{"version":3,"names":["Object","defineProperty","exports","value","createConsoleLogger","operators_1","require","src_1","verbose","stdout","process","stderr","colors","logger","logging","IndentLogger","pipe","filter","entry","level","subscribe","color","output","chunkSize","message","chunk","slice","write"],"sources":["/Users/sabyrzhanolzhabay/Web-Dev/Arabakz/ArabaFrontend/node_modules/@angular-devkit/schematics/node_modules/@angular-devkit/core/node/cli-logger.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createConsoleLogger = void 0;\nconst operators_1 = require(\"rxjs/operators\");\nconst src_1 = require(\"../src\");\n/**\n * A Logger that sends information to STDOUT and STDERR.\n */\nfunction createConsoleLogger(verbose = false, stdout = process.stdout, stderr = process.stderr, colors) {\n    const logger = new src_1.logging.IndentLogger('cling');\n    logger.pipe((0, operators_1.filter)((entry) => entry.level !== 'debug' || verbose)).subscribe((entry) => {\n        const color = colors && colors[entry.level];\n        let output = stdout;\n        switch (entry.level) {\n            case 'warn':\n            case 'fatal':\n            case 'error':\n                output = stderr;\n                break;\n        }\n        // If we do console.log(message) or process.stdout.write(message + '\\n'), the process might\n        // stop before the whole message is written and the stream is flushed. This happens when\n        // streams are asynchronous.\n        //\n        // NodeJS IO streams are different depending on platform and usage. In POSIX environment,\n        // for example, they're asynchronous when writing to a pipe, but synchronous when writing\n        // to a TTY. In windows, it's the other way around. You can verify which is which with\n        // stream.isTTY and platform, but this is not good enough.\n        // In the async case, one should wait for the callback before sending more data or\n        // continuing the process. In our case it would be rather hard to do (but not impossible).\n        //\n        // Instead we take the easy way out and simply chunk the message and call the write\n        // function while the buffer drain itself asynchronously. With a smaller chunk size than\n        // the buffer, we are mostly certain that it works. In this case, the chunk has been picked\n        // as half a page size (4096/2 = 2048), minus some bytes for the color formatting.\n        // On POSIX it seems the buffer is 2 pages (8192), but just to be sure (could be different\n        // by platform).\n        //\n        // For more details, see https://nodejs.org/api/process.html#process_a_note_on_process_i_o\n        const chunkSize = 2000; // Small chunk.\n        let message = entry.message;\n        while (message) {\n            const chunk = message.slice(0, chunkSize);\n            message = message.slice(chunkSize);\n            output.write(color ? color(chunk) : chunk);\n        }\n        output.write('\\n');\n    });\n    return logger;\n}\nexports.createConsoleLogger = createConsoleLogger;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,mBAAmB,GAAG,KAAK,CAAC;AACpC,MAAMC,WAAW,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AAC7C,MAAMC,KAAK,GAAGD,OAAO,CAAC,QAAQ,CAAC;AAC/B;AACA;AACA;AACA,SAASF,mBAAmB,CAACI,OAAO,GAAG,KAAK,EAAEC,MAAM,GAAGC,OAAO,CAACD,MAAM,EAAEE,MAAM,GAAGD,OAAO,CAACC,MAAM,EAAEC,MAAM,EAAE;EACpG,MAAMC,MAAM,GAAG,IAAIN,KAAK,CAACO,OAAO,CAACC,YAAY,CAAC,OAAO,CAAC;EACtDF,MAAM,CAACG,IAAI,CAAC,CAAC,CAAC,EAAEX,WAAW,CAACY,MAAM,EAAGC,KAAK,IAAKA,KAAK,CAACC,KAAK,KAAK,OAAO,IAAIX,OAAO,CAAC,CAAC,CAACY,SAAS,CAAEF,KAAK,IAAK;IACrG,MAAMG,KAAK,GAAGT,MAAM,IAAIA,MAAM,CAACM,KAAK,CAACC,KAAK,CAAC;IAC3C,IAAIG,MAAM,GAAGb,MAAM;IACnB,QAAQS,KAAK,CAACC,KAAK;MACf,KAAK,MAAM;MACX,KAAK,OAAO;MACZ,KAAK,OAAO;QACRG,MAAM,GAAGX,MAAM;QACf;IAAM;IAEd;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,MAAMY,SAAS,GAAG,IAAI,CAAC,CAAC;IACxB,IAAIC,OAAO,GAAGN,KAAK,CAACM,OAAO;IAC3B,OAAOA,OAAO,EAAE;MACZ,MAAMC,KAAK,GAAGD,OAAO,CAACE,KAAK,CAAC,CAAC,EAAEH,SAAS,CAAC;MACzCC,OAAO,GAAGA,OAAO,CAACE,KAAK,CAACH,SAAS,CAAC;MAClCD,MAAM,CAACK,KAAK,CAACN,KAAK,GAAGA,KAAK,CAACI,KAAK,CAAC,GAAGA,KAAK,CAAC;IAC9C;IACAH,MAAM,CAACK,KAAK,CAAC,IAAI,CAAC;EACtB,CAAC,CAAC;EACF,OAAOd,MAAM;AACjB;AACAX,OAAO,CAACE,mBAAmB,GAAGA,mBAAmB"},"metadata":{},"sourceType":"script","externalDependencies":[]}