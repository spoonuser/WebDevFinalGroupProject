{"ast":null,"code":"'use strict';\n\n/**\n * Base prompt implementation\n * Should be extended by prompt types.\n */\nconst _ = {\n  defaults: require('lodash/defaults'),\n  clone: require('lodash/clone')\n};\nconst chalk = require('chalk');\nconst runAsync = require('run-async');\nconst {\n  filter,\n  flatMap,\n  share,\n  take,\n  takeUntil\n} = require('rxjs/operators');\nconst Choices = require('../objects/choices');\nconst ScreenManager = require('../utils/screen-manager');\nclass Prompt {\n  constructor(question, rl, answers) {\n    // Setup instance defaults property\n    Object.assign(this, {\n      answers,\n      status: 'pending'\n    });\n\n    // Set defaults prompt options\n    this.opt = _.defaults(_.clone(question), {\n      validate: () => true,\n      validatingText: '',\n      filter: val => val,\n      filteringText: '',\n      when: () => true,\n      suffix: '',\n      prefix: chalk.green('?')\n    });\n\n    // Make sure name is present\n    if (!this.opt.name) {\n      this.throwParamError('name');\n    }\n\n    // Set default message if no message defined\n    if (!this.opt.message) {\n      this.opt.message = this.opt.name + ':';\n    }\n\n    // Normalize choices\n    if (Array.isArray(this.opt.choices)) {\n      this.opt.choices = new Choices(this.opt.choices, answers);\n    }\n    this.rl = rl;\n    this.screen = new ScreenManager(this.rl);\n  }\n\n  /**\n   * Start the Inquiry session and manage output value filtering\n   * @return {Promise}\n   */\n\n  run() {\n    return new Promise((resolve, reject) => {\n      this._run(value => resolve(value), error => reject(error));\n    });\n  }\n\n  // Default noop (this one should be overwritten in prompts)\n  _run(cb) {\n    cb();\n  }\n\n  /**\n   * Throw an error telling a required parameter is missing\n   * @param  {String} name Name of the missing param\n   * @return {Throw Error}\n   */\n\n  throwParamError(name) {\n    throw new Error('You must provide a `' + name + '` parameter');\n  }\n\n  /**\n   * Called when the UI closes. Override to do any specific cleanup necessary\n   */\n  close() {\n    this.screen.releaseCursor();\n  }\n\n  /**\n   * Run the provided validation method each time a submit event occur.\n   * @param  {Rx.Observable} submit - submit event flow\n   * @return {Object}        Object containing two observables: `success` and `error`\n   */\n  handleSubmitEvents(submit) {\n    const self = this;\n    const validate = runAsync(this.opt.validate);\n    const asyncFilter = runAsync(this.opt.filter);\n    const validation = submit.pipe(flatMap(value => {\n      this.startSpinner(value, this.opt.filteringText);\n      return asyncFilter(value, self.answers).then(filteredValue => {\n        this.startSpinner(filteredValue, this.opt.validatingText);\n        return validate(filteredValue, self.answers).then(isValid => ({\n          isValid,\n          value: filteredValue\n        }), err => ({\n          isValid: err,\n          value: filteredValue\n        }));\n      }, err => ({\n        isValid: err\n      }));\n    }), share());\n    const success = validation.pipe(filter(state => state.isValid === true), take(1));\n    const error = validation.pipe(filter(state => state.isValid !== true), takeUntil(success));\n    return {\n      success,\n      error\n    };\n  }\n  startSpinner(value, bottomContent) {\n    value = this.getSpinningValue(value);\n    // If the question will spin, cut off the prefix (for layout purposes)\n    const content = bottomContent ? this.getQuestion() + value : this.getQuestion().slice(this.opt.prefix.length + 1) + value;\n    this.screen.renderWithSpinner(content, bottomContent);\n  }\n\n  /**\n   * Allow override, e.g. for password prompts\n   * See: https://github.com/SBoudrias/Inquirer.js/issues/1022\n   *\n   * @return {String} value to display while spinning\n   */\n  getSpinningValue(value) {\n    return value;\n  }\n\n  /**\n   * Generate the prompt question string\n   * @return {String} prompt question string\n   */\n  getQuestion() {\n    let message = (this.opt.prefix ? this.opt.prefix + ' ' : '') + chalk.bold(this.opt.message) + this.opt.suffix + chalk.reset(' ');\n\n    // Append the default if available, and if question isn't touched/answered\n    if (this.opt.default != null && this.status !== 'touched' && this.status !== 'answered') {\n      // If default password is supplied, hide it\n      if (this.opt.type === 'password') {\n        message += chalk.italic.dim('[hidden] ');\n      } else {\n        message += chalk.dim('(' + this.opt.default + ') ');\n      }\n    }\n    return message;\n  }\n}\nmodule.exports = Prompt;","map":{"version":3,"names":["_","defaults","require","clone","chalk","runAsync","filter","flatMap","share","take","takeUntil","Choices","ScreenManager","Prompt","constructor","question","rl","answers","Object","assign","status","opt","validate","validatingText","val","filteringText","when","suffix","prefix","green","name","throwParamError","message","Array","isArray","choices","screen","run","Promise","resolve","reject","_run","value","error","cb","Error","close","releaseCursor","handleSubmitEvents","submit","self","asyncFilter","validation","pipe","startSpinner","then","filteredValue","isValid","err","success","state","bottomContent","getSpinningValue","content","getQuestion","slice","length","renderWithSpinner","bold","reset","default","type","italic","dim","module","exports"],"sources":["/Users/sabyrzhanolzhabay/Web-Dev/Arabakz/ArabaFrontend/node_modules/inquirer/lib/prompts/base.js"],"sourcesContent":["'use strict';\n/**\n * Base prompt implementation\n * Should be extended by prompt types.\n */\nconst _ = {\n  defaults: require('lodash/defaults'),\n  clone: require('lodash/clone'),\n};\nconst chalk = require('chalk');\nconst runAsync = require('run-async');\nconst { filter, flatMap, share, take, takeUntil } = require('rxjs/operators');\nconst Choices = require('../objects/choices');\nconst ScreenManager = require('../utils/screen-manager');\n\nclass Prompt {\n  constructor(question, rl, answers) {\n    // Setup instance defaults property\n    Object.assign(this, {\n      answers,\n      status: 'pending',\n    });\n\n    // Set defaults prompt options\n    this.opt = _.defaults(_.clone(question), {\n      validate: () => true,\n      validatingText: '',\n      filter: (val) => val,\n      filteringText: '',\n      when: () => true,\n      suffix: '',\n      prefix: chalk.green('?'),\n    });\n\n    // Make sure name is present\n    if (!this.opt.name) {\n      this.throwParamError('name');\n    }\n\n    // Set default message if no message defined\n    if (!this.opt.message) {\n      this.opt.message = this.opt.name + ':';\n    }\n\n    // Normalize choices\n    if (Array.isArray(this.opt.choices)) {\n      this.opt.choices = new Choices(this.opt.choices, answers);\n    }\n\n    this.rl = rl;\n    this.screen = new ScreenManager(this.rl);\n  }\n\n  /**\n   * Start the Inquiry session and manage output value filtering\n   * @return {Promise}\n   */\n\n  run() {\n    return new Promise((resolve, reject) => {\n      this._run(\n        (value) => resolve(value),\n        (error) => reject(error)\n      );\n    });\n  }\n\n  // Default noop (this one should be overwritten in prompts)\n  _run(cb) {\n    cb();\n  }\n\n  /**\n   * Throw an error telling a required parameter is missing\n   * @param  {String} name Name of the missing param\n   * @return {Throw Error}\n   */\n\n  throwParamError(name) {\n    throw new Error('You must provide a `' + name + '` parameter');\n  }\n\n  /**\n   * Called when the UI closes. Override to do any specific cleanup necessary\n   */\n  close() {\n    this.screen.releaseCursor();\n  }\n\n  /**\n   * Run the provided validation method each time a submit event occur.\n   * @param  {Rx.Observable} submit - submit event flow\n   * @return {Object}        Object containing two observables: `success` and `error`\n   */\n  handleSubmitEvents(submit) {\n    const self = this;\n    const validate = runAsync(this.opt.validate);\n    const asyncFilter = runAsync(this.opt.filter);\n    const validation = submit.pipe(\n      flatMap((value) => {\n        this.startSpinner(value, this.opt.filteringText);\n        return asyncFilter(value, self.answers).then(\n          (filteredValue) => {\n            this.startSpinner(filteredValue, this.opt.validatingText);\n            return validate(filteredValue, self.answers).then(\n              (isValid) => ({ isValid, value: filteredValue }),\n              (err) => ({ isValid: err, value: filteredValue })\n            );\n          },\n          (err) => ({ isValid: err })\n        );\n      }),\n      share()\n    );\n\n    const success = validation.pipe(\n      filter((state) => state.isValid === true),\n      take(1)\n    );\n    const error = validation.pipe(\n      filter((state) => state.isValid !== true),\n      takeUntil(success)\n    );\n\n    return {\n      success,\n      error,\n    };\n  }\n\n  startSpinner(value, bottomContent) {\n    value = this.getSpinningValue(value);\n    // If the question will spin, cut off the prefix (for layout purposes)\n    const content = bottomContent\n      ? this.getQuestion() + value\n      : this.getQuestion().slice(this.opt.prefix.length + 1) + value;\n\n    this.screen.renderWithSpinner(content, bottomContent);\n  }\n\n  /**\n   * Allow override, e.g. for password prompts\n   * See: https://github.com/SBoudrias/Inquirer.js/issues/1022\n   *\n   * @return {String} value to display while spinning\n   */\n  getSpinningValue(value) {\n    return value;\n  }\n\n  /**\n   * Generate the prompt question string\n   * @return {String} prompt question string\n   */\n  getQuestion() {\n    let message =\n      (this.opt.prefix ? this.opt.prefix + ' ' : '') +\n      chalk.bold(this.opt.message) +\n      this.opt.suffix +\n      chalk.reset(' ');\n\n    // Append the default if available, and if question isn't touched/answered\n    if (\n      this.opt.default != null &&\n      this.status !== 'touched' &&\n      this.status !== 'answered'\n    ) {\n      // If default password is supplied, hide it\n      if (this.opt.type === 'password') {\n        message += chalk.italic.dim('[hidden] ');\n      } else {\n        message += chalk.dim('(' + this.opt.default + ') ');\n      }\n    }\n\n    return message;\n  }\n}\n\nmodule.exports = Prompt;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}