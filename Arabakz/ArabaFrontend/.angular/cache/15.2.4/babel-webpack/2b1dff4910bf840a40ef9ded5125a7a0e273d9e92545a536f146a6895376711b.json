{"ast":null,"code":"'use strict';\n\n/**\n * Sticky bottom bar user interface\n */\nconst through = require('through');\nconst Base = require('./baseUI');\nconst rlUtils = require('../utils/readline');\nclass BottomBar extends Base {\n  constructor(opt = {}) {\n    super(opt);\n    this.log = through(this.writeLog.bind(this));\n    this.bottomBar = opt.bottomBar || '';\n    this.render();\n  }\n\n  /**\n   * Render the prompt to screen\n   * @return {BottomBar} self\n   */\n\n  render() {\n    this.write(this.bottomBar);\n    return this;\n  }\n  clean() {\n    rlUtils.clearLine(this.rl, this.bottomBar.split('\\n').length);\n    return this;\n  }\n\n  /**\n   * Update the bottom bar content and rerender\n   * @param  {String} bottomBar Bottom bar content\n   * @return {BottomBar}           self\n   */\n\n  updateBottomBar(bottomBar) {\n    rlUtils.clearLine(this.rl, 1);\n    this.rl.output.unmute();\n    this.clean();\n    this.bottomBar = bottomBar;\n    this.render();\n    this.rl.output.mute();\n    return this;\n  }\n\n  /**\n   * Write out log data\n   * @param {String} data - The log data to be output\n   * @return {BottomBar} self\n   */\n\n  writeLog(data) {\n    this.rl.output.unmute();\n    this.clean();\n    this.rl.output.write(this.enforceLF(data.toString()));\n    this.render();\n    this.rl.output.mute();\n    return this;\n  }\n\n  /**\n   * Make sure line end on a line feed\n   * @param  {String} str Input string\n   * @return {String}     The input string with a final line feed\n   */\n\n  enforceLF(str) {\n    return str.match(/[\\r\\n]$/) ? str : str + '\\n';\n  }\n\n  /**\n   * Helper for writing message in Prompt\n   * @param {String} message - The message to be output\n   */\n  write(message) {\n    const msgLines = message.split(/\\n/);\n    this.height = msgLines.length;\n\n    // Write message to screen and setPrompt to control backspace\n    this.rl.setPrompt(msgLines[msgLines.length - 1]);\n    if (this.rl.output.rows === 0 && this.rl.output.columns === 0) {\n      /* When it's a tty through serial port there's no terminal info and the render will malfunction,\n         so we need enforce the cursor to locate to the leftmost position for rendering. */\n      rlUtils.left(this.rl, message.length + this.rl.line.length);\n    }\n    this.rl.output.write(message);\n  }\n}\nmodule.exports = BottomBar;","map":{"version":3,"names":["through","require","Base","rlUtils","BottomBar","constructor","opt","log","writeLog","bind","bottomBar","render","write","clean","clearLine","rl","split","length","updateBottomBar","output","unmute","mute","data","enforceLF","toString","str","match","message","msgLines","height","setPrompt","rows","columns","left","line","module","exports"],"sources":["/Users/sabyrzhanolzhabay/Web-Dev/Arabakz/ArabaFrontend/node_modules/inquirer/lib/ui/bottom-bar.js"],"sourcesContent":["'use strict';\n/**\n * Sticky bottom bar user interface\n */\n\nconst through = require('through');\nconst Base = require('./baseUI');\nconst rlUtils = require('../utils/readline');\n\nclass BottomBar extends Base {\n  constructor(opt = {}) {\n    super(opt);\n\n    this.log = through(this.writeLog.bind(this));\n    this.bottomBar = opt.bottomBar || '';\n    this.render();\n  }\n\n  /**\n   * Render the prompt to screen\n   * @return {BottomBar} self\n   */\n\n  render() {\n    this.write(this.bottomBar);\n    return this;\n  }\n\n  clean() {\n    rlUtils.clearLine(this.rl, this.bottomBar.split('\\n').length);\n    return this;\n  }\n\n  /**\n   * Update the bottom bar content and rerender\n   * @param  {String} bottomBar Bottom bar content\n   * @return {BottomBar}           self\n   */\n\n  updateBottomBar(bottomBar) {\n    rlUtils.clearLine(this.rl, 1);\n    this.rl.output.unmute();\n    this.clean();\n    this.bottomBar = bottomBar;\n    this.render();\n    this.rl.output.mute();\n    return this;\n  }\n\n  /**\n   * Write out log data\n   * @param {String} data - The log data to be output\n   * @return {BottomBar} self\n   */\n\n  writeLog(data) {\n    this.rl.output.unmute();\n    this.clean();\n    this.rl.output.write(this.enforceLF(data.toString()));\n    this.render();\n    this.rl.output.mute();\n    return this;\n  }\n\n  /**\n   * Make sure line end on a line feed\n   * @param  {String} str Input string\n   * @return {String}     The input string with a final line feed\n   */\n\n  enforceLF(str) {\n    return str.match(/[\\r\\n]$/) ? str : str + '\\n';\n  }\n\n  /**\n   * Helper for writing message in Prompt\n   * @param {String} message - The message to be output\n   */\n  write(message) {\n    const msgLines = message.split(/\\n/);\n    this.height = msgLines.length;\n\n    // Write message to screen and setPrompt to control backspace\n    this.rl.setPrompt(msgLines[msgLines.length - 1]);\n\n    if (this.rl.output.rows === 0 && this.rl.output.columns === 0) {\n      /* When it's a tty through serial port there's no terminal info and the render will malfunction,\n         so we need enforce the cursor to locate to the leftmost position for rendering. */\n      rlUtils.left(this.rl, message.length + this.rl.line.length);\n    }\n\n    this.rl.output.write(message);\n  }\n}\n\nmodule.exports = BottomBar;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}