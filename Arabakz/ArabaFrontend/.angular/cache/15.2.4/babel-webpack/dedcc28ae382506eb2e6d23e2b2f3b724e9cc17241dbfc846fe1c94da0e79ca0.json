{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NodeModuleJobRegistry = void 0;\nconst core_1 = require(\"@angular-devkit/core\");\nconst rxjs_1 = require(\"rxjs\");\nclass NodeModuleJobRegistry {\n  _resolve(name) {\n    try {\n      return require.resolve(name);\n    } catch (e) {\n      if (e.code === 'MODULE_NOT_FOUND') {\n        return null;\n      }\n      throw e;\n    }\n  }\n  /**\n   * Get a job description for a named job.\n   *\n   * @param name The name of the job.\n   * @returns A description, or null if the job is not registered.\n   */\n  get(name) {\n    const [moduleName, exportName] = name.split(/#/, 2);\n    const resolvedPath = this._resolve(moduleName);\n    if (!resolvedPath) {\n      return (0, rxjs_1.of)(null);\n    }\n    const pkg = require(resolvedPath);\n    const handler = pkg[exportName || 'default'];\n    if (!handler) {\n      return (0, rxjs_1.of)(null);\n    }\n    function _getValue(...fields) {\n      return fields.find(x => core_1.schema.isJsonSchema(x)) || true;\n    }\n    const argument = _getValue(pkg.argument, handler.argument);\n    const input = _getValue(pkg.input, handler.input);\n    const output = _getValue(pkg.output, handler.output);\n    const channels = _getValue(pkg.channels, handler.channels);\n    return (0, rxjs_1.of)(Object.assign(handler.bind(undefined), {\n      jobDescription: {\n        argument,\n        input,\n        output,\n        channels\n      }\n    }));\n  }\n}\nexports.NodeModuleJobRegistry = NodeModuleJobRegistry;","map":{"version":3,"names":["Object","defineProperty","exports","value","NodeModuleJobRegistry","core_1","require","rxjs_1","_resolve","name","resolve","e","code","get","moduleName","exportName","split","resolvedPath","of","pkg","handler","_getValue","fields","find","x","schema","isJsonSchema","argument","input","output","channels","assign","bind","undefined","jobDescription"],"sources":["/Users/sabyrzhanolzhabay/Web-Dev/Arabakz/ArabaFrontend/node_modules/@angular/cli/node_modules/@angular-devkit/architect/node/jobs/job-registry.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NodeModuleJobRegistry = void 0;\nconst core_1 = require(\"@angular-devkit/core\");\nconst rxjs_1 = require(\"rxjs\");\nclass NodeModuleJobRegistry {\n    _resolve(name) {\n        try {\n            return require.resolve(name);\n        }\n        catch (e) {\n            if (e.code === 'MODULE_NOT_FOUND') {\n                return null;\n            }\n            throw e;\n        }\n    }\n    /**\n     * Get a job description for a named job.\n     *\n     * @param name The name of the job.\n     * @returns A description, or null if the job is not registered.\n     */\n    get(name) {\n        const [moduleName, exportName] = name.split(/#/, 2);\n        const resolvedPath = this._resolve(moduleName);\n        if (!resolvedPath) {\n            return (0, rxjs_1.of)(null);\n        }\n        const pkg = require(resolvedPath);\n        const handler = pkg[exportName || 'default'];\n        if (!handler) {\n            return (0, rxjs_1.of)(null);\n        }\n        function _getValue(...fields) {\n            return fields.find((x) => core_1.schema.isJsonSchema(x)) || true;\n        }\n        const argument = _getValue(pkg.argument, handler.argument);\n        const input = _getValue(pkg.input, handler.input);\n        const output = _getValue(pkg.output, handler.output);\n        const channels = _getValue(pkg.channels, handler.channels);\n        return (0, rxjs_1.of)(Object.assign(handler.bind(undefined), {\n            jobDescription: {\n                argument,\n                input,\n                output,\n                channels,\n            },\n        }));\n    }\n}\nexports.NodeModuleJobRegistry = NodeModuleJobRegistry;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,qBAAqB,GAAG,KAAK,CAAC;AACtC,MAAMC,MAAM,GAAGC,OAAO,CAAC,sBAAsB,CAAC;AAC9C,MAAMC,MAAM,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC9B,MAAMF,qBAAqB,CAAC;EACxBI,QAAQ,CAACC,IAAI,EAAE;IACX,IAAI;MACA,OAAOH,OAAO,CAACI,OAAO,CAACD,IAAI,CAAC;IAChC,CAAC,CACD,OAAOE,CAAC,EAAE;MACN,IAAIA,CAAC,CAACC,IAAI,KAAK,kBAAkB,EAAE;QAC/B,OAAO,IAAI;MACf;MACA,MAAMD,CAAC;IACX;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;EACIE,GAAG,CAACJ,IAAI,EAAE;IACN,MAAM,CAACK,UAAU,EAAEC,UAAU,CAAC,GAAGN,IAAI,CAACO,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC;IACnD,MAAMC,YAAY,GAAG,IAAI,CAACT,QAAQ,CAACM,UAAU,CAAC;IAC9C,IAAI,CAACG,YAAY,EAAE;MACf,OAAO,CAAC,CAAC,EAAEV,MAAM,CAACW,EAAE,EAAE,IAAI,CAAC;IAC/B;IACA,MAAMC,GAAG,GAAGb,OAAO,CAACW,YAAY,CAAC;IACjC,MAAMG,OAAO,GAAGD,GAAG,CAACJ,UAAU,IAAI,SAAS,CAAC;IAC5C,IAAI,CAACK,OAAO,EAAE;MACV,OAAO,CAAC,CAAC,EAAEb,MAAM,CAACW,EAAE,EAAE,IAAI,CAAC;IAC/B;IACA,SAASG,SAAS,CAAC,GAAGC,MAAM,EAAE;MAC1B,OAAOA,MAAM,CAACC,IAAI,CAAEC,CAAC,IAAKnB,MAAM,CAACoB,MAAM,CAACC,YAAY,CAACF,CAAC,CAAC,CAAC,IAAI,IAAI;IACpE;IACA,MAAMG,QAAQ,GAAGN,SAAS,CAACF,GAAG,CAACQ,QAAQ,EAAEP,OAAO,CAACO,QAAQ,CAAC;IAC1D,MAAMC,KAAK,GAAGP,SAAS,CAACF,GAAG,CAACS,KAAK,EAAER,OAAO,CAACQ,KAAK,CAAC;IACjD,MAAMC,MAAM,GAAGR,SAAS,CAACF,GAAG,CAACU,MAAM,EAAET,OAAO,CAACS,MAAM,CAAC;IACpD,MAAMC,QAAQ,GAAGT,SAAS,CAACF,GAAG,CAACW,QAAQ,EAAEV,OAAO,CAACU,QAAQ,CAAC;IAC1D,OAAO,CAAC,CAAC,EAAEvB,MAAM,CAACW,EAAE,EAAElB,MAAM,CAAC+B,MAAM,CAACX,OAAO,CAACY,IAAI,CAACC,SAAS,CAAC,EAAE;MACzDC,cAAc,EAAE;QACZP,QAAQ;QACRC,KAAK;QACLC,MAAM;QACNC;MACJ;IACJ,CAAC,CAAC,CAAC;EACP;AACJ;AACA5B,OAAO,CAACE,qBAAqB,GAAGA,qBAAqB"},"metadata":{},"sourceType":"script","externalDependencies":[]}