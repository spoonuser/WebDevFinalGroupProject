{"ast":null,"code":"/*!\n * Tmp\n *\n * Copyright (c) 2011-2017 KARASZI Istvan <github@spam.raszi.hu>\n *\n * MIT Licensed\n */\n\n/*\n * Module dependencies.\n */\nconst fs = require('fs');\nconst path = require('path');\nconst crypto = require('crypto');\nconst osTmpDir = require('os-tmpdir');\nconst _c = process.binding('constants');\n\n/*\n * The working inner variables.\n */\nconst\n  /**\n   * The temporary directory.\n   * @type {string}\n   */\n  tmpDir = osTmpDir(),\n  // the random characters to choose from\n  RANDOM_CHARS = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz',\n  TEMPLATE_PATTERN = /XXXXXX/,\n  DEFAULT_TRIES = 3,\n  CREATE_FLAGS = (_c.O_CREAT || _c.fs.O_CREAT) | (_c.O_EXCL || _c.fs.O_EXCL) | (_c.O_RDWR || _c.fs.O_RDWR),\n  EBADF = _c.EBADF || _c.os.errno.EBADF,\n  ENOENT = _c.ENOENT || _c.os.errno.ENOENT,\n  DIR_MODE = 448 /* 0o700 */,\n  FILE_MODE = 384 /* 0o600 */,\n  // this will hold the objects need to be removed on exit\n  _removeObjects = [];\nvar _gracefulCleanup = false,\n  _uncaughtException = false;\n\n/**\n * Random name generator based on crypto.\n * Adapted from http://blog.tompawlak.org/how-to-generate-random-values-nodejs-javascript\n *\n * @param {number} howMany\n * @returns {string} the generated random name\n * @private\n */\nfunction _randomChars(howMany) {\n  var value = [],\n    rnd = null;\n\n  // make sure that we do not fail because we ran out of entropy\n  try {\n    rnd = crypto.randomBytes(howMany);\n  } catch (e) {\n    rnd = crypto.pseudoRandomBytes(howMany);\n  }\n  for (var i = 0; i < howMany; i++) {\n    value.push(RANDOM_CHARS[rnd[i] % RANDOM_CHARS.length]);\n  }\n  return value.join('');\n}\n\n/**\n * Checks whether the `obj` parameter is defined or not.\n *\n * @param {Object} obj\n * @returns {boolean} true if the object is undefined\n * @private\n */\nfunction _isUndefined(obj) {\n  return typeof obj === 'undefined';\n}\n\n/**\n * Parses the function arguments.\n *\n * This function helps to have optional arguments.\n *\n * @param {(Options|Function)} options\n * @param {Function} callback\n * @returns {Array} parsed arguments\n * @private\n */\nfunction _parseArguments(options, callback) {\n  if (typeof options == 'function') {\n    return [callback || {}, options];\n  }\n  if (_isUndefined(options)) {\n    return [{}, callback];\n  }\n  return [options, callback];\n}\n\n/**\n * Generates a new temporary name.\n *\n * @param {Object} opts\n * @returns {string} the new random name according to opts\n * @private\n */\nfunction _generateTmpName(opts) {\n  if (opts.name) {\n    return path.join(opts.dir || tmpDir, opts.name);\n  }\n\n  // mkstemps like template\n  if (opts.template) {\n    return opts.template.replace(TEMPLATE_PATTERN, _randomChars(6));\n  }\n\n  // prefix and postfix\n  const name = [opts.prefix || 'tmp-', process.pid, _randomChars(12), opts.postfix || ''].join('');\n  return path.join(opts.dir || tmpDir, name);\n}\n\n/**\n * Gets a temporary file name.\n *\n * @param {(Options|tmpNameCallback)} options options or callback\n * @param {?tmpNameCallback} callback the callback function\n */\nfunction tmpName(options, callback) {\n  var args = _parseArguments(options, callback),\n    opts = args[0],\n    cb = args[1],\n    tries = opts.name ? 1 : opts.tries || DEFAULT_TRIES;\n  if (isNaN(tries) || tries < 0) return cb(new Error('Invalid tries'));\n  if (opts.template && !opts.template.match(TEMPLATE_PATTERN)) return cb(new Error('Invalid template provided'));\n  (function _getUniqueName() {\n    const name = _generateTmpName(opts);\n\n    // check whether the path exists then retry if needed\n    fs.stat(name, function (err) {\n      if (!err) {\n        if (tries-- > 0) return _getUniqueName();\n        return cb(new Error('Could not get a unique tmp filename, max tries reached ' + name));\n      }\n      cb(null, name);\n    });\n  })();\n}\n\n/**\n * Synchronous version of tmpName.\n *\n * @param {Object} options\n * @returns {string} the generated random name\n * @throws {Error} if the options are invalid or could not generate a filename\n */\nfunction tmpNameSync(options) {\n  var args = _parseArguments(options),\n    opts = args[0],\n    tries = opts.name ? 1 : opts.tries || DEFAULT_TRIES;\n  if (isNaN(tries) || tries < 0) throw new Error('Invalid tries');\n  if (opts.template && !opts.template.match(TEMPLATE_PATTERN)) throw new Error('Invalid template provided');\n  do {\n    const name = _generateTmpName(opts);\n    try {\n      fs.statSync(name);\n    } catch (e) {\n      return name;\n    }\n  } while (tries-- > 0);\n  throw new Error('Could not get a unique tmp filename, max tries reached');\n}\n\n/**\n * Creates and opens a temporary file.\n *\n * @param {(Options|fileCallback)} options the config options or the callback function\n * @param {?fileCallback} callback\n */\nfunction file(options, callback) {\n  var args = _parseArguments(options, callback),\n    opts = args[0],\n    cb = args[1];\n  opts.postfix = _isUndefined(opts.postfix) ? '.tmp' : opts.postfix;\n\n  // gets a temporary filename\n  tmpName(opts, function _tmpNameCreated(err, name) {\n    if (err) return cb(err);\n\n    // create and open the file\n    fs.open(name, CREATE_FLAGS, opts.mode || FILE_MODE, function _fileCreated(err, fd) {\n      if (err) return cb(err);\n      if (opts.discardDescriptor) {\n        return fs.close(fd, function _discardCallback(err) {\n          if (err) {\n            // Low probability, and the file exists, so this could be\n            // ignored.  If it isn't we certainly need to unlink the\n            // file, and if that fails too its error is more\n            // important.\n            try {\n              fs.unlinkSync(name);\n            } catch (e) {\n              if (!isENOENT(e)) {\n                err = e;\n              }\n            }\n            return cb(err);\n          }\n          cb(null, name, undefined, _prepareTmpFileRemoveCallback(name, -1, opts));\n        });\n      }\n      if (opts.detachDescriptor) {\n        return cb(null, name, fd, _prepareTmpFileRemoveCallback(name, -1, opts));\n      }\n      cb(null, name, fd, _prepareTmpFileRemoveCallback(name, fd, opts));\n    });\n  });\n}\n\n/**\n * Synchronous version of file.\n *\n * @param {Options} options\n * @returns {FileSyncObject} object consists of name, fd and removeCallback\n * @throws {Error} if cannot create a file\n */\nfunction fileSync(options) {\n  var args = _parseArguments(options),\n    opts = args[0];\n  opts.postfix = opts.postfix || '.tmp';\n  const discardOrDetachDescriptor = opts.discardDescriptor || opts.detachDescriptor;\n  const name = tmpNameSync(opts);\n  var fd = fs.openSync(name, CREATE_FLAGS, opts.mode || FILE_MODE);\n  if (opts.discardDescriptor) {\n    fs.closeSync(fd);\n    fd = undefined;\n  }\n  return {\n    name: name,\n    fd: fd,\n    removeCallback: _prepareTmpFileRemoveCallback(name, discardOrDetachDescriptor ? -1 : fd, opts)\n  };\n}\n\n/**\n * Removes files and folders in a directory recursively.\n *\n * @param {string} root\n * @private\n */\nfunction _rmdirRecursiveSync(root) {\n  const dirs = [root];\n  do {\n    var dir = dirs.pop(),\n      deferred = false,\n      files = fs.readdirSync(dir);\n    for (var i = 0, length = files.length; i < length; i++) {\n      var file = path.join(dir, files[i]),\n        stat = fs.lstatSync(file); // lstat so we don't recurse into symlinked directories\n\n      if (stat.isDirectory()) {\n        if (!deferred) {\n          deferred = true;\n          dirs.push(dir);\n        }\n        dirs.push(file);\n      } else {\n        fs.unlinkSync(file);\n      }\n    }\n    if (!deferred) {\n      fs.rmdirSync(dir);\n    }\n  } while (dirs.length !== 0);\n}\n\n/**\n * Creates a temporary directory.\n *\n * @param {(Options|dirCallback)} options the options or the callback function\n * @param {?dirCallback} callback\n */\nfunction dir(options, callback) {\n  var args = _parseArguments(options, callback),\n    opts = args[0],\n    cb = args[1];\n\n  // gets a temporary filename\n  tmpName(opts, function _tmpNameCreated(err, name) {\n    if (err) return cb(err);\n\n    // create the directory\n    fs.mkdir(name, opts.mode || DIR_MODE, function _dirCreated(err) {\n      if (err) return cb(err);\n      cb(null, name, _prepareTmpDirRemoveCallback(name, opts));\n    });\n  });\n}\n\n/**\n * Synchronous version of dir.\n *\n * @param {Options} options\n * @returns {DirSyncObject} object consists of name and removeCallback\n * @throws {Error} if it cannot create a directory\n */\nfunction dirSync(options) {\n  var args = _parseArguments(options),\n    opts = args[0];\n  const name = tmpNameSync(opts);\n  fs.mkdirSync(name, opts.mode || DIR_MODE);\n  return {\n    name: name,\n    removeCallback: _prepareTmpDirRemoveCallback(name, opts)\n  };\n}\n\n/**\n * Prepares the callback for removal of the temporary file.\n *\n * @param {string} name the path of the file\n * @param {number} fd file descriptor\n * @param {Object} opts\n * @returns {fileCallback}\n * @private\n */\nfunction _prepareTmpFileRemoveCallback(name, fd, opts) {\n  const removeCallback = _prepareRemoveCallback(function _removeCallback(fdPath) {\n    try {\n      if (0 <= fdPath[0]) {\n        fs.closeSync(fdPath[0]);\n      }\n    } catch (e) {\n      // under some node/windows related circumstances, a temporary file\n      // may have not be created as expected or the file was already closed\n      // by the user, in which case we will simply ignore the error\n      if (!isEBADF(e) && !isENOENT(e)) {\n        // reraise any unanticipated error\n        throw e;\n      }\n    }\n    try {\n      fs.unlinkSync(fdPath[1]);\n    } catch (e) {\n      if (!isENOENT(e)) {\n        // reraise any unanticipated error\n        throw e;\n      }\n    }\n  }, [fd, name]);\n  if (!opts.keep) {\n    _removeObjects.unshift(removeCallback);\n  }\n  return removeCallback;\n}\n\n/**\n * Prepares the callback for removal of the temporary directory.\n *\n * @param {string} name\n * @param {Object} opts\n * @returns {Function} the callback\n * @private\n */\nfunction _prepareTmpDirRemoveCallback(name, opts) {\n  const removeFunction = opts.unsafeCleanup ? _rmdirRecursiveSync : fs.rmdirSync.bind(fs);\n  const removeCallback = _prepareRemoveCallback(removeFunction, name);\n  if (!opts.keep) {\n    _removeObjects.unshift(removeCallback);\n  }\n  return removeCallback;\n}\n\n/**\n * Creates a guarded function wrapping the removeFunction call.\n *\n * @param {Function} removeFunction\n * @param {Object} arg\n * @returns {Function}\n * @private\n */\nfunction _prepareRemoveCallback(removeFunction, arg) {\n  var called = false;\n  return function _cleanupCallback(next) {\n    if (!called) {\n      const index = _removeObjects.indexOf(_cleanupCallback);\n      if (index >= 0) {\n        _removeObjects.splice(index, 1);\n      }\n      called = true;\n      removeFunction(arg);\n    }\n    if (next) next(null);\n  };\n}\n\n/**\n * The garbage collector.\n *\n * @private\n */\nfunction _garbageCollector() {\n  if (_uncaughtException && !_gracefulCleanup) {\n    return;\n  }\n\n  // the function being called removes itself from _removeObjects,\n  // loop until _removeObjects is empty\n  while (_removeObjects.length) {\n    try {\n      _removeObjects[0].call(null);\n    } catch (e) {\n      // already removed?\n    }\n  }\n}\n\n/**\n * Helper for testing against EBADF to compensate changes made to Node 7.x under Windows.\n */\nfunction isEBADF(error) {\n  return isExpectedError(error, -EBADF, 'EBADF');\n}\n\n/**\n * Helper for testing against ENOENT to compensate changes made to Node 7.x under Windows.\n */\nfunction isENOENT(error) {\n  return isExpectedError(error, -ENOENT, 'ENOENT');\n}\n\n/**\n * Helper to determine whether the expected error code matches the actual code and errno,\n * which will differ between the supported node versions.\n *\n * - Node >= 7.0:\n *   error.code {String}\n *   error.errno {String|Number} any numerical value will be negated\n *\n * - Node >= 6.0 < 7.0:\n *   error.code {String}\n *   error.errno {Number} negated\n *\n * - Node >= 4.0 < 6.0: introduces SystemError\n *   error.code {String}\n *   error.errno {Number} negated\n *\n * - Node >= 0.10 < 4.0:\n *   error.code {Number} negated\n *   error.errno n/a\n */\nfunction isExpectedError(error, code, errno) {\n  return error.code == code || error.code == errno;\n}\n\n/**\n * Sets the graceful cleanup.\n *\n * Also removes the created files and directories when an uncaught exception occurs.\n */\nfunction setGracefulCleanup() {\n  _gracefulCleanup = true;\n}\nconst version = process.versions.node.split('.').map(function (value) {\n  return parseInt(value, 10);\n});\nif (version[0] === 0 && (version[1] < 9 || version[1] === 9 && version[2] < 5)) {\n  process.addListener('uncaughtException', function _uncaughtExceptionThrown(err) {\n    _uncaughtException = true;\n    _garbageCollector();\n    throw err;\n  });\n}\nprocess.addListener('exit', function _exit(code) {\n  if (code) _uncaughtException = true;\n  _garbageCollector();\n});\n\n/**\n * Configuration options.\n *\n * @typedef {Object} Options\n * @property {?number} tries the number of tries before give up the name generation\n * @property {?string} template the \"mkstemp\" like filename template\n * @property {?string} name fix name\n * @property {?string} dir the tmp directory to use\n * @property {?string} prefix prefix for the generated name\n * @property {?string} postfix postfix for the generated name\n */\n\n/**\n * @typedef {Object} FileSyncObject\n * @property {string} name the name of the file\n * @property {string} fd the file descriptor\n * @property {fileCallback} removeCallback the callback function to remove the file\n */\n\n/**\n * @typedef {Object} DirSyncObject\n * @property {string} name the name of the directory\n * @property {fileCallback} removeCallback the callback function to remove the directory\n */\n\n/**\n * @callback tmpNameCallback\n * @param {?Error} err the error object if anything goes wrong\n * @param {string} name the temporary file name\n */\n\n/**\n * @callback fileCallback\n * @param {?Error} err the error object if anything goes wrong\n * @param {string} name the temporary file name\n * @param {number} fd the file descriptor\n * @param {cleanupCallback} fn the cleanup callback function\n */\n\n/**\n * @callback dirCallback\n * @param {?Error} err the error object if anything goes wrong\n * @param {string} name the temporary file name\n * @param {cleanupCallback} fn the cleanup callback function\n */\n\n/**\n * Removes the temporary created file or directory.\n *\n * @callback cleanupCallback\n * @param {simpleCallback} [next] function to call after entry was removed\n */\n\n/**\n * Callback function for function composition.\n * @see {@link https://github.com/raszi/node-tmp/issues/57|raszi/node-tmp#57}\n *\n * @callback simpleCallback\n */\n\n// exporting all the needed methods\nmodule.exports.tmpdir = tmpDir;\nmodule.exports.dir = dir;\nmodule.exports.dirSync = dirSync;\nmodule.exports.file = file;\nmodule.exports.fileSync = fileSync;\nmodule.exports.tmpName = tmpName;\nmodule.exports.tmpNameSync = tmpNameSync;\nmodule.exports.setGracefulCleanup = setGracefulCleanup;","map":{"version":3,"names":["fs","require","path","crypto","osTmpDir","_c","process","binding","tmpDir","RANDOM_CHARS","TEMPLATE_PATTERN","DEFAULT_TRIES","CREATE_FLAGS","O_CREAT","O_EXCL","O_RDWR","EBADF","os","errno","ENOENT","DIR_MODE","FILE_MODE","_removeObjects","_gracefulCleanup","_uncaughtException","_randomChars","howMany","value","rnd","randomBytes","e","pseudoRandomBytes","i","push","length","join","_isUndefined","obj","_parseArguments","options","callback","_generateTmpName","opts","name","dir","template","replace","prefix","pid","postfix","tmpName","args","cb","tries","isNaN","Error","match","_getUniqueName","stat","err","tmpNameSync","statSync","file","_tmpNameCreated","open","mode","_fileCreated","fd","discardDescriptor","close","_discardCallback","unlinkSync","isENOENT","undefined","_prepareTmpFileRemoveCallback","detachDescriptor","fileSync","discardOrDetachDescriptor","openSync","closeSync","removeCallback","_rmdirRecursiveSync","root","dirs","pop","deferred","files","readdirSync","lstatSync","isDirectory","rmdirSync","mkdir","_dirCreated","_prepareTmpDirRemoveCallback","dirSync","mkdirSync","_prepareRemoveCallback","_removeCallback","fdPath","isEBADF","keep","unshift","removeFunction","unsafeCleanup","bind","arg","called","_cleanupCallback","next","index","indexOf","splice","_garbageCollector","call","error","isExpectedError","code","setGracefulCleanup","version","versions","node","split","map","parseInt","addListener","_uncaughtExceptionThrown","_exit","module","exports","tmpdir"],"sources":["/Users/sabyrzhanolzhabay/Web-Dev/Arabakz/ArabaFrontend/node_modules/tmp/lib/tmp.js"],"sourcesContent":["/*!\n * Tmp\n *\n * Copyright (c) 2011-2017 KARASZI Istvan <github@spam.raszi.hu>\n *\n * MIT Licensed\n */\n\n/*\n * Module dependencies.\n */\nconst fs = require('fs');\nconst path = require('path');\nconst crypto = require('crypto');\nconst osTmpDir = require('os-tmpdir');\nconst _c = process.binding('constants');\n\n/*\n * The working inner variables.\n */\nconst\n  /**\n   * The temporary directory.\n   * @type {string}\n   */\n  tmpDir = osTmpDir(),\n\n  // the random characters to choose from\n  RANDOM_CHARS = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz',\n\n  TEMPLATE_PATTERN = /XXXXXX/,\n\n  DEFAULT_TRIES = 3,\n\n  CREATE_FLAGS = (_c.O_CREAT || _c.fs.O_CREAT) | (_c.O_EXCL || _c.fs.O_EXCL) | (_c.O_RDWR || _c.fs.O_RDWR),\n\n  EBADF = _c.EBADF || _c.os.errno.EBADF,\n  ENOENT = _c.ENOENT || _c.os.errno.ENOENT,\n\n  DIR_MODE = 448 /* 0o700 */,\n  FILE_MODE = 384 /* 0o600 */,\n\n  // this will hold the objects need to be removed on exit\n  _removeObjects = [];\n\nvar\n  _gracefulCleanup = false,\n  _uncaughtException = false;\n\n/**\n * Random name generator based on crypto.\n * Adapted from http://blog.tompawlak.org/how-to-generate-random-values-nodejs-javascript\n *\n * @param {number} howMany\n * @returns {string} the generated random name\n * @private\n */\nfunction _randomChars(howMany) {\n  var\n    value = [],\n    rnd = null;\n\n  // make sure that we do not fail because we ran out of entropy\n  try {\n    rnd = crypto.randomBytes(howMany);\n  } catch (e) {\n    rnd = crypto.pseudoRandomBytes(howMany);\n  }\n\n  for (var i = 0; i < howMany; i++) {\n    value.push(RANDOM_CHARS[rnd[i] % RANDOM_CHARS.length]);\n  }\n\n  return value.join('');\n}\n\n/**\n * Checks whether the `obj` parameter is defined or not.\n *\n * @param {Object} obj\n * @returns {boolean} true if the object is undefined\n * @private\n */\nfunction _isUndefined(obj) {\n  return typeof obj === 'undefined';\n}\n\n/**\n * Parses the function arguments.\n *\n * This function helps to have optional arguments.\n *\n * @param {(Options|Function)} options\n * @param {Function} callback\n * @returns {Array} parsed arguments\n * @private\n */\nfunction _parseArguments(options, callback) {\n  if (typeof options == 'function') {\n    return [callback || {}, options];\n  }\n\n  if (_isUndefined(options)) {\n    return [{}, callback];\n  }\n\n  return [options, callback];\n}\n\n/**\n * Generates a new temporary name.\n *\n * @param {Object} opts\n * @returns {string} the new random name according to opts\n * @private\n */\nfunction _generateTmpName(opts) {\n  if (opts.name) {\n    return path.join(opts.dir || tmpDir, opts.name);\n  }\n\n  // mkstemps like template\n  if (opts.template) {\n    return opts.template.replace(TEMPLATE_PATTERN, _randomChars(6));\n  }\n\n  // prefix and postfix\n  const name = [\n    opts.prefix || 'tmp-',\n    process.pid,\n    _randomChars(12),\n    opts.postfix || ''\n  ].join('');\n\n  return path.join(opts.dir || tmpDir, name);\n}\n\n/**\n * Gets a temporary file name.\n *\n * @param {(Options|tmpNameCallback)} options options or callback\n * @param {?tmpNameCallback} callback the callback function\n */\nfunction tmpName(options, callback) {\n  var\n    args = _parseArguments(options, callback),\n    opts = args[0],\n    cb = args[1],\n    tries = opts.name ? 1 : opts.tries || DEFAULT_TRIES;\n\n  if (isNaN(tries) || tries < 0)\n    return cb(new Error('Invalid tries'));\n\n  if (opts.template && !opts.template.match(TEMPLATE_PATTERN))\n    return cb(new Error('Invalid template provided'));\n\n  (function _getUniqueName() {\n    const name = _generateTmpName(opts);\n\n    // check whether the path exists then retry if needed\n    fs.stat(name, function (err) {\n      if (!err) {\n        if (tries-- > 0) return _getUniqueName();\n\n        return cb(new Error('Could not get a unique tmp filename, max tries reached ' + name));\n      }\n\n      cb(null, name);\n    });\n  }());\n}\n\n/**\n * Synchronous version of tmpName.\n *\n * @param {Object} options\n * @returns {string} the generated random name\n * @throws {Error} if the options are invalid or could not generate a filename\n */\nfunction tmpNameSync(options) {\n  var\n    args = _parseArguments(options),\n    opts = args[0],\n    tries = opts.name ? 1 : opts.tries || DEFAULT_TRIES;\n\n  if (isNaN(tries) || tries < 0)\n    throw new Error('Invalid tries');\n\n  if (opts.template && !opts.template.match(TEMPLATE_PATTERN))\n    throw new Error('Invalid template provided');\n\n  do {\n    const name = _generateTmpName(opts);\n    try {\n      fs.statSync(name);\n    } catch (e) {\n      return name;\n    }\n  } while (tries-- > 0);\n\n  throw new Error('Could not get a unique tmp filename, max tries reached');\n}\n\n/**\n * Creates and opens a temporary file.\n *\n * @param {(Options|fileCallback)} options the config options or the callback function\n * @param {?fileCallback} callback\n */\nfunction file(options, callback) {\n  var\n    args = _parseArguments(options, callback),\n    opts = args[0],\n    cb = args[1];\n\n  opts.postfix = (_isUndefined(opts.postfix)) ? '.tmp' : opts.postfix;\n\n  // gets a temporary filename\n  tmpName(opts, function _tmpNameCreated(err, name) {\n    if (err) return cb(err);\n\n    // create and open the file\n    fs.open(name, CREATE_FLAGS, opts.mode || FILE_MODE, function _fileCreated(err, fd) {\n      if (err) return cb(err);\n\n      if (opts.discardDescriptor) {\n        return fs.close(fd, function _discardCallback(err) {\n          if (err) {\n            // Low probability, and the file exists, so this could be\n            // ignored.  If it isn't we certainly need to unlink the\n            // file, and if that fails too its error is more\n            // important.\n            try {\n              fs.unlinkSync(name);\n            } catch (e) {\n              if (!isENOENT(e)) {\n                err = e;\n              }\n            }\n            return cb(err);\n          }\n          cb(null, name, undefined, _prepareTmpFileRemoveCallback(name, -1, opts));\n        });\n      }\n      if (opts.detachDescriptor) {\n        return cb(null, name, fd, _prepareTmpFileRemoveCallback(name, -1, opts));\n      }\n      cb(null, name, fd, _prepareTmpFileRemoveCallback(name, fd, opts));\n    });\n  });\n}\n\n/**\n * Synchronous version of file.\n *\n * @param {Options} options\n * @returns {FileSyncObject} object consists of name, fd and removeCallback\n * @throws {Error} if cannot create a file\n */\nfunction fileSync(options) {\n  var\n    args = _parseArguments(options),\n    opts = args[0];\n\n  opts.postfix = opts.postfix || '.tmp';\n\n  const discardOrDetachDescriptor = opts.discardDescriptor || opts.detachDescriptor;\n  const name = tmpNameSync(opts);\n  var fd = fs.openSync(name, CREATE_FLAGS, opts.mode || FILE_MODE);\n  if (opts.discardDescriptor) {\n    fs.closeSync(fd); \n    fd = undefined;\n  }\n\n  return {\n    name: name,\n    fd: fd,\n    removeCallback: _prepareTmpFileRemoveCallback(name, discardOrDetachDescriptor ? -1 : fd, opts)\n  };\n}\n\n/**\n * Removes files and folders in a directory recursively.\n *\n * @param {string} root\n * @private\n */\nfunction _rmdirRecursiveSync(root) {\n  const dirs = [root];\n\n  do {\n    var\n      dir = dirs.pop(),\n      deferred = false,\n      files = fs.readdirSync(dir);\n\n    for (var i = 0, length = files.length; i < length; i++) {\n      var\n        file = path.join(dir, files[i]),\n        stat = fs.lstatSync(file); // lstat so we don't recurse into symlinked directories\n\n      if (stat.isDirectory()) {\n        if (!deferred) {\n          deferred = true;\n          dirs.push(dir);\n        }\n        dirs.push(file);\n      } else {\n        fs.unlinkSync(file);\n      }\n    }\n\n    if (!deferred) {\n      fs.rmdirSync(dir);\n    }\n  } while (dirs.length !== 0);\n}\n\n/**\n * Creates a temporary directory.\n *\n * @param {(Options|dirCallback)} options the options or the callback function\n * @param {?dirCallback} callback\n */\nfunction dir(options, callback) {\n  var\n    args = _parseArguments(options, callback),\n    opts = args[0],\n    cb = args[1];\n\n  // gets a temporary filename\n  tmpName(opts, function _tmpNameCreated(err, name) {\n    if (err) return cb(err);\n\n    // create the directory\n    fs.mkdir(name, opts.mode || DIR_MODE, function _dirCreated(err) {\n      if (err) return cb(err);\n\n      cb(null, name, _prepareTmpDirRemoveCallback(name, opts));\n    });\n  });\n}\n\n/**\n * Synchronous version of dir.\n *\n * @param {Options} options\n * @returns {DirSyncObject} object consists of name and removeCallback\n * @throws {Error} if it cannot create a directory\n */\nfunction dirSync(options) {\n  var\n    args = _parseArguments(options),\n    opts = args[0];\n\n  const name = tmpNameSync(opts);\n  fs.mkdirSync(name, opts.mode || DIR_MODE);\n\n  return {\n    name: name,\n    removeCallback: _prepareTmpDirRemoveCallback(name, opts)\n  };\n}\n\n/**\n * Prepares the callback for removal of the temporary file.\n *\n * @param {string} name the path of the file\n * @param {number} fd file descriptor\n * @param {Object} opts\n * @returns {fileCallback}\n * @private\n */\nfunction _prepareTmpFileRemoveCallback(name, fd, opts) {\n  const removeCallback = _prepareRemoveCallback(function _removeCallback(fdPath) {\n    try {\n      if (0 <= fdPath[0]) {\n        fs.closeSync(fdPath[0]);\n      }\n    }\n    catch (e) {\n      // under some node/windows related circumstances, a temporary file\n      // may have not be created as expected or the file was already closed\n      // by the user, in which case we will simply ignore the error\n      if (!isEBADF(e) && !isENOENT(e)) {\n        // reraise any unanticipated error\n        throw e;\n      }\n    }\n    try {\n      fs.unlinkSync(fdPath[1]);\n    }\n    catch (e) {\n      if (!isENOENT(e)) {\n        // reraise any unanticipated error\n        throw e;\n      }\n    }\n  }, [fd, name]);\n\n  if (!opts.keep) {\n    _removeObjects.unshift(removeCallback);\n  }\n\n  return removeCallback;\n}\n\n/**\n * Prepares the callback for removal of the temporary directory.\n *\n * @param {string} name\n * @param {Object} opts\n * @returns {Function} the callback\n * @private\n */\nfunction _prepareTmpDirRemoveCallback(name, opts) {\n  const removeFunction = opts.unsafeCleanup ? _rmdirRecursiveSync : fs.rmdirSync.bind(fs);\n  const removeCallback = _prepareRemoveCallback(removeFunction, name);\n\n  if (!opts.keep) {\n    _removeObjects.unshift(removeCallback);\n  }\n\n  return removeCallback;\n}\n\n/**\n * Creates a guarded function wrapping the removeFunction call.\n *\n * @param {Function} removeFunction\n * @param {Object} arg\n * @returns {Function}\n * @private\n */\nfunction _prepareRemoveCallback(removeFunction, arg) {\n  var called = false;\n\n  return function _cleanupCallback(next) {\n    if (!called) {\n      const index = _removeObjects.indexOf(_cleanupCallback);\n      if (index >= 0) {\n        _removeObjects.splice(index, 1);\n      }\n\n      called = true;\n      removeFunction(arg);\n    }\n\n    if (next) next(null);\n  };\n}\n\n/**\n * The garbage collector.\n *\n * @private\n */\nfunction _garbageCollector() {\n  if (_uncaughtException && !_gracefulCleanup) {\n    return;\n  }\n\n  // the function being called removes itself from _removeObjects,\n  // loop until _removeObjects is empty\n  while (_removeObjects.length) {\n    try {\n      _removeObjects[0].call(null);\n    } catch (e) {\n      // already removed?\n    }\n  }\n}\n\n/**\n * Helper for testing against EBADF to compensate changes made to Node 7.x under Windows.\n */\nfunction isEBADF(error) {\n  return isExpectedError(error, -EBADF, 'EBADF');\n}\n\n/**\n * Helper for testing against ENOENT to compensate changes made to Node 7.x under Windows.\n */\nfunction isENOENT(error) {\n  return isExpectedError(error, -ENOENT, 'ENOENT');\n}\n\n/**\n * Helper to determine whether the expected error code matches the actual code and errno,\n * which will differ between the supported node versions.\n *\n * - Node >= 7.0:\n *   error.code {String}\n *   error.errno {String|Number} any numerical value will be negated\n *\n * - Node >= 6.0 < 7.0:\n *   error.code {String}\n *   error.errno {Number} negated\n *\n * - Node >= 4.0 < 6.0: introduces SystemError\n *   error.code {String}\n *   error.errno {Number} negated\n *\n * - Node >= 0.10 < 4.0:\n *   error.code {Number} negated\n *   error.errno n/a\n */\nfunction isExpectedError(error, code, errno) {\n  return error.code == code || error.code == errno;\n}\n\n/**\n * Sets the graceful cleanup.\n *\n * Also removes the created files and directories when an uncaught exception occurs.\n */\nfunction setGracefulCleanup() {\n  _gracefulCleanup = true;\n}\n\nconst version = process.versions.node.split('.').map(function (value) {\n  return parseInt(value, 10);\n});\n\nif (version[0] === 0 && (version[1] < 9 || version[1] === 9 && version[2] < 5)) {\n  process.addListener('uncaughtException', function _uncaughtExceptionThrown(err) {\n    _uncaughtException = true;\n    _garbageCollector();\n\n    throw err;\n  });\n}\n\nprocess.addListener('exit', function _exit(code) {\n  if (code) _uncaughtException = true;\n  _garbageCollector();\n});\n\n/**\n * Configuration options.\n *\n * @typedef {Object} Options\n * @property {?number} tries the number of tries before give up the name generation\n * @property {?string} template the \"mkstemp\" like filename template\n * @property {?string} name fix name\n * @property {?string} dir the tmp directory to use\n * @property {?string} prefix prefix for the generated name\n * @property {?string} postfix postfix for the generated name\n */\n\n/**\n * @typedef {Object} FileSyncObject\n * @property {string} name the name of the file\n * @property {string} fd the file descriptor\n * @property {fileCallback} removeCallback the callback function to remove the file\n */\n\n/**\n * @typedef {Object} DirSyncObject\n * @property {string} name the name of the directory\n * @property {fileCallback} removeCallback the callback function to remove the directory\n */\n\n/**\n * @callback tmpNameCallback\n * @param {?Error} err the error object if anything goes wrong\n * @param {string} name the temporary file name\n */\n\n/**\n * @callback fileCallback\n * @param {?Error} err the error object if anything goes wrong\n * @param {string} name the temporary file name\n * @param {number} fd the file descriptor\n * @param {cleanupCallback} fn the cleanup callback function\n */\n\n/**\n * @callback dirCallback\n * @param {?Error} err the error object if anything goes wrong\n * @param {string} name the temporary file name\n * @param {cleanupCallback} fn the cleanup callback function\n */\n\n/**\n * Removes the temporary created file or directory.\n *\n * @callback cleanupCallback\n * @param {simpleCallback} [next] function to call after entry was removed\n */\n\n/**\n * Callback function for function composition.\n * @see {@link https://github.com/raszi/node-tmp/issues/57|raszi/node-tmp#57}\n *\n * @callback simpleCallback\n */\n\n// exporting all the needed methods\nmodule.exports.tmpdir = tmpDir;\n\nmodule.exports.dir = dir;\nmodule.exports.dirSync = dirSync;\n\nmodule.exports.file = file;\nmodule.exports.fileSync = fileSync;\n\nmodule.exports.tmpName = tmpName;\nmodule.exports.tmpNameSync = tmpNameSync;\n\nmodule.exports.setGracefulCleanup = setGracefulCleanup;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAI,CAAC;AACxB,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAME,MAAM,GAAGF,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAMG,QAAQ,GAAGH,OAAO,CAAC,WAAW,CAAC;AACrC,MAAMI,EAAE,GAAGC,OAAO,CAACC,OAAO,CAAC,WAAW,CAAC;;AAEvC;AACA;AACA;AACA;EACE;AACF;AACA;AACA;EACEC,MAAM,GAAGJ,QAAQ,EAAE;EAEnB;EACAK,YAAY,GAAG,gEAAgE;EAE/EC,gBAAgB,GAAG,QAAQ;EAE3BC,aAAa,GAAG,CAAC;EAEjBC,YAAY,GAAG,CAACP,EAAE,CAACQ,OAAO,IAAIR,EAAE,CAACL,EAAE,CAACa,OAAO,KAAKR,EAAE,CAACS,MAAM,IAAIT,EAAE,CAACL,EAAE,CAACc,MAAM,CAAC,IAAIT,EAAE,CAACU,MAAM,IAAIV,EAAE,CAACL,EAAE,CAACe,MAAM,CAAC;EAExGC,KAAK,GAAGX,EAAE,CAACW,KAAK,IAAIX,EAAE,CAACY,EAAE,CAACC,KAAK,CAACF,KAAK;EACrCG,MAAM,GAAGd,EAAE,CAACc,MAAM,IAAId,EAAE,CAACY,EAAE,CAACC,KAAK,CAACC,MAAM;EAExCC,QAAQ,GAAG,GAAG,CAAC;EACfC,SAAS,GAAG,GAAG,CAAC;EAEhB;EACAC,cAAc,GAAG,EAAE;AAErB,IACEC,gBAAgB,GAAG,KAAK;EACxBC,kBAAkB,GAAG,KAAK;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,YAAY,CAACC,OAAO,EAAE;EAC7B,IACEC,KAAK,GAAG,EAAE;IACVC,GAAG,GAAG,IAAI;;EAEZ;EACA,IAAI;IACFA,GAAG,GAAGzB,MAAM,CAAC0B,WAAW,CAACH,OAAO,CAAC;EACnC,CAAC,CAAC,OAAOI,CAAC,EAAE;IACVF,GAAG,GAAGzB,MAAM,CAAC4B,iBAAiB,CAACL,OAAO,CAAC;EACzC;EAEA,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,OAAO,EAAEM,CAAC,EAAE,EAAE;IAChCL,KAAK,CAACM,IAAI,CAACxB,YAAY,CAACmB,GAAG,CAACI,CAAC,CAAC,GAAGvB,YAAY,CAACyB,MAAM,CAAC,CAAC;EACxD;EAEA,OAAOP,KAAK,CAACQ,IAAI,CAAC,EAAE,CAAC;AACvB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,YAAY,CAACC,GAAG,EAAE;EACzB,OAAO,OAAOA,GAAG,KAAK,WAAW;AACnC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,eAAe,CAACC,OAAO,EAAEC,QAAQ,EAAE;EAC1C,IAAI,OAAOD,OAAO,IAAI,UAAU,EAAE;IAChC,OAAO,CAACC,QAAQ,IAAI,CAAC,CAAC,EAAED,OAAO,CAAC;EAClC;EAEA,IAAIH,YAAY,CAACG,OAAO,CAAC,EAAE;IACzB,OAAO,CAAC,CAAC,CAAC,EAAEC,QAAQ,CAAC;EACvB;EAEA,OAAO,CAACD,OAAO,EAAEC,QAAQ,CAAC;AAC5B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,gBAAgB,CAACC,IAAI,EAAE;EAC9B,IAAIA,IAAI,CAACC,IAAI,EAAE;IACb,OAAOzC,IAAI,CAACiC,IAAI,CAACO,IAAI,CAACE,GAAG,IAAIpC,MAAM,EAAEkC,IAAI,CAACC,IAAI,CAAC;EACjD;;EAEA;EACA,IAAID,IAAI,CAACG,QAAQ,EAAE;IACjB,OAAOH,IAAI,CAACG,QAAQ,CAACC,OAAO,CAACpC,gBAAgB,EAAEe,YAAY,CAAC,CAAC,CAAC,CAAC;EACjE;;EAEA;EACA,MAAMkB,IAAI,GAAG,CACXD,IAAI,CAACK,MAAM,IAAI,MAAM,EACrBzC,OAAO,CAAC0C,GAAG,EACXvB,YAAY,CAAC,EAAE,CAAC,EAChBiB,IAAI,CAACO,OAAO,IAAI,EAAE,CACnB,CAACd,IAAI,CAAC,EAAE,CAAC;EAEV,OAAOjC,IAAI,CAACiC,IAAI,CAACO,IAAI,CAACE,GAAG,IAAIpC,MAAM,EAAEmC,IAAI,CAAC;AAC5C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASO,OAAO,CAACX,OAAO,EAAEC,QAAQ,EAAE;EAClC,IACEW,IAAI,GAAGb,eAAe,CAACC,OAAO,EAAEC,QAAQ,CAAC;IACzCE,IAAI,GAAGS,IAAI,CAAC,CAAC,CAAC;IACdC,EAAE,GAAGD,IAAI,CAAC,CAAC,CAAC;IACZE,KAAK,GAAGX,IAAI,CAACC,IAAI,GAAG,CAAC,GAAGD,IAAI,CAACW,KAAK,IAAI1C,aAAa;EAErD,IAAI2C,KAAK,CAACD,KAAK,CAAC,IAAIA,KAAK,GAAG,CAAC,EAC3B,OAAOD,EAAE,CAAC,IAAIG,KAAK,CAAC,eAAe,CAAC,CAAC;EAEvC,IAAIb,IAAI,CAACG,QAAQ,IAAI,CAACH,IAAI,CAACG,QAAQ,CAACW,KAAK,CAAC9C,gBAAgB,CAAC,EACzD,OAAO0C,EAAE,CAAC,IAAIG,KAAK,CAAC,2BAA2B,CAAC,CAAC;EAElD,UAASE,cAAc,GAAG;IACzB,MAAMd,IAAI,GAAGF,gBAAgB,CAACC,IAAI,CAAC;;IAEnC;IACA1C,EAAE,CAAC0D,IAAI,CAACf,IAAI,EAAE,UAAUgB,GAAG,EAAE;MAC3B,IAAI,CAACA,GAAG,EAAE;QACR,IAAIN,KAAK,EAAE,GAAG,CAAC,EAAE,OAAOI,cAAc,EAAE;QAExC,OAAOL,EAAE,CAAC,IAAIG,KAAK,CAAC,yDAAyD,GAAGZ,IAAI,CAAC,CAAC;MACxF;MAEAS,EAAE,CAAC,IAAI,EAAET,IAAI,CAAC;IAChB,CAAC,CAAC;EACJ,CAAC,GAAE;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASiB,WAAW,CAACrB,OAAO,EAAE;EAC5B,IACEY,IAAI,GAAGb,eAAe,CAACC,OAAO,CAAC;IAC/BG,IAAI,GAAGS,IAAI,CAAC,CAAC,CAAC;IACdE,KAAK,GAAGX,IAAI,CAACC,IAAI,GAAG,CAAC,GAAGD,IAAI,CAACW,KAAK,IAAI1C,aAAa;EAErD,IAAI2C,KAAK,CAACD,KAAK,CAAC,IAAIA,KAAK,GAAG,CAAC,EAC3B,MAAM,IAAIE,KAAK,CAAC,eAAe,CAAC;EAElC,IAAIb,IAAI,CAACG,QAAQ,IAAI,CAACH,IAAI,CAACG,QAAQ,CAACW,KAAK,CAAC9C,gBAAgB,CAAC,EACzD,MAAM,IAAI6C,KAAK,CAAC,2BAA2B,CAAC;EAE9C,GAAG;IACD,MAAMZ,IAAI,GAAGF,gBAAgB,CAACC,IAAI,CAAC;IACnC,IAAI;MACF1C,EAAE,CAAC6D,QAAQ,CAAClB,IAAI,CAAC;IACnB,CAAC,CAAC,OAAOb,CAAC,EAAE;MACV,OAAOa,IAAI;IACb;EACF,CAAC,QAAQU,KAAK,EAAE,GAAG,CAAC;EAEpB,MAAM,IAAIE,KAAK,CAAC,wDAAwD,CAAC;AAC3E;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASO,IAAI,CAACvB,OAAO,EAAEC,QAAQ,EAAE;EAC/B,IACEW,IAAI,GAAGb,eAAe,CAACC,OAAO,EAAEC,QAAQ,CAAC;IACzCE,IAAI,GAAGS,IAAI,CAAC,CAAC,CAAC;IACdC,EAAE,GAAGD,IAAI,CAAC,CAAC,CAAC;EAEdT,IAAI,CAACO,OAAO,GAAIb,YAAY,CAACM,IAAI,CAACO,OAAO,CAAC,GAAI,MAAM,GAAGP,IAAI,CAACO,OAAO;;EAEnE;EACAC,OAAO,CAACR,IAAI,EAAE,SAASqB,eAAe,CAACJ,GAAG,EAAEhB,IAAI,EAAE;IAChD,IAAIgB,GAAG,EAAE,OAAOP,EAAE,CAACO,GAAG,CAAC;;IAEvB;IACA3D,EAAE,CAACgE,IAAI,CAACrB,IAAI,EAAE/B,YAAY,EAAE8B,IAAI,CAACuB,IAAI,IAAI5C,SAAS,EAAE,SAAS6C,YAAY,CAACP,GAAG,EAAEQ,EAAE,EAAE;MACjF,IAAIR,GAAG,EAAE,OAAOP,EAAE,CAACO,GAAG,CAAC;MAEvB,IAAIjB,IAAI,CAAC0B,iBAAiB,EAAE;QAC1B,OAAOpE,EAAE,CAACqE,KAAK,CAACF,EAAE,EAAE,SAASG,gBAAgB,CAACX,GAAG,EAAE;UACjD,IAAIA,GAAG,EAAE;YACP;YACA;YACA;YACA;YACA,IAAI;cACF3D,EAAE,CAACuE,UAAU,CAAC5B,IAAI,CAAC;YACrB,CAAC,CAAC,OAAOb,CAAC,EAAE;cACV,IAAI,CAAC0C,QAAQ,CAAC1C,CAAC,CAAC,EAAE;gBAChB6B,GAAG,GAAG7B,CAAC;cACT;YACF;YACA,OAAOsB,EAAE,CAACO,GAAG,CAAC;UAChB;UACAP,EAAE,CAAC,IAAI,EAAET,IAAI,EAAE8B,SAAS,EAAEC,6BAA6B,CAAC/B,IAAI,EAAE,CAAC,CAAC,EAAED,IAAI,CAAC,CAAC;QAC1E,CAAC,CAAC;MACJ;MACA,IAAIA,IAAI,CAACiC,gBAAgB,EAAE;QACzB,OAAOvB,EAAE,CAAC,IAAI,EAAET,IAAI,EAAEwB,EAAE,EAAEO,6BAA6B,CAAC/B,IAAI,EAAE,CAAC,CAAC,EAAED,IAAI,CAAC,CAAC;MAC1E;MACAU,EAAE,CAAC,IAAI,EAAET,IAAI,EAAEwB,EAAE,EAAEO,6BAA6B,CAAC/B,IAAI,EAAEwB,EAAE,EAAEzB,IAAI,CAAC,CAAC;IACnE,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASkC,QAAQ,CAACrC,OAAO,EAAE;EACzB,IACEY,IAAI,GAAGb,eAAe,CAACC,OAAO,CAAC;IAC/BG,IAAI,GAAGS,IAAI,CAAC,CAAC,CAAC;EAEhBT,IAAI,CAACO,OAAO,GAAGP,IAAI,CAACO,OAAO,IAAI,MAAM;EAErC,MAAM4B,yBAAyB,GAAGnC,IAAI,CAAC0B,iBAAiB,IAAI1B,IAAI,CAACiC,gBAAgB;EACjF,MAAMhC,IAAI,GAAGiB,WAAW,CAAClB,IAAI,CAAC;EAC9B,IAAIyB,EAAE,GAAGnE,EAAE,CAAC8E,QAAQ,CAACnC,IAAI,EAAE/B,YAAY,EAAE8B,IAAI,CAACuB,IAAI,IAAI5C,SAAS,CAAC;EAChE,IAAIqB,IAAI,CAAC0B,iBAAiB,EAAE;IAC1BpE,EAAE,CAAC+E,SAAS,CAACZ,EAAE,CAAC;IAChBA,EAAE,GAAGM,SAAS;EAChB;EAEA,OAAO;IACL9B,IAAI,EAAEA,IAAI;IACVwB,EAAE,EAAEA,EAAE;IACNa,cAAc,EAAEN,6BAA6B,CAAC/B,IAAI,EAAEkC,yBAAyB,GAAG,CAAC,CAAC,GAAGV,EAAE,EAAEzB,IAAI;EAC/F,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASuC,mBAAmB,CAACC,IAAI,EAAE;EACjC,MAAMC,IAAI,GAAG,CAACD,IAAI,CAAC;EAEnB,GAAG;IACD,IACEtC,GAAG,GAAGuC,IAAI,CAACC,GAAG,EAAE;MAChBC,QAAQ,GAAG,KAAK;MAChBC,KAAK,GAAGtF,EAAE,CAACuF,WAAW,CAAC3C,GAAG,CAAC;IAE7B,KAAK,IAAIZ,CAAC,GAAG,CAAC,EAAEE,MAAM,GAAGoD,KAAK,CAACpD,MAAM,EAAEF,CAAC,GAAGE,MAAM,EAAEF,CAAC,EAAE,EAAE;MACtD,IACE8B,IAAI,GAAG5D,IAAI,CAACiC,IAAI,CAACS,GAAG,EAAE0C,KAAK,CAACtD,CAAC,CAAC,CAAC;QAC/B0B,IAAI,GAAG1D,EAAE,CAACwF,SAAS,CAAC1B,IAAI,CAAC,CAAC,CAAC;;MAE7B,IAAIJ,IAAI,CAAC+B,WAAW,EAAE,EAAE;QACtB,IAAI,CAACJ,QAAQ,EAAE;UACbA,QAAQ,GAAG,IAAI;UACfF,IAAI,CAAClD,IAAI,CAACW,GAAG,CAAC;QAChB;QACAuC,IAAI,CAAClD,IAAI,CAAC6B,IAAI,CAAC;MACjB,CAAC,MAAM;QACL9D,EAAE,CAACuE,UAAU,CAACT,IAAI,CAAC;MACrB;IACF;IAEA,IAAI,CAACuB,QAAQ,EAAE;MACbrF,EAAE,CAAC0F,SAAS,CAAC9C,GAAG,CAAC;IACnB;EACF,CAAC,QAAQuC,IAAI,CAACjD,MAAM,KAAK,CAAC;AAC5B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASU,GAAG,CAACL,OAAO,EAAEC,QAAQ,EAAE;EAC9B,IACEW,IAAI,GAAGb,eAAe,CAACC,OAAO,EAAEC,QAAQ,CAAC;IACzCE,IAAI,GAAGS,IAAI,CAAC,CAAC,CAAC;IACdC,EAAE,GAAGD,IAAI,CAAC,CAAC,CAAC;;EAEd;EACAD,OAAO,CAACR,IAAI,EAAE,SAASqB,eAAe,CAACJ,GAAG,EAAEhB,IAAI,EAAE;IAChD,IAAIgB,GAAG,EAAE,OAAOP,EAAE,CAACO,GAAG,CAAC;;IAEvB;IACA3D,EAAE,CAAC2F,KAAK,CAAChD,IAAI,EAAED,IAAI,CAACuB,IAAI,IAAI7C,QAAQ,EAAE,SAASwE,WAAW,CAACjC,GAAG,EAAE;MAC9D,IAAIA,GAAG,EAAE,OAAOP,EAAE,CAACO,GAAG,CAAC;MAEvBP,EAAE,CAAC,IAAI,EAAET,IAAI,EAAEkD,4BAA4B,CAAClD,IAAI,EAAED,IAAI,CAAC,CAAC;IAC1D,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASoD,OAAO,CAACvD,OAAO,EAAE;EACxB,IACEY,IAAI,GAAGb,eAAe,CAACC,OAAO,CAAC;IAC/BG,IAAI,GAAGS,IAAI,CAAC,CAAC,CAAC;EAEhB,MAAMR,IAAI,GAAGiB,WAAW,CAAClB,IAAI,CAAC;EAC9B1C,EAAE,CAAC+F,SAAS,CAACpD,IAAI,EAAED,IAAI,CAACuB,IAAI,IAAI7C,QAAQ,CAAC;EAEzC,OAAO;IACLuB,IAAI,EAAEA,IAAI;IACVqC,cAAc,EAAEa,4BAA4B,CAAClD,IAAI,EAAED,IAAI;EACzD,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASgC,6BAA6B,CAAC/B,IAAI,EAAEwB,EAAE,EAAEzB,IAAI,EAAE;EACrD,MAAMsC,cAAc,GAAGgB,sBAAsB,CAAC,SAASC,eAAe,CAACC,MAAM,EAAE;IAC7E,IAAI;MACF,IAAI,CAAC,IAAIA,MAAM,CAAC,CAAC,CAAC,EAAE;QAClBlG,EAAE,CAAC+E,SAAS,CAACmB,MAAM,CAAC,CAAC,CAAC,CAAC;MACzB;IACF,CAAC,CACD,OAAOpE,CAAC,EAAE;MACR;MACA;MACA;MACA,IAAI,CAACqE,OAAO,CAACrE,CAAC,CAAC,IAAI,CAAC0C,QAAQ,CAAC1C,CAAC,CAAC,EAAE;QAC/B;QACA,MAAMA,CAAC;MACT;IACF;IACA,IAAI;MACF9B,EAAE,CAACuE,UAAU,CAAC2B,MAAM,CAAC,CAAC,CAAC,CAAC;IAC1B,CAAC,CACD,OAAOpE,CAAC,EAAE;MACR,IAAI,CAAC0C,QAAQ,CAAC1C,CAAC,CAAC,EAAE;QAChB;QACA,MAAMA,CAAC;MACT;IACF;EACF,CAAC,EAAE,CAACqC,EAAE,EAAExB,IAAI,CAAC,CAAC;EAEd,IAAI,CAACD,IAAI,CAAC0D,IAAI,EAAE;IACd9E,cAAc,CAAC+E,OAAO,CAACrB,cAAc,CAAC;EACxC;EAEA,OAAOA,cAAc;AACvB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASa,4BAA4B,CAAClD,IAAI,EAAED,IAAI,EAAE;EAChD,MAAM4D,cAAc,GAAG5D,IAAI,CAAC6D,aAAa,GAAGtB,mBAAmB,GAAGjF,EAAE,CAAC0F,SAAS,CAACc,IAAI,CAACxG,EAAE,CAAC;EACvF,MAAMgF,cAAc,GAAGgB,sBAAsB,CAACM,cAAc,EAAE3D,IAAI,CAAC;EAEnE,IAAI,CAACD,IAAI,CAAC0D,IAAI,EAAE;IACd9E,cAAc,CAAC+E,OAAO,CAACrB,cAAc,CAAC;EACxC;EAEA,OAAOA,cAAc;AACvB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASgB,sBAAsB,CAACM,cAAc,EAAEG,GAAG,EAAE;EACnD,IAAIC,MAAM,GAAG,KAAK;EAElB,OAAO,SAASC,gBAAgB,CAACC,IAAI,EAAE;IACrC,IAAI,CAACF,MAAM,EAAE;MACX,MAAMG,KAAK,GAAGvF,cAAc,CAACwF,OAAO,CAACH,gBAAgB,CAAC;MACtD,IAAIE,KAAK,IAAI,CAAC,EAAE;QACdvF,cAAc,CAACyF,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;MACjC;MAEAH,MAAM,GAAG,IAAI;MACbJ,cAAc,CAACG,GAAG,CAAC;IACrB;IAEA,IAAIG,IAAI,EAAEA,IAAI,CAAC,IAAI,CAAC;EACtB,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASI,iBAAiB,GAAG;EAC3B,IAAIxF,kBAAkB,IAAI,CAACD,gBAAgB,EAAE;IAC3C;EACF;;EAEA;EACA;EACA,OAAOD,cAAc,CAACY,MAAM,EAAE;IAC5B,IAAI;MACFZ,cAAc,CAAC,CAAC,CAAC,CAAC2F,IAAI,CAAC,IAAI,CAAC;IAC9B,CAAC,CAAC,OAAOnF,CAAC,EAAE;MACV;IAAA;EAEJ;AACF;;AAEA;AACA;AACA;AACA,SAASqE,OAAO,CAACe,KAAK,EAAE;EACtB,OAAOC,eAAe,CAACD,KAAK,EAAE,CAAClG,KAAK,EAAE,OAAO,CAAC;AAChD;;AAEA;AACA;AACA;AACA,SAASwD,QAAQ,CAAC0C,KAAK,EAAE;EACvB,OAAOC,eAAe,CAACD,KAAK,EAAE,CAAC/F,MAAM,EAAE,QAAQ,CAAC;AAClD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASgG,eAAe,CAACD,KAAK,EAAEE,IAAI,EAAElG,KAAK,EAAE;EAC3C,OAAOgG,KAAK,CAACE,IAAI,IAAIA,IAAI,IAAIF,KAAK,CAACE,IAAI,IAAIlG,KAAK;AAClD;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASmG,kBAAkB,GAAG;EAC5B9F,gBAAgB,GAAG,IAAI;AACzB;AAEA,MAAM+F,OAAO,GAAGhH,OAAO,CAACiH,QAAQ,CAACC,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,UAAU/F,KAAK,EAAE;EACpE,OAAOgG,QAAQ,CAAChG,KAAK,EAAE,EAAE,CAAC;AAC5B,CAAC,CAAC;AAEF,IAAI2F,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,KAAKA,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,IAAIA,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,IAAIA,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE;EAC9EhH,OAAO,CAACsH,WAAW,CAAC,mBAAmB,EAAE,SAASC,wBAAwB,CAAClE,GAAG,EAAE;IAC9EnC,kBAAkB,GAAG,IAAI;IACzBwF,iBAAiB,EAAE;IAEnB,MAAMrD,GAAG;EACX,CAAC,CAAC;AACJ;AAEArD,OAAO,CAACsH,WAAW,CAAC,MAAM,EAAE,SAASE,KAAK,CAACV,IAAI,EAAE;EAC/C,IAAIA,IAAI,EAAE5F,kBAAkB,GAAG,IAAI;EACnCwF,iBAAiB,EAAE;AACrB,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACAe,MAAM,CAACC,OAAO,CAACC,MAAM,GAAGzH,MAAM;AAE9BuH,MAAM,CAACC,OAAO,CAACpF,GAAG,GAAGA,GAAG;AACxBmF,MAAM,CAACC,OAAO,CAAClC,OAAO,GAAGA,OAAO;AAEhCiC,MAAM,CAACC,OAAO,CAAClE,IAAI,GAAGA,IAAI;AAC1BiE,MAAM,CAACC,OAAO,CAACpD,QAAQ,GAAGA,QAAQ;AAElCmD,MAAM,CAACC,OAAO,CAAC9E,OAAO,GAAGA,OAAO;AAChC6E,MAAM,CAACC,OAAO,CAACpE,WAAW,GAAGA,WAAW;AAExCmE,MAAM,CAACC,OAAO,CAACX,kBAAkB,GAAGA,kBAAkB"},"metadata":{},"sourceType":"script","externalDependencies":[]}