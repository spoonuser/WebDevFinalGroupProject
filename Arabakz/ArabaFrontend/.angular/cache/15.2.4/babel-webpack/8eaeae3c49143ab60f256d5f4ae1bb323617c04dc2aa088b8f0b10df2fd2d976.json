{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst codegen_1 = require(\"../../compile/codegen\");\nconst error = {\n  message: ({\n    schemaCode\n  }) => (0, codegen_1.str)`must be multiple of ${schemaCode}`,\n  params: ({\n    schemaCode\n  }) => (0, codegen_1._)`{multipleOf: ${schemaCode}}`\n};\nconst def = {\n  keyword: \"multipleOf\",\n  type: \"number\",\n  schemaType: \"number\",\n  $data: true,\n  error,\n  code(cxt) {\n    const {\n      gen,\n      data,\n      schemaCode,\n      it\n    } = cxt;\n    // const bdt = bad$DataType(schemaCode, <string>def.schemaType, $data)\n    const prec = it.opts.multipleOfPrecision;\n    const res = gen.let(\"res\");\n    const invalid = prec ? (0, codegen_1._)`Math.abs(Math.round(${res}) - ${res}) > 1e-${prec}` : (0, codegen_1._)`${res} !== parseInt(${res})`;\n    cxt.fail$data((0, codegen_1._)`(${schemaCode} === 0 || (${res} = ${data}/${schemaCode}, ${invalid}))`);\n  }\n};\nexports.default = def;","map":{"version":3,"names":["Object","defineProperty","exports","value","codegen_1","require","error","message","schemaCode","str","params","_","def","keyword","type","schemaType","$data","code","cxt","gen","data","it","prec","opts","multipleOfPrecision","res","let","invalid","fail$data","default"],"sources":["/Users/sabyrzhanolzhabay/Web-Dev/Arabakz/ArabaFrontend/node_modules/ajv/dist/vocabularies/validation/multipleOf.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst codegen_1 = require(\"../../compile/codegen\");\nconst error = {\n    message: ({ schemaCode }) => (0, codegen_1.str) `must be multiple of ${schemaCode}`,\n    params: ({ schemaCode }) => (0, codegen_1._) `{multipleOf: ${schemaCode}}`,\n};\nconst def = {\n    keyword: \"multipleOf\",\n    type: \"number\",\n    schemaType: \"number\",\n    $data: true,\n    error,\n    code(cxt) {\n        const { gen, data, schemaCode, it } = cxt;\n        // const bdt = bad$DataType(schemaCode, <string>def.schemaType, $data)\n        const prec = it.opts.multipleOfPrecision;\n        const res = gen.let(\"res\");\n        const invalid = prec\n            ? (0, codegen_1._) `Math.abs(Math.round(${res}) - ${res}) > 1e-${prec}`\n            : (0, codegen_1._) `${res} !== parseInt(${res})`;\n        cxt.fail$data((0, codegen_1._) `(${schemaCode} === 0 || (${res} = ${data}/${schemaCode}, ${invalid}))`);\n    },\n};\nexports.default = def;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,MAAMC,SAAS,GAAGC,OAAO,CAAC,uBAAuB,CAAC;AAClD,MAAMC,KAAK,GAAG;EACVC,OAAO,EAAE,CAAC;IAAEC;EAAW,CAAC,KAAK,CAAC,CAAC,EAAEJ,SAAS,CAACK,GAAG,CAAG,uBAAsBD,UAAW,EAAC;EACnFE,MAAM,EAAE,CAAC;IAAEF;EAAW,CAAC,KAAK,CAAC,CAAC,EAAEJ,SAAS,CAACO,CAAC,CAAG,gBAAeH,UAAW;AAC5E,CAAC;AACD,MAAMI,GAAG,GAAG;EACRC,OAAO,EAAE,YAAY;EACrBC,IAAI,EAAE,QAAQ;EACdC,UAAU,EAAE,QAAQ;EACpBC,KAAK,EAAE,IAAI;EACXV,KAAK;EACLW,IAAI,CAACC,GAAG,EAAE;IACN,MAAM;MAAEC,GAAG;MAAEC,IAAI;MAAEZ,UAAU;MAAEa;IAAG,CAAC,GAAGH,GAAG;IACzC;IACA,MAAMI,IAAI,GAAGD,EAAE,CAACE,IAAI,CAACC,mBAAmB;IACxC,MAAMC,GAAG,GAAGN,GAAG,CAACO,GAAG,CAAC,KAAK,CAAC;IAC1B,MAAMC,OAAO,GAAGL,IAAI,GACd,CAAC,CAAC,EAAElB,SAAS,CAACO,CAAC,CAAG,uBAAsBc,GAAI,OAAMA,GAAI,UAASH,IAAK,EAAC,GACrE,CAAC,CAAC,EAAElB,SAAS,CAACO,CAAC,CAAG,GAAEc,GAAI,iBAAgBA,GAAI,GAAE;IACpDP,GAAG,CAACU,SAAS,CAAC,CAAC,CAAC,EAAExB,SAAS,CAACO,CAAC,CAAG,IAAGH,UAAW,cAAaiB,GAAI,MAAKL,IAAK,IAAGZ,UAAW,KAAImB,OAAQ,IAAG,CAAC;EAC3G;AACJ,CAAC;AACDzB,OAAO,CAAC2B,OAAO,GAAGjB,GAAG"},"metadata":{},"sourceType":"script","externalDependencies":[]}