{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.trimNewlines = exports.stripIndents = exports.stripIndent = exports.indentBy = exports.oneLine = void 0;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction oneLine(strings, ...values) {\n  const endResult = String.raw(strings, ...values);\n  return endResult.replace(/(?:\\r?\\n(?:\\s*))+/gm, ' ').trim();\n}\nexports.oneLine = oneLine;\nfunction indentBy(indentations) {\n  let i = '';\n  while (indentations--) {\n    i += ' ';\n  }\n  return (strings, ...values) => {\n    return i + stripIndent(strings, ...values).replace(/\\n/g, '\\n' + i);\n  };\n}\nexports.indentBy = indentBy;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction stripIndent(strings, ...values) {\n  const endResult = String.raw(strings, ...values);\n  // remove the shortest leading indentation from each line\n  const match = endResult.match(/^[ \\t]*(?=\\S)/gm);\n  // return early if there's nothing to strip\n  if (match === null) {\n    return endResult;\n  }\n  const indent = Math.min(...match.map(el => el.length));\n  const regexp = new RegExp('^[ \\\\t]{' + indent + '}', 'gm');\n  return (indent > 0 ? endResult.replace(regexp, '') : endResult).trim();\n}\nexports.stripIndent = stripIndent;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction stripIndents(strings, ...values) {\n  return String.raw(strings, ...values).split('\\n').map(line => line.trim()).join('\\n').trim();\n}\nexports.stripIndents = stripIndents;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction trimNewlines(strings, ...values) {\n  const endResult = String.raw(strings, ...values);\n  return endResult\n  // Remove the newline at the start.\n  .replace(/^(?:\\r?\\n)+/, '')\n  // Remove the newline at the end and following whitespace.\n  .replace(/(?:\\r?\\n(?:\\s*))$/, '');\n}\nexports.trimNewlines = trimNewlines;","map":{"version":3,"names":["Object","defineProperty","exports","value","trimNewlines","stripIndents","stripIndent","indentBy","oneLine","strings","values","endResult","String","raw","replace","trim","indentations","i","match","indent","Math","min","map","el","length","regexp","RegExp","split","line","join"],"sources":["/Users/sabyrzhanolzhabay/Web-Dev/Arabakz/ArabaFrontend/node_modules/@angular/cli/node_modules/@angular-devkit/core/src/utils/literals.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.trimNewlines = exports.stripIndents = exports.stripIndent = exports.indentBy = exports.oneLine = void 0;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction oneLine(strings, ...values) {\n    const endResult = String.raw(strings, ...values);\n    return endResult.replace(/(?:\\r?\\n(?:\\s*))+/gm, ' ').trim();\n}\nexports.oneLine = oneLine;\nfunction indentBy(indentations) {\n    let i = '';\n    while (indentations--) {\n        i += ' ';\n    }\n    return (strings, ...values) => {\n        return i + stripIndent(strings, ...values).replace(/\\n/g, '\\n' + i);\n    };\n}\nexports.indentBy = indentBy;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction stripIndent(strings, ...values) {\n    const endResult = String.raw(strings, ...values);\n    // remove the shortest leading indentation from each line\n    const match = endResult.match(/^[ \\t]*(?=\\S)/gm);\n    // return early if there's nothing to strip\n    if (match === null) {\n        return endResult;\n    }\n    const indent = Math.min(...match.map((el) => el.length));\n    const regexp = new RegExp('^[ \\\\t]{' + indent + '}', 'gm');\n    return (indent > 0 ? endResult.replace(regexp, '') : endResult).trim();\n}\nexports.stripIndent = stripIndent;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction stripIndents(strings, ...values) {\n    return String.raw(strings, ...values)\n        .split('\\n')\n        .map((line) => line.trim())\n        .join('\\n')\n        .trim();\n}\nexports.stripIndents = stripIndents;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction trimNewlines(strings, ...values) {\n    const endResult = String.raw(strings, ...values);\n    return (endResult\n        // Remove the newline at the start.\n        .replace(/^(?:\\r?\\n)+/, '')\n        // Remove the newline at the end and following whitespace.\n        .replace(/(?:\\r?\\n(?:\\s*))$/, ''));\n}\nexports.trimNewlines = trimNewlines;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,YAAY,GAAGF,OAAO,CAACG,YAAY,GAAGH,OAAO,CAACI,WAAW,GAAGJ,OAAO,CAACK,QAAQ,GAAGL,OAAO,CAACM,OAAO,GAAG,KAAK,CAAC;AAC/G;AACA,SAASA,OAAO,CAACC,OAAO,EAAE,GAAGC,MAAM,EAAE;EACjC,MAAMC,SAAS,GAAGC,MAAM,CAACC,GAAG,CAACJ,OAAO,EAAE,GAAGC,MAAM,CAAC;EAChD,OAAOC,SAAS,CAACG,OAAO,CAAC,qBAAqB,EAAE,GAAG,CAAC,CAACC,IAAI,EAAE;AAC/D;AACAb,OAAO,CAACM,OAAO,GAAGA,OAAO;AACzB,SAASD,QAAQ,CAACS,YAAY,EAAE;EAC5B,IAAIC,CAAC,GAAG,EAAE;EACV,OAAOD,YAAY,EAAE,EAAE;IACnBC,CAAC,IAAI,GAAG;EACZ;EACA,OAAO,CAACR,OAAO,EAAE,GAAGC,MAAM,KAAK;IAC3B,OAAOO,CAAC,GAAGX,WAAW,CAACG,OAAO,EAAE,GAAGC,MAAM,CAAC,CAACI,OAAO,CAAC,KAAK,EAAE,IAAI,GAAGG,CAAC,CAAC;EACvE,CAAC;AACL;AACAf,OAAO,CAACK,QAAQ,GAAGA,QAAQ;AAC3B;AACA,SAASD,WAAW,CAACG,OAAO,EAAE,GAAGC,MAAM,EAAE;EACrC,MAAMC,SAAS,GAAGC,MAAM,CAACC,GAAG,CAACJ,OAAO,EAAE,GAAGC,MAAM,CAAC;EAChD;EACA,MAAMQ,KAAK,GAAGP,SAAS,CAACO,KAAK,CAAC,iBAAiB,CAAC;EAChD;EACA,IAAIA,KAAK,KAAK,IAAI,EAAE;IAChB,OAAOP,SAAS;EACpB;EACA,MAAMQ,MAAM,GAAGC,IAAI,CAACC,GAAG,CAAC,GAAGH,KAAK,CAACI,GAAG,CAAEC,EAAE,IAAKA,EAAE,CAACC,MAAM,CAAC,CAAC;EACxD,MAAMC,MAAM,GAAG,IAAIC,MAAM,CAAC,UAAU,GAAGP,MAAM,GAAG,GAAG,EAAE,IAAI,CAAC;EAC1D,OAAO,CAACA,MAAM,GAAG,CAAC,GAAGR,SAAS,CAACG,OAAO,CAACW,MAAM,EAAE,EAAE,CAAC,GAAGd,SAAS,EAAEI,IAAI,EAAE;AAC1E;AACAb,OAAO,CAACI,WAAW,GAAGA,WAAW;AACjC;AACA,SAASD,YAAY,CAACI,OAAO,EAAE,GAAGC,MAAM,EAAE;EACtC,OAAOE,MAAM,CAACC,GAAG,CAACJ,OAAO,EAAE,GAAGC,MAAM,CAAC,CAChCiB,KAAK,CAAC,IAAI,CAAC,CACXL,GAAG,CAAEM,IAAI,IAAKA,IAAI,CAACb,IAAI,EAAE,CAAC,CAC1Bc,IAAI,CAAC,IAAI,CAAC,CACVd,IAAI,EAAE;AACf;AACAb,OAAO,CAACG,YAAY,GAAGA,YAAY;AACnC;AACA,SAASD,YAAY,CAACK,OAAO,EAAE,GAAGC,MAAM,EAAE;EACtC,MAAMC,SAAS,GAAGC,MAAM,CAACC,GAAG,CAACJ,OAAO,EAAE,GAAGC,MAAM,CAAC;EAChD,OAAQC;EACJ;EAAA,CACCG,OAAO,CAAC,aAAa,EAAE,EAAE;EAC1B;EAAA,CACCA,OAAO,CAAC,mBAAmB,EAAE,EAAE,CAAC;AACzC;AACAZ,OAAO,CAACE,YAAY,GAAGA,YAAY"},"metadata":{},"sourceType":"script","externalDependencies":[]}