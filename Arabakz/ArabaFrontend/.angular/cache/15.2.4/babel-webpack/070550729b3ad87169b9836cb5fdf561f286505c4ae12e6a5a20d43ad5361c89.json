{"ast":null,"code":"'use strict';\n\n/**\n * `input` type prompt\n */\nconst chalk = require('chalk');\nconst {\n  map,\n  takeUntil\n} = require('rxjs/operators');\nconst Base = require('./base');\nconst observe = require('../utils/events');\nclass InputPrompt extends Base {\n  /**\n   * Start the Inquiry session\n   * @param  {Function} cb      Callback when prompt is done\n   * @return {this}\n   */\n\n  _run(cb) {\n    this.done = cb;\n\n    // Once user confirm (enter key)\n    const events = observe(this.rl);\n    const submit = events.line.pipe(map(this.filterInput.bind(this)));\n    const validation = this.handleSubmitEvents(submit);\n    validation.success.forEach(this.onEnd.bind(this));\n    validation.error.forEach(this.onError.bind(this));\n    events.keypress.pipe(takeUntil(validation.success)).forEach(this.onKeypress.bind(this));\n\n    // Init\n    this.render();\n    return this;\n  }\n\n  /**\n   * Render the prompt to screen\n   * @return {InputPrompt} self\n   */\n\n  render(error) {\n    let bottomContent = '';\n    let appendContent = '';\n    let message = this.getQuestion();\n    const {\n      transformer\n    } = this.opt;\n    const isFinal = this.status === 'answered';\n    if (isFinal) {\n      appendContent = this.answer;\n    } else {\n      appendContent = this.rl.line;\n    }\n    if (transformer) {\n      message += transformer(appendContent, this.answers, {\n        isFinal\n      });\n    } else {\n      message += isFinal ? chalk.cyan(appendContent) : appendContent;\n    }\n    if (error) {\n      bottomContent = chalk.red('>> ') + error;\n    }\n    this.screen.render(message, bottomContent);\n  }\n\n  /**\n   * When user press `enter` key\n   */\n\n  filterInput(input) {\n    if (!input) {\n      return this.opt.default == null ? '' : this.opt.default;\n    }\n    return input;\n  }\n  onEnd(state) {\n    this.answer = state.value;\n    this.status = 'answered';\n\n    // Re-render prompt\n    this.render();\n    this.screen.done();\n    this.done(state.value);\n  }\n  onError({\n    value = '',\n    isValid\n  }) {\n    this.rl.line += value;\n    this.rl.cursor += value.length;\n    this.render(isValid);\n  }\n\n  /**\n   * When user press a key\n   */\n\n  onKeypress() {\n    this.state = 'touched';\n    this.render();\n  }\n}\nmodule.exports = InputPrompt;","map":{"version":3,"names":["chalk","require","map","takeUntil","Base","observe","InputPrompt","_run","cb","done","events","rl","submit","line","pipe","filterInput","bind","validation","handleSubmitEvents","success","forEach","onEnd","error","onError","keypress","onKeypress","render","bottomContent","appendContent","message","getQuestion","transformer","opt","isFinal","status","answer","answers","cyan","red","screen","input","default","state","value","isValid","cursor","length","module","exports"],"sources":["/Users/sabyrzhanolzhabay/Web-Dev/Arabakz/ArabaFrontend/node_modules/inquirer/lib/prompts/input.js"],"sourcesContent":["'use strict';\n/**\n * `input` type prompt\n */\n\nconst chalk = require('chalk');\nconst { map, takeUntil } = require('rxjs/operators');\nconst Base = require('./base');\nconst observe = require('../utils/events');\n\nclass InputPrompt extends Base {\n  /**\n   * Start the Inquiry session\n   * @param  {Function} cb      Callback when prompt is done\n   * @return {this}\n   */\n\n  _run(cb) {\n    this.done = cb;\n\n    // Once user confirm (enter key)\n    const events = observe(this.rl);\n    const submit = events.line.pipe(map(this.filterInput.bind(this)));\n\n    const validation = this.handleSubmitEvents(submit);\n    validation.success.forEach(this.onEnd.bind(this));\n    validation.error.forEach(this.onError.bind(this));\n\n    events.keypress\n      .pipe(takeUntil(validation.success))\n      .forEach(this.onKeypress.bind(this));\n\n    // Init\n    this.render();\n\n    return this;\n  }\n\n  /**\n   * Render the prompt to screen\n   * @return {InputPrompt} self\n   */\n\n  render(error) {\n    let bottomContent = '';\n    let appendContent = '';\n    let message = this.getQuestion();\n    const { transformer } = this.opt;\n    const isFinal = this.status === 'answered';\n\n    if (isFinal) {\n      appendContent = this.answer;\n    } else {\n      appendContent = this.rl.line;\n    }\n\n    if (transformer) {\n      message += transformer(appendContent, this.answers, { isFinal });\n    } else {\n      message += isFinal ? chalk.cyan(appendContent) : appendContent;\n    }\n\n    if (error) {\n      bottomContent = chalk.red('>> ') + error;\n    }\n\n    this.screen.render(message, bottomContent);\n  }\n\n  /**\n   * When user press `enter` key\n   */\n\n  filterInput(input) {\n    if (!input) {\n      return this.opt.default == null ? '' : this.opt.default;\n    }\n\n    return input;\n  }\n\n  onEnd(state) {\n    this.answer = state.value;\n    this.status = 'answered';\n\n    // Re-render prompt\n    this.render();\n\n    this.screen.done();\n    this.done(state.value);\n  }\n\n  onError({ value = '', isValid }) {\n    this.rl.line += value;\n    this.rl.cursor += value.length;\n    this.render(isValid);\n  }\n\n  /**\n   * When user press a key\n   */\n\n  onKeypress() {\n    this.state = 'touched';\n\n    this.render();\n  }\n}\n\nmodule.exports = InputPrompt;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}