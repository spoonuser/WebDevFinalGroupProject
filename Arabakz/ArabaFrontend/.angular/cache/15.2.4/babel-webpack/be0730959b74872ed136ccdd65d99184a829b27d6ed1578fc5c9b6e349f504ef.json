{"ast":null,"code":"\"use strict\";\n\nvar defaults = require('defaults');\nvar combining = require('./combining');\nvar DEFAULTS = {\n  nul: 0,\n  control: 0\n};\nmodule.exports = function wcwidth(str) {\n  return wcswidth(str, DEFAULTS);\n};\nmodule.exports.config = function (opts) {\n  opts = defaults(opts || {}, DEFAULTS);\n  return function wcwidth(str) {\n    return wcswidth(str, opts);\n  };\n};\n\n/*\n *  The following functions define the column width of an ISO 10646\n *  character as follows:\n *  - The null character (U+0000) has a column width of 0.\n *  - Other C0/C1 control characters and DEL will lead to a return value\n *    of -1.\n *  - Non-spacing and enclosing combining characters (general category\n *    code Mn or Me in the\n *    Unicode database) have a column width of 0.\n *  - SOFT HYPHEN (U+00AD) has a column width of 1.\n *  - Other format characters (general category code Cf in the Unicode\n *    database) and ZERO WIDTH\n *    SPACE (U+200B) have a column width of 0.\n *  - Hangul Jamo medial vowels and final consonants (U+1160-U+11FF)\n *    have a column width of 0.\n *  - Spacing characters in the East Asian Wide (W) or East Asian\n *    Full-width (F) category as\n *    defined in Unicode Technical Report #11 have a column width of 2.\n *  - All remaining characters (including all printable ISO 8859-1 and\n *    WGL4 characters, Unicode control characters, etc.) have a column\n *    width of 1.\n *  This implementation assumes that characters are encoded in ISO 10646.\n*/\n\nfunction wcswidth(str, opts) {\n  if (typeof str !== 'string') return wcwidth(str, opts);\n  var s = 0;\n  for (var i = 0; i < str.length; i++) {\n    var n = wcwidth(str.charCodeAt(i), opts);\n    if (n < 0) return -1;\n    s += n;\n  }\n  return s;\n}\nfunction wcwidth(ucs, opts) {\n  // test for 8-bit control characters\n  if (ucs === 0) return opts.nul;\n  if (ucs < 32 || ucs >= 0x7f && ucs < 0xa0) return opts.control;\n\n  // binary search in table of non-spacing characters\n  if (bisearch(ucs)) return 0;\n\n  // if we arrive here, ucs is not a combining or C0/C1 control character\n  return 1 + (ucs >= 0x1100 && (ucs <= 0x115f ||\n  // Hangul Jamo init. consonants\n  ucs == 0x2329 || ucs == 0x232a || ucs >= 0x2e80 && ucs <= 0xa4cf && ucs != 0x303f ||\n  // CJK ... Yi\n  ucs >= 0xac00 && ucs <= 0xd7a3 ||\n  // Hangul Syllables\n  ucs >= 0xf900 && ucs <= 0xfaff ||\n  // CJK Compatibility Ideographs\n  ucs >= 0xfe10 && ucs <= 0xfe19 ||\n  // Vertical forms\n  ucs >= 0xfe30 && ucs <= 0xfe6f ||\n  // CJK Compatibility Forms\n  ucs >= 0xff00 && ucs <= 0xff60 ||\n  // Fullwidth Forms\n  ucs >= 0xffe0 && ucs <= 0xffe6 || ucs >= 0x20000 && ucs <= 0x2fffd || ucs >= 0x30000 && ucs <= 0x3fffd));\n}\nfunction bisearch(ucs) {\n  var min = 0;\n  var max = combining.length - 1;\n  var mid;\n  if (ucs < combining[0][0] || ucs > combining[max][1]) return false;\n  while (max >= min) {\n    mid = Math.floor((min + max) / 2);\n    if (ucs > combining[mid][1]) min = mid + 1;else if (ucs < combining[mid][0]) max = mid - 1;else return true;\n  }\n  return false;\n}","map":{"version":3,"names":["defaults","require","combining","DEFAULTS","nul","control","module","exports","wcwidth","str","wcswidth","config","opts","s","i","length","n","charCodeAt","ucs","bisearch","min","max","mid","Math","floor"],"sources":["/Users/sabyrzhanolzhabay/Web-Dev/Arabakz/ArabaFrontend/node_modules/wcwidth/index.js"],"sourcesContent":["\"use strict\"\n\nvar defaults = require('defaults')\nvar combining = require('./combining')\n\nvar DEFAULTS = {\n  nul: 0,\n  control: 0\n}\n\nmodule.exports = function wcwidth(str) {\n  return wcswidth(str, DEFAULTS)\n}\n\nmodule.exports.config = function(opts) {\n  opts = defaults(opts || {}, DEFAULTS)\n  return function wcwidth(str) {\n    return wcswidth(str, opts)\n  }\n}\n\n/*\n *  The following functions define the column width of an ISO 10646\n *  character as follows:\n *  - The null character (U+0000) has a column width of 0.\n *  - Other C0/C1 control characters and DEL will lead to a return value\n *    of -1.\n *  - Non-spacing and enclosing combining characters (general category\n *    code Mn or Me in the\n *    Unicode database) have a column width of 0.\n *  - SOFT HYPHEN (U+00AD) has a column width of 1.\n *  - Other format characters (general category code Cf in the Unicode\n *    database) and ZERO WIDTH\n *    SPACE (U+200B) have a column width of 0.\n *  - Hangul Jamo medial vowels and final consonants (U+1160-U+11FF)\n *    have a column width of 0.\n *  - Spacing characters in the East Asian Wide (W) or East Asian\n *    Full-width (F) category as\n *    defined in Unicode Technical Report #11 have a column width of 2.\n *  - All remaining characters (including all printable ISO 8859-1 and\n *    WGL4 characters, Unicode control characters, etc.) have a column\n *    width of 1.\n *  This implementation assumes that characters are encoded in ISO 10646.\n*/\n\nfunction wcswidth(str, opts) {\n  if (typeof str !== 'string') return wcwidth(str, opts)\n\n  var s = 0\n  for (var i = 0; i < str.length; i++) {\n    var n = wcwidth(str.charCodeAt(i), opts)\n    if (n < 0) return -1\n    s += n\n  }\n\n  return s\n}\n\nfunction wcwidth(ucs, opts) {\n  // test for 8-bit control characters\n  if (ucs === 0) return opts.nul\n  if (ucs < 32 || (ucs >= 0x7f && ucs < 0xa0)) return opts.control\n\n  // binary search in table of non-spacing characters\n  if (bisearch(ucs)) return 0\n\n  // if we arrive here, ucs is not a combining or C0/C1 control character\n  return 1 +\n      (ucs >= 0x1100 &&\n       (ucs <= 0x115f ||                       // Hangul Jamo init. consonants\n        ucs == 0x2329 || ucs == 0x232a ||\n        (ucs >= 0x2e80 && ucs <= 0xa4cf &&\n         ucs != 0x303f) ||                     // CJK ... Yi\n        (ucs >= 0xac00 && ucs <= 0xd7a3) ||    // Hangul Syllables\n        (ucs >= 0xf900 && ucs <= 0xfaff) ||    // CJK Compatibility Ideographs\n        (ucs >= 0xfe10 && ucs <= 0xfe19) ||    // Vertical forms\n        (ucs >= 0xfe30 && ucs <= 0xfe6f) ||    // CJK Compatibility Forms\n        (ucs >= 0xff00 && ucs <= 0xff60) ||    // Fullwidth Forms\n        (ucs >= 0xffe0 && ucs <= 0xffe6) ||\n        (ucs >= 0x20000 && ucs <= 0x2fffd) ||\n        (ucs >= 0x30000 && ucs <= 0x3fffd)));\n}\n\nfunction bisearch(ucs) {\n  var min = 0\n  var max = combining.length - 1\n  var mid\n\n  if (ucs < combining[0][0] || ucs > combining[max][1]) return false\n\n  while (max >= min) {\n    mid = Math.floor((min + max) / 2)\n    if (ucs > combining[mid][1]) min = mid + 1\n    else if (ucs < combining[mid][0]) max = mid - 1\n    else return true\n  }\n\n  return false\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}