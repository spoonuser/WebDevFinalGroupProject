{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isJobHandler = exports.JobState = exports.JobOutboundMessageKind = exports.JobInboundMessageKind = void 0;\n/**\n * Messages that can be sent TO a job. The job needs to listen to those.\n */\nvar JobInboundMessageKind;\n(function (JobInboundMessageKind) {\n  JobInboundMessageKind[\"Ping\"] = \"ip\";\n  JobInboundMessageKind[\"Stop\"] = \"is\";\n  // Channel specific messages.\n  JobInboundMessageKind[\"Input\"] = \"in\";\n  // Input channel does not allow completion / error. Erroring this will just close the Subject\n  // but not notify the job.\n})(JobInboundMessageKind = exports.JobInboundMessageKind || (exports.JobInboundMessageKind = {}));\n/**\n * Kind of messages that can be outputted from a job.\n */\nvar JobOutboundMessageKind;\n(function (JobOutboundMessageKind) {\n  // Lifecycle specific messages.\n  JobOutboundMessageKind[\"OnReady\"] = \"c\";\n  JobOutboundMessageKind[\"Start\"] = \"s\";\n  JobOutboundMessageKind[\"End\"] = \"e\";\n  JobOutboundMessageKind[\"Pong\"] = \"p\";\n  // Feedback messages.\n  JobOutboundMessageKind[\"Output\"] = \"o\";\n  // Channel specific messages.\n  JobOutboundMessageKind[\"ChannelCreate\"] = \"cn\";\n  JobOutboundMessageKind[\"ChannelMessage\"] = \"cm\";\n  JobOutboundMessageKind[\"ChannelError\"] = \"ce\";\n  JobOutboundMessageKind[\"ChannelComplete\"] = \"cc\";\n})(JobOutboundMessageKind = exports.JobOutboundMessageKind || (exports.JobOutboundMessageKind = {}));\n/**\n * The state of a job. These are changed as the job reports a new state through its messages.\n */\nvar JobState;\n(function (JobState) {\n  /**\n   * The job was queued and is waiting to start.\n   */\n  JobState[\"Queued\"] = \"queued\";\n  /**\n   * The job description was found, its dependencies (see \"Synchronizing and Dependencies\")\n   * are done running, and the job's argument is validated and the job's code will be executed.\n   */\n  JobState[\"Ready\"] = \"ready\";\n  /**\n   * The job has been started. The job implementation is expected to send this as soon as its\n   * work is starting.\n   */\n  JobState[\"Started\"] = \"started\";\n  /**\n   * The job has ended and is done running.\n   */\n  JobState[\"Ended\"] = \"ended\";\n  /**\n   * An error occured and the job stopped because of internal state.\n   */\n  JobState[\"Errored\"] = \"errored\";\n})(JobState = exports.JobState || (exports.JobState = {}));\nfunction isJobHandler(value) {\n  const job = value;\n  return typeof job == 'function' && typeof job.jobDescription == 'object' && job.jobDescription !== null;\n}\nexports.isJobHandler = isJobHandler;","map":{"version":3,"names":["Object","defineProperty","exports","value","isJobHandler","JobState","JobOutboundMessageKind","JobInboundMessageKind","job","jobDescription"],"sources":["/Users/sabyrzhanolzhabay/Web-Dev/Arabakz/ArabaFrontend/node_modules/@angular/cli/node_modules/@angular-devkit/architect/src/jobs/api.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isJobHandler = exports.JobState = exports.JobOutboundMessageKind = exports.JobInboundMessageKind = void 0;\n/**\n * Messages that can be sent TO a job. The job needs to listen to those.\n */\nvar JobInboundMessageKind;\n(function (JobInboundMessageKind) {\n    JobInboundMessageKind[\"Ping\"] = \"ip\";\n    JobInboundMessageKind[\"Stop\"] = \"is\";\n    // Channel specific messages.\n    JobInboundMessageKind[\"Input\"] = \"in\";\n    // Input channel does not allow completion / error. Erroring this will just close the Subject\n    // but not notify the job.\n})(JobInboundMessageKind = exports.JobInboundMessageKind || (exports.JobInboundMessageKind = {}));\n/**\n * Kind of messages that can be outputted from a job.\n */\nvar JobOutboundMessageKind;\n(function (JobOutboundMessageKind) {\n    // Lifecycle specific messages.\n    JobOutboundMessageKind[\"OnReady\"] = \"c\";\n    JobOutboundMessageKind[\"Start\"] = \"s\";\n    JobOutboundMessageKind[\"End\"] = \"e\";\n    JobOutboundMessageKind[\"Pong\"] = \"p\";\n    // Feedback messages.\n    JobOutboundMessageKind[\"Output\"] = \"o\";\n    // Channel specific messages.\n    JobOutboundMessageKind[\"ChannelCreate\"] = \"cn\";\n    JobOutboundMessageKind[\"ChannelMessage\"] = \"cm\";\n    JobOutboundMessageKind[\"ChannelError\"] = \"ce\";\n    JobOutboundMessageKind[\"ChannelComplete\"] = \"cc\";\n})(JobOutboundMessageKind = exports.JobOutboundMessageKind || (exports.JobOutboundMessageKind = {}));\n/**\n * The state of a job. These are changed as the job reports a new state through its messages.\n */\nvar JobState;\n(function (JobState) {\n    /**\n     * The job was queued and is waiting to start.\n     */\n    JobState[\"Queued\"] = \"queued\";\n    /**\n     * The job description was found, its dependencies (see \"Synchronizing and Dependencies\")\n     * are done running, and the job's argument is validated and the job's code will be executed.\n     */\n    JobState[\"Ready\"] = \"ready\";\n    /**\n     * The job has been started. The job implementation is expected to send this as soon as its\n     * work is starting.\n     */\n    JobState[\"Started\"] = \"started\";\n    /**\n     * The job has ended and is done running.\n     */\n    JobState[\"Ended\"] = \"ended\";\n    /**\n     * An error occured and the job stopped because of internal state.\n     */\n    JobState[\"Errored\"] = \"errored\";\n})(JobState = exports.JobState || (exports.JobState = {}));\nfunction isJobHandler(value) {\n    const job = value;\n    return (typeof job == 'function' && typeof job.jobDescription == 'object' && job.jobDescription !== null);\n}\nexports.isJobHandler = isJobHandler;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,YAAY,GAAGF,OAAO,CAACG,QAAQ,GAAGH,OAAO,CAACI,sBAAsB,GAAGJ,OAAO,CAACK,qBAAqB,GAAG,KAAK,CAAC;AACjH;AACA;AACA;AACA,IAAIA,qBAAqB;AACzB,CAAC,UAAUA,qBAAqB,EAAE;EAC9BA,qBAAqB,CAAC,MAAM,CAAC,GAAG,IAAI;EACpCA,qBAAqB,CAAC,MAAM,CAAC,GAAG,IAAI;EACpC;EACAA,qBAAqB,CAAC,OAAO,CAAC,GAAG,IAAI;EACrC;EACA;AACJ,CAAC,EAAEA,qBAAqB,GAAGL,OAAO,CAACK,qBAAqB,KAAKL,OAAO,CAACK,qBAAqB,GAAG,CAAC,CAAC,CAAC,CAAC;AACjG;AACA;AACA;AACA,IAAID,sBAAsB;AAC1B,CAAC,UAAUA,sBAAsB,EAAE;EAC/B;EACAA,sBAAsB,CAAC,SAAS,CAAC,GAAG,GAAG;EACvCA,sBAAsB,CAAC,OAAO,CAAC,GAAG,GAAG;EACrCA,sBAAsB,CAAC,KAAK,CAAC,GAAG,GAAG;EACnCA,sBAAsB,CAAC,MAAM,CAAC,GAAG,GAAG;EACpC;EACAA,sBAAsB,CAAC,QAAQ,CAAC,GAAG,GAAG;EACtC;EACAA,sBAAsB,CAAC,eAAe,CAAC,GAAG,IAAI;EAC9CA,sBAAsB,CAAC,gBAAgB,CAAC,GAAG,IAAI;EAC/CA,sBAAsB,CAAC,cAAc,CAAC,GAAG,IAAI;EAC7CA,sBAAsB,CAAC,iBAAiB,CAAC,GAAG,IAAI;AACpD,CAAC,EAAEA,sBAAsB,GAAGJ,OAAO,CAACI,sBAAsB,KAAKJ,OAAO,CAACI,sBAAsB,GAAG,CAAC,CAAC,CAAC,CAAC;AACpG;AACA;AACA;AACA,IAAID,QAAQ;AACZ,CAAC,UAAUA,QAAQ,EAAE;EACjB;AACJ;AACA;EACIA,QAAQ,CAAC,QAAQ,CAAC,GAAG,QAAQ;EAC7B;AACJ;AACA;AACA;EACIA,QAAQ,CAAC,OAAO,CAAC,GAAG,OAAO;EAC3B;AACJ;AACA;AACA;EACIA,QAAQ,CAAC,SAAS,CAAC,GAAG,SAAS;EAC/B;AACJ;AACA;EACIA,QAAQ,CAAC,OAAO,CAAC,GAAG,OAAO;EAC3B;AACJ;AACA;EACIA,QAAQ,CAAC,SAAS,CAAC,GAAG,SAAS;AACnC,CAAC,EAAEA,QAAQ,GAAGH,OAAO,CAACG,QAAQ,KAAKH,OAAO,CAACG,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC;AAC1D,SAASD,YAAY,CAACD,KAAK,EAAE;EACzB,MAAMK,GAAG,GAAGL,KAAK;EACjB,OAAQ,OAAOK,GAAG,IAAI,UAAU,IAAI,OAAOA,GAAG,CAACC,cAAc,IAAI,QAAQ,IAAID,GAAG,CAACC,cAAc,KAAK,IAAI;AAC5G;AACAP,OAAO,CAACE,YAAY,GAAGA,YAAY"},"metadata":{},"sourceType":"script","externalDependencies":[]}