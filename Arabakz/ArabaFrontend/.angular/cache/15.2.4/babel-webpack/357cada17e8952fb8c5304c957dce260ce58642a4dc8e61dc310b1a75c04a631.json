{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTypesOfSchema = void 0;\nconst utils_1 = require(\"../utils\");\nconst allTypes = ['string', 'integer', 'number', 'object', 'array', 'boolean', 'null'];\nfunction getTypesOfSchema(schema) {\n  if (!schema) {\n    return new Set();\n  }\n  if (schema === true) {\n    return new Set(allTypes);\n  }\n  let potentials;\n  if (typeof schema.type === 'string') {\n    potentials = new Set([schema.type]);\n  } else if (Array.isArray(schema.type)) {\n    potentials = new Set(schema.type);\n  } else if ((0, utils_1.isJsonArray)(schema.enum)) {\n    potentials = new Set();\n    // Gather the type of each enum values, and use that as a starter for potential types.\n    for (const v of schema.enum) {\n      switch (typeof v) {\n        case 'string':\n        case 'number':\n        case 'boolean':\n          potentials.add(typeof v);\n          break;\n        case 'object':\n          if (Array.isArray(v)) {\n            potentials.add('array');\n          } else if (v === null) {\n            potentials.add('null');\n          } else {\n            potentials.add('object');\n          }\n          break;\n      }\n    }\n  } else {\n    potentials = new Set(allTypes);\n  }\n  if ((0, utils_1.isJsonObject)(schema.not)) {\n    const notTypes = getTypesOfSchema(schema.not);\n    potentials = new Set([...potentials].filter(p => !notTypes.has(p)));\n  }\n  if (Array.isArray(schema.allOf)) {\n    for (const sub of schema.allOf) {\n      const types = getTypesOfSchema(sub);\n      potentials = new Set([...types].filter(t => potentials.has(t)));\n    }\n  }\n  if (Array.isArray(schema.oneOf)) {\n    let options = new Set();\n    for (const sub of schema.oneOf) {\n      const types = getTypesOfSchema(sub);\n      options = new Set([...options, ...types]);\n    }\n    potentials = new Set([...options].filter(o => potentials.has(o)));\n  }\n  if (Array.isArray(schema.anyOf)) {\n    let options = new Set();\n    for (const sub of schema.anyOf) {\n      const types = getTypesOfSchema(sub);\n      options = new Set([...options, ...types]);\n    }\n    potentials = new Set([...options].filter(o => potentials.has(o)));\n  }\n  if (schema.properties) {\n    potentials.add('object');\n  } else if (schema.items) {\n    potentials.add('array');\n  }\n  return potentials;\n}\nexports.getTypesOfSchema = getTypesOfSchema;","map":{"version":3,"names":["Object","defineProperty","exports","value","getTypesOfSchema","utils_1","require","allTypes","schema","Set","potentials","type","Array","isArray","isJsonArray","enum","v","add","isJsonObject","not","notTypes","filter","p","has","allOf","sub","types","t","oneOf","options","o","anyOf","properties","items"],"sources":["/Users/sabyrzhanolzhabay/Web-Dev/Arabakz/ArabaFrontend/node_modules/@angular/cli/node_modules/@angular-devkit/core/src/json/schema/utility.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getTypesOfSchema = void 0;\nconst utils_1 = require(\"../utils\");\nconst allTypes = ['string', 'integer', 'number', 'object', 'array', 'boolean', 'null'];\nfunction getTypesOfSchema(schema) {\n    if (!schema) {\n        return new Set();\n    }\n    if (schema === true) {\n        return new Set(allTypes);\n    }\n    let potentials;\n    if (typeof schema.type === 'string') {\n        potentials = new Set([schema.type]);\n    }\n    else if (Array.isArray(schema.type)) {\n        potentials = new Set(schema.type);\n    }\n    else if ((0, utils_1.isJsonArray)(schema.enum)) {\n        potentials = new Set();\n        // Gather the type of each enum values, and use that as a starter for potential types.\n        for (const v of schema.enum) {\n            switch (typeof v) {\n                case 'string':\n                case 'number':\n                case 'boolean':\n                    potentials.add(typeof v);\n                    break;\n                case 'object':\n                    if (Array.isArray(v)) {\n                        potentials.add('array');\n                    }\n                    else if (v === null) {\n                        potentials.add('null');\n                    }\n                    else {\n                        potentials.add('object');\n                    }\n                    break;\n            }\n        }\n    }\n    else {\n        potentials = new Set(allTypes);\n    }\n    if ((0, utils_1.isJsonObject)(schema.not)) {\n        const notTypes = getTypesOfSchema(schema.not);\n        potentials = new Set([...potentials].filter((p) => !notTypes.has(p)));\n    }\n    if (Array.isArray(schema.allOf)) {\n        for (const sub of schema.allOf) {\n            const types = getTypesOfSchema(sub);\n            potentials = new Set([...types].filter((t) => potentials.has(t)));\n        }\n    }\n    if (Array.isArray(schema.oneOf)) {\n        let options = new Set();\n        for (const sub of schema.oneOf) {\n            const types = getTypesOfSchema(sub);\n            options = new Set([...options, ...types]);\n        }\n        potentials = new Set([...options].filter((o) => potentials.has(o)));\n    }\n    if (Array.isArray(schema.anyOf)) {\n        let options = new Set();\n        for (const sub of schema.anyOf) {\n            const types = getTypesOfSchema(sub);\n            options = new Set([...options, ...types]);\n        }\n        potentials = new Set([...options].filter((o) => potentials.has(o)));\n    }\n    if (schema.properties) {\n        potentials.add('object');\n    }\n    else if (schema.items) {\n        potentials.add('array');\n    }\n    return potentials;\n}\nexports.getTypesOfSchema = getTypesOfSchema;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}