{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst dataType_1 = require(\"../../compile/validate/dataType\");\nconst codegen_1 = require(\"../../compile/codegen\");\nconst util_1 = require(\"../../compile/util\");\nconst equal_1 = require(\"../../runtime/equal\");\nconst error = {\n  message: ({\n    params: {\n      i,\n      j\n    }\n  }) => (0, codegen_1.str)`must NOT have duplicate items (items ## ${j} and ${i} are identical)`,\n  params: ({\n    params: {\n      i,\n      j\n    }\n  }) => (0, codegen_1._)`{i: ${i}, j: ${j}}`\n};\nconst def = {\n  keyword: \"uniqueItems\",\n  type: \"array\",\n  schemaType: \"boolean\",\n  $data: true,\n  error,\n  code(cxt) {\n    const {\n      gen,\n      data,\n      $data,\n      schema,\n      parentSchema,\n      schemaCode,\n      it\n    } = cxt;\n    if (!$data && !schema) return;\n    const valid = gen.let(\"valid\");\n    const itemTypes = parentSchema.items ? (0, dataType_1.getSchemaTypes)(parentSchema.items) : [];\n    cxt.block$data(valid, validateUniqueItems, (0, codegen_1._)`${schemaCode} === false`);\n    cxt.ok(valid);\n    function validateUniqueItems() {\n      const i = gen.let(\"i\", (0, codegen_1._)`${data}.length`);\n      const j = gen.let(\"j\");\n      cxt.setParams({\n        i,\n        j\n      });\n      gen.assign(valid, true);\n      gen.if((0, codegen_1._)`${i} > 1`, () => (canOptimize() ? loopN : loopN2)(i, j));\n    }\n    function canOptimize() {\n      return itemTypes.length > 0 && !itemTypes.some(t => t === \"object\" || t === \"array\");\n    }\n    function loopN(i, j) {\n      const item = gen.name(\"item\");\n      const wrongType = (0, dataType_1.checkDataTypes)(itemTypes, item, it.opts.strictNumbers, dataType_1.DataType.Wrong);\n      const indices = gen.const(\"indices\", (0, codegen_1._)`{}`);\n      gen.for((0, codegen_1._)`;${i}--;`, () => {\n        gen.let(item, (0, codegen_1._)`${data}[${i}]`);\n        gen.if(wrongType, (0, codegen_1._)`continue`);\n        if (itemTypes.length > 1) gen.if((0, codegen_1._)`typeof ${item} == \"string\"`, (0, codegen_1._)`${item} += \"_\"`);\n        gen.if((0, codegen_1._)`typeof ${indices}[${item}] == \"number\"`, () => {\n          gen.assign(j, (0, codegen_1._)`${indices}[${item}]`);\n          cxt.error();\n          gen.assign(valid, false).break();\n        }).code((0, codegen_1._)`${indices}[${item}] = ${i}`);\n      });\n    }\n    function loopN2(i, j) {\n      const eql = (0, util_1.useFunc)(gen, equal_1.default);\n      const outer = gen.name(\"outer\");\n      gen.label(outer).for((0, codegen_1._)`;${i}--;`, () => gen.for((0, codegen_1._)`${j} = ${i}; ${j}--;`, () => gen.if((0, codegen_1._)`${eql}(${data}[${i}], ${data}[${j}])`, () => {\n        cxt.error();\n        gen.assign(valid, false).break(outer);\n      })));\n    }\n  }\n};\nexports.default = def;","map":{"version":3,"names":["Object","defineProperty","exports","value","dataType_1","require","codegen_1","util_1","equal_1","error","message","params","i","j","str","_","def","keyword","type","schemaType","$data","code","cxt","gen","data","schema","parentSchema","schemaCode","it","valid","let","itemTypes","items","getSchemaTypes","block$data","validateUniqueItems","ok","setParams","assign","if","canOptimize","loopN","loopN2","length","some","t","item","name","wrongType","checkDataTypes","opts","strictNumbers","DataType","Wrong","indices","const","for","break","eql","useFunc","default","outer","label"],"sources":["/Users/sabyrzhanolzhabay/Web-Dev/Arabakz/ArabaFrontend/node_modules/ajv/dist/vocabularies/validation/uniqueItems.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst dataType_1 = require(\"../../compile/validate/dataType\");\nconst codegen_1 = require(\"../../compile/codegen\");\nconst util_1 = require(\"../../compile/util\");\nconst equal_1 = require(\"../../runtime/equal\");\nconst error = {\n    message: ({ params: { i, j } }) => (0, codegen_1.str) `must NOT have duplicate items (items ## ${j} and ${i} are identical)`,\n    params: ({ params: { i, j } }) => (0, codegen_1._) `{i: ${i}, j: ${j}}`,\n};\nconst def = {\n    keyword: \"uniqueItems\",\n    type: \"array\",\n    schemaType: \"boolean\",\n    $data: true,\n    error,\n    code(cxt) {\n        const { gen, data, $data, schema, parentSchema, schemaCode, it } = cxt;\n        if (!$data && !schema)\n            return;\n        const valid = gen.let(\"valid\");\n        const itemTypes = parentSchema.items ? (0, dataType_1.getSchemaTypes)(parentSchema.items) : [];\n        cxt.block$data(valid, validateUniqueItems, (0, codegen_1._) `${schemaCode} === false`);\n        cxt.ok(valid);\n        function validateUniqueItems() {\n            const i = gen.let(\"i\", (0, codegen_1._) `${data}.length`);\n            const j = gen.let(\"j\");\n            cxt.setParams({ i, j });\n            gen.assign(valid, true);\n            gen.if((0, codegen_1._) `${i} > 1`, () => (canOptimize() ? loopN : loopN2)(i, j));\n        }\n        function canOptimize() {\n            return itemTypes.length > 0 && !itemTypes.some((t) => t === \"object\" || t === \"array\");\n        }\n        function loopN(i, j) {\n            const item = gen.name(\"item\");\n            const wrongType = (0, dataType_1.checkDataTypes)(itemTypes, item, it.opts.strictNumbers, dataType_1.DataType.Wrong);\n            const indices = gen.const(\"indices\", (0, codegen_1._) `{}`);\n            gen.for((0, codegen_1._) `;${i}--;`, () => {\n                gen.let(item, (0, codegen_1._) `${data}[${i}]`);\n                gen.if(wrongType, (0, codegen_1._) `continue`);\n                if (itemTypes.length > 1)\n                    gen.if((0, codegen_1._) `typeof ${item} == \"string\"`, (0, codegen_1._) `${item} += \"_\"`);\n                gen\n                    .if((0, codegen_1._) `typeof ${indices}[${item}] == \"number\"`, () => {\n                    gen.assign(j, (0, codegen_1._) `${indices}[${item}]`);\n                    cxt.error();\n                    gen.assign(valid, false).break();\n                })\n                    .code((0, codegen_1._) `${indices}[${item}] = ${i}`);\n            });\n        }\n        function loopN2(i, j) {\n            const eql = (0, util_1.useFunc)(gen, equal_1.default);\n            const outer = gen.name(\"outer\");\n            gen.label(outer).for((0, codegen_1._) `;${i}--;`, () => gen.for((0, codegen_1._) `${j} = ${i}; ${j}--;`, () => gen.if((0, codegen_1._) `${eql}(${data}[${i}], ${data}[${j}])`, () => {\n                cxt.error();\n                gen.assign(valid, false).break(outer);\n            })));\n        }\n    },\n};\nexports.default = def;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}