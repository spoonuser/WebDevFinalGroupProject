{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _asyncToGenerator = require(\"/Users/sabyrzhanolzhabay/Web-Dev/Arabakz/ArabaFrontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isWarningEnabled = exports.getSchematicDefaults = exports.getConfiguredPackageManager = exports.getProjectByCwd = exports.validateWorkspace = exports.getWorkspaceRaw = exports.getWorkspace = exports.AngularWorkspace = exports.workspaceSchemaPath = void 0;\nconst core_1 = require(\"@angular-devkit/core\");\nconst fs_1 = require(\"fs\");\nconst os = __importStar(require(\"os\"));\nconst path = __importStar(require(\"path\"));\nconst find_up_1 = require(\"./find-up\");\nconst json_file_1 = require(\"./json-file\");\nfunction isJsonObject(value) {\n  return value !== undefined && core_1.json.isJsonObject(value);\n}\nfunction createWorkspaceHost() {\n  return {\n    readFile(path) {\n      return fs_1.promises.readFile(path, 'utf-8');\n    },\n    writeFile(path, data) {\n      return _asyncToGenerator(function* () {\n        yield fs_1.promises.writeFile(path, data);\n      })();\n    },\n    isDirectory(path) {\n      return _asyncToGenerator(function* () {\n        try {\n          const stats = yield fs_1.promises.stat(path);\n          return stats.isDirectory();\n        } catch (_a) {\n          return false;\n        }\n      })();\n    },\n    isFile(path) {\n      return _asyncToGenerator(function* () {\n        try {\n          const stats = yield fs_1.promises.stat(path);\n          return stats.isFile();\n        } catch (_a) {\n          return false;\n        }\n      })();\n    }\n  };\n}\nexports.workspaceSchemaPath = path.join(__dirname, '../../lib/config/schema.json');\nconst configNames = ['angular.json', '.angular.json'];\nconst globalFileName = '.angular-config.json';\nconst defaultGlobalFilePath = path.join(os.homedir(), globalFileName);\nfunction xdgConfigHome(home, configFile) {\n  // https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html\n  const xdgConfigHome = process.env['XDG_CONFIG_HOME'] || path.join(home, '.config');\n  const xdgAngularHome = path.join(xdgConfigHome, 'angular');\n  return configFile ? path.join(xdgAngularHome, configFile) : xdgAngularHome;\n}\nfunction xdgConfigHomeOld(home) {\n  // Check the configuration files in the old location that should be:\n  // - $XDG_CONFIG_HOME/.angular-config.json (if XDG_CONFIG_HOME is set)\n  // - $HOME/.config/angular/.angular-config.json (otherwise)\n  const p = process.env['XDG_CONFIG_HOME'] || path.join(home, '.config', 'angular');\n  return path.join(p, '.angular-config.json');\n}\nfunction projectFilePath(projectPath) {\n  // Find the configuration, either where specified, in the Angular CLI project\n  // (if it's in node_modules) or from the current process.\n  return projectPath && (0, find_up_1.findUp)(configNames, projectPath) || (0, find_up_1.findUp)(configNames, process.cwd()) || (0, find_up_1.findUp)(configNames, __dirname);\n}\nfunction globalFilePath() {\n  const home = os.homedir();\n  if (!home) {\n    return null;\n  }\n  // follow XDG Base Directory spec\n  // note that createGlobalSettings() will continue creating\n  // global file in home directory, with this user will have\n  // choice to move change its location to meet XDG convention\n  const xdgConfig = xdgConfigHome(home, 'config.json');\n  if ((0, fs_1.existsSync)(xdgConfig)) {\n    return xdgConfig;\n  }\n  // NOTE: This check is for the old configuration location, for more\n  // information see https://github.com/angular/angular-cli/pull/20556\n  const xdgConfigOld = xdgConfigHomeOld(home);\n  if ((0, fs_1.existsSync)(xdgConfigOld)) {\n    /* eslint-disable no-console */\n    console.warn(`Old configuration location detected: ${xdgConfigOld}\\n` + `Please move the file to the new location ~/.config/angular/config.json`);\n    return xdgConfigOld;\n  }\n  if ((0, fs_1.existsSync)(defaultGlobalFilePath)) {\n    return defaultGlobalFilePath;\n  }\n  return null;\n}\nclass AngularWorkspace {\n  constructor(workspace, filePath) {\n    this.workspace = workspace;\n    this.filePath = filePath;\n    this.basePath = path.dirname(filePath);\n  }\n  get extensions() {\n    return this.workspace.extensions;\n  }\n  get projects() {\n    return this.workspace.projects;\n  }\n  // Temporary helper functions to support refactoring\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  getCli() {\n    return this.workspace.extensions['cli'];\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  getProjectCli(projectName) {\n    const project = this.workspace.projects.get(projectName);\n    return project === null || project === void 0 ? void 0 : project.extensions['cli'];\n  }\n  save() {\n    return core_1.workspaces.writeWorkspace(this.workspace, createWorkspaceHost(), this.filePath, core_1.workspaces.WorkspaceFormat.JSON);\n  }\n  static load(workspaceFilePath) {\n    return _asyncToGenerator(function* () {\n      const result = yield core_1.workspaces.readWorkspace(workspaceFilePath, createWorkspaceHost(), core_1.workspaces.WorkspaceFormat.JSON);\n      return new AngularWorkspace(result.workspace, workspaceFilePath);\n    })();\n  }\n}\nexports.AngularWorkspace = AngularWorkspace;\nconst cachedWorkspaces = new Map();\nfunction getWorkspace(_x) {\n  return _getWorkspace.apply(this, arguments);\n}\nfunction _getWorkspace() {\n  _getWorkspace = _asyncToGenerator(function* (level) {\n    if (cachedWorkspaces.has(level)) {\n      return cachedWorkspaces.get(level);\n    }\n    const configPath = level === 'local' ? projectFilePath() : globalFilePath();\n    if (!configPath) {\n      if (level === 'global') {\n        // Unlike a local config, a global config is not mandatory.\n        // So we create an empty one in memory and keep it as such until it has been modified and saved.\n        const globalWorkspace = new AngularWorkspace({\n          extensions: {},\n          projects: new core_1.workspaces.ProjectDefinitionCollection()\n        }, defaultGlobalFilePath);\n        cachedWorkspaces.set(level, globalWorkspace);\n        return globalWorkspace;\n      }\n      cachedWorkspaces.set(level, undefined);\n      return undefined;\n    }\n    try {\n      const workspace = yield AngularWorkspace.load(configPath);\n      cachedWorkspaces.set(level, workspace);\n      return workspace;\n    } catch (error) {\n      throw new Error(`Workspace config file cannot be loaded: ${configPath}` + `\\n${error instanceof Error ? error.message : error}`);\n    }\n  });\n  return _getWorkspace.apply(this, arguments);\n}\nexports.getWorkspace = getWorkspace;\n/**\n * This method will load the workspace configuration in raw JSON format.\n * When `level` is `global` and file doesn't exists, it will be created.\n *\n * NB: This method is intended to be used only for `ng config`.\n */\nfunction getWorkspaceRaw() {\n  return _getWorkspaceRaw.apply(this, arguments);\n}\nfunction _getWorkspaceRaw() {\n  _getWorkspaceRaw = _asyncToGenerator(function* (level = 'local') {\n    let configPath = level === 'local' ? projectFilePath() : globalFilePath();\n    if (!configPath) {\n      if (level === 'global') {\n        configPath = defaultGlobalFilePath;\n        // Config doesn't exist, force create it.\n        const globalWorkspace = yield getWorkspace('global');\n        yield globalWorkspace.save();\n      } else {\n        return [null, null];\n      }\n    }\n    return [new json_file_1.JSONFile(configPath), configPath];\n  });\n  return _getWorkspaceRaw.apply(this, arguments);\n}\nexports.getWorkspaceRaw = getWorkspaceRaw;\nfunction validateWorkspace(_x2, _x3) {\n  return _validateWorkspace.apply(this, arguments);\n}\nfunction _validateWorkspace() {\n  _validateWorkspace = _asyncToGenerator(function* (data, isGlobal) {\n    const schema = (0, json_file_1.readAndParseJson)(exports.workspaceSchemaPath);\n    // We should eventually have a dedicated global config schema and use that to validate.\n    const schemaToValidate = isGlobal ? {\n      '$ref': '#/definitions/global',\n      definitions: schema['definitions']\n    } : schema;\n    const {\n      formats\n    } = yield Promise.resolve().then(() => __importStar(require('@angular-devkit/schematics')));\n    const registry = new core_1.json.schema.CoreSchemaRegistry(formats.standardFormats);\n    const validator = yield registry.compile(schemaToValidate).toPromise();\n    const {\n      success,\n      errors\n    } = yield validator(data).toPromise();\n    if (!success) {\n      throw new core_1.json.schema.SchemaValidationException(errors);\n    }\n  });\n  return _validateWorkspace.apply(this, arguments);\n}\nexports.validateWorkspace = validateWorkspace;\nfunction findProjectByPath(workspace, location) {\n  const isInside = (base, potential) => {\n    const absoluteBase = path.resolve(workspace.basePath, base);\n    const absolutePotential = path.resolve(workspace.basePath, potential);\n    const relativePotential = path.relative(absoluteBase, absolutePotential);\n    if (!relativePotential.startsWith('..') && !path.isAbsolute(relativePotential)) {\n      return true;\n    }\n    return false;\n  };\n  const projects = Array.from(workspace.projects).map(([name, project]) => [project.root, name]).filter(tuple => isInside(tuple[0], location))\n  // Sort tuples by depth, with the deeper ones first. Since the first member is a path and\n  // we filtered all invalid paths, the longest will be the deepest (and in case of equality\n  // the sort is stable and the first declared project will win).\n  .sort((a, b) => b[0].length - a[0].length);\n  if (projects.length === 0) {\n    return null;\n  } else if (projects.length > 1) {\n    const found = new Set();\n    const sameRoots = projects.filter(v => {\n      if (!found.has(v[0])) {\n        found.add(v[0]);\n        return false;\n      }\n      return true;\n    });\n    if (sameRoots.length > 0) {\n      // Ambiguous location - cannot determine a project\n      return null;\n    }\n  }\n  return projects[0][1];\n}\nlet defaultProjectDeprecationWarningShown = false;\nfunction getProjectByCwd(workspace) {\n  if (workspace.projects.size === 1) {\n    // If there is only one project, return that one.\n    return Array.from(workspace.projects.keys())[0];\n  }\n  const project = findProjectByPath(workspace, process.cwd());\n  if (project) {\n    return project;\n  }\n  const defaultProject = workspace.extensions['defaultProject'];\n  if (defaultProject && typeof defaultProject === 'string') {\n    // If there is a default project name, return it.\n    if (!defaultProjectDeprecationWarningShown) {\n      console.warn(`DEPRECATED: The 'defaultProject' workspace option has been deprecated. ` + `The project to use will be determined from the current working directory.`);\n      defaultProjectDeprecationWarningShown = true;\n    }\n    return defaultProject;\n  }\n  return null;\n}\nexports.getProjectByCwd = getProjectByCwd;\nfunction getConfiguredPackageManager() {\n  return _getConfiguredPackageManager.apply(this, arguments);\n}\nfunction _getConfiguredPackageManager() {\n  _getConfiguredPackageManager = _asyncToGenerator(function* () {\n    var _a;\n    const getPackageManager = source => {\n      if (isJsonObject(source)) {\n        const value = source['packageManager'];\n        if (value && typeof value === 'string') {\n          return value;\n        }\n      }\n      return null;\n    };\n    let result = null;\n    const workspace = yield getWorkspace('local');\n    if (workspace) {\n      const project = getProjectByCwd(workspace);\n      if (project) {\n        result = getPackageManager((_a = workspace.projects.get(project)) === null || _a === void 0 ? void 0 : _a.extensions['cli']);\n      }\n      result !== null && result !== void 0 ? result : result = getPackageManager(workspace.extensions['cli']);\n    }\n    if (!result) {\n      const globalOptions = yield getWorkspace('global');\n      result = getPackageManager(globalOptions === null || globalOptions === void 0 ? void 0 : globalOptions.extensions['cli']);\n    }\n    return result;\n  });\n  return _getConfiguredPackageManager.apply(this, arguments);\n}\nexports.getConfiguredPackageManager = getConfiguredPackageManager;\nfunction getSchematicDefaults(_x4, _x5, _x6) {\n  return _getSchematicDefaults.apply(this, arguments);\n}\nfunction _getSchematicDefaults() {\n  _getSchematicDefaults = _asyncToGenerator(function* (collection, schematic, project) {\n    var _a;\n    const result = {};\n    const mergeOptions = source => {\n      if (isJsonObject(source)) {\n        // Merge options from the qualified name\n        Object.assign(result, source[`${collection}:${schematic}`]);\n        // Merge options from nested collection schematics\n        const collectionOptions = source[collection];\n        if (isJsonObject(collectionOptions)) {\n          Object.assign(result, collectionOptions[schematic]);\n        }\n      }\n    };\n    // Global level schematic options\n    const globalOptions = yield getWorkspace('global');\n    mergeOptions(globalOptions === null || globalOptions === void 0 ? void 0 : globalOptions.extensions['schematics']);\n    const workspace = yield getWorkspace('local');\n    if (workspace) {\n      // Workspace level schematic options\n      mergeOptions(workspace.extensions['schematics']);\n      project = project || getProjectByCwd(workspace);\n      if (project) {\n        // Project level schematic options\n        mergeOptions((_a = workspace.projects.get(project)) === null || _a === void 0 ? void 0 : _a.extensions['schematics']);\n      }\n    }\n    return result;\n  });\n  return _getSchematicDefaults.apply(this, arguments);\n}\nexports.getSchematicDefaults = getSchematicDefaults;\nfunction isWarningEnabled(_x7) {\n  return _isWarningEnabled.apply(this, arguments);\n}\nfunction _isWarningEnabled() {\n  _isWarningEnabled = _asyncToGenerator(function* (warning) {\n    var _a;\n    const getWarning = source => {\n      if (isJsonObject(source)) {\n        const warnings = source['warnings'];\n        if (isJsonObject(warnings)) {\n          const value = warnings[warning];\n          if (typeof value == 'boolean') {\n            return value;\n          }\n        }\n      }\n    };\n    let result;\n    const workspace = yield getWorkspace('local');\n    if (workspace) {\n      const project = getProjectByCwd(workspace);\n      if (project) {\n        result = getWarning((_a = workspace.projects.get(project)) === null || _a === void 0 ? void 0 : _a.extensions['cli']);\n      }\n      result = result !== null && result !== void 0 ? result : getWarning(workspace.extensions['cli']);\n    }\n    if (result === undefined) {\n      const globalOptions = yield getWorkspace('global');\n      result = getWarning(globalOptions === null || globalOptions === void 0 ? void 0 : globalOptions.extensions['cli']);\n    }\n    // All warnings are enabled by default\n    return result !== null && result !== void 0 ? result : true;\n  });\n  return _isWarningEnabled.apply(this, arguments);\n}\nexports.isWarningEnabled = isWarningEnabled;","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","exports","isWarningEnabled","getSchematicDefaults","getConfiguredPackageManager","getProjectByCwd","validateWorkspace","getWorkspaceRaw","getWorkspace","AngularWorkspace","workspaceSchemaPath","core_1","require","fs_1","os","path","find_up_1","json_file_1","isJsonObject","json","createWorkspaceHost","readFile","promises","writeFile","data","isDirectory","stats","stat","_a","isFile","join","__dirname","configNames","globalFileName","defaultGlobalFilePath","homedir","xdgConfigHome","home","configFile","process","env","xdgAngularHome","xdgConfigHomeOld","p","projectFilePath","projectPath","findUp","cwd","globalFilePath","xdgConfig","existsSync","xdgConfigOld","console","warn","constructor","workspace","filePath","basePath","dirname","extensions","projects","getCli","getProjectCli","projectName","project","save","workspaces","writeWorkspace","WorkspaceFormat","JSON","load","workspaceFilePath","readWorkspace","cachedWorkspaces","Map","level","has","configPath","globalWorkspace","ProjectDefinitionCollection","set","error","Error","message","JSONFile","isGlobal","schema","readAndParseJson","schemaToValidate","definitions","formats","Promise","resolve","then","registry","CoreSchemaRegistry","standardFormats","validator","compile","toPromise","success","errors","SchemaValidationException","findProjectByPath","location","isInside","base","potential","absoluteBase","absolutePotential","relativePotential","relative","startsWith","isAbsolute","Array","from","map","name","root","filter","tuple","sort","a","b","length","found","Set","sameRoots","add","defaultProjectDeprecationWarningShown","size","keys","defaultProject","getPackageManager","source","globalOptions","collection","schematic","mergeOptions","assign","collectionOptions","warning","getWarning","warnings"],"sources":["/Users/sabyrzhanolzhabay/Web-Dev/Arabakz/ArabaFrontend/node_modules/@angular/cli/src/utilities/config.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isWarningEnabled = exports.getSchematicDefaults = exports.getConfiguredPackageManager = exports.getProjectByCwd = exports.validateWorkspace = exports.getWorkspaceRaw = exports.getWorkspace = exports.AngularWorkspace = exports.workspaceSchemaPath = void 0;\nconst core_1 = require(\"@angular-devkit/core\");\nconst fs_1 = require(\"fs\");\nconst os = __importStar(require(\"os\"));\nconst path = __importStar(require(\"path\"));\nconst find_up_1 = require(\"./find-up\");\nconst json_file_1 = require(\"./json-file\");\nfunction isJsonObject(value) {\n    return value !== undefined && core_1.json.isJsonObject(value);\n}\nfunction createWorkspaceHost() {\n    return {\n        readFile(path) {\n            return fs_1.promises.readFile(path, 'utf-8');\n        },\n        async writeFile(path, data) {\n            await fs_1.promises.writeFile(path, data);\n        },\n        async isDirectory(path) {\n            try {\n                const stats = await fs_1.promises.stat(path);\n                return stats.isDirectory();\n            }\n            catch (_a) {\n                return false;\n            }\n        },\n        async isFile(path) {\n            try {\n                const stats = await fs_1.promises.stat(path);\n                return stats.isFile();\n            }\n            catch (_a) {\n                return false;\n            }\n        },\n    };\n}\nexports.workspaceSchemaPath = path.join(__dirname, '../../lib/config/schema.json');\nconst configNames = ['angular.json', '.angular.json'];\nconst globalFileName = '.angular-config.json';\nconst defaultGlobalFilePath = path.join(os.homedir(), globalFileName);\nfunction xdgConfigHome(home, configFile) {\n    // https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html\n    const xdgConfigHome = process.env['XDG_CONFIG_HOME'] || path.join(home, '.config');\n    const xdgAngularHome = path.join(xdgConfigHome, 'angular');\n    return configFile ? path.join(xdgAngularHome, configFile) : xdgAngularHome;\n}\nfunction xdgConfigHomeOld(home) {\n    // Check the configuration files in the old location that should be:\n    // - $XDG_CONFIG_HOME/.angular-config.json (if XDG_CONFIG_HOME is set)\n    // - $HOME/.config/angular/.angular-config.json (otherwise)\n    const p = process.env['XDG_CONFIG_HOME'] || path.join(home, '.config', 'angular');\n    return path.join(p, '.angular-config.json');\n}\nfunction projectFilePath(projectPath) {\n    // Find the configuration, either where specified, in the Angular CLI project\n    // (if it's in node_modules) or from the current process.\n    return ((projectPath && (0, find_up_1.findUp)(configNames, projectPath)) ||\n        (0, find_up_1.findUp)(configNames, process.cwd()) ||\n        (0, find_up_1.findUp)(configNames, __dirname));\n}\nfunction globalFilePath() {\n    const home = os.homedir();\n    if (!home) {\n        return null;\n    }\n    // follow XDG Base Directory spec\n    // note that createGlobalSettings() will continue creating\n    // global file in home directory, with this user will have\n    // choice to move change its location to meet XDG convention\n    const xdgConfig = xdgConfigHome(home, 'config.json');\n    if ((0, fs_1.existsSync)(xdgConfig)) {\n        return xdgConfig;\n    }\n    // NOTE: This check is for the old configuration location, for more\n    // information see https://github.com/angular/angular-cli/pull/20556\n    const xdgConfigOld = xdgConfigHomeOld(home);\n    if ((0, fs_1.existsSync)(xdgConfigOld)) {\n        /* eslint-disable no-console */\n        console.warn(`Old configuration location detected: ${xdgConfigOld}\\n` +\n            `Please move the file to the new location ~/.config/angular/config.json`);\n        return xdgConfigOld;\n    }\n    if ((0, fs_1.existsSync)(defaultGlobalFilePath)) {\n        return defaultGlobalFilePath;\n    }\n    return null;\n}\nclass AngularWorkspace {\n    constructor(workspace, filePath) {\n        this.workspace = workspace;\n        this.filePath = filePath;\n        this.basePath = path.dirname(filePath);\n    }\n    get extensions() {\n        return this.workspace.extensions;\n    }\n    get projects() {\n        return this.workspace.projects;\n    }\n    // Temporary helper functions to support refactoring\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    getCli() {\n        return this.workspace.extensions['cli'];\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    getProjectCli(projectName) {\n        const project = this.workspace.projects.get(projectName);\n        return project === null || project === void 0 ? void 0 : project.extensions['cli'];\n    }\n    save() {\n        return core_1.workspaces.writeWorkspace(this.workspace, createWorkspaceHost(), this.filePath, core_1.workspaces.WorkspaceFormat.JSON);\n    }\n    static async load(workspaceFilePath) {\n        const result = await core_1.workspaces.readWorkspace(workspaceFilePath, createWorkspaceHost(), core_1.workspaces.WorkspaceFormat.JSON);\n        return new AngularWorkspace(result.workspace, workspaceFilePath);\n    }\n}\nexports.AngularWorkspace = AngularWorkspace;\nconst cachedWorkspaces = new Map();\nasync function getWorkspace(level) {\n    if (cachedWorkspaces.has(level)) {\n        return cachedWorkspaces.get(level);\n    }\n    const configPath = level === 'local' ? projectFilePath() : globalFilePath();\n    if (!configPath) {\n        if (level === 'global') {\n            // Unlike a local config, a global config is not mandatory.\n            // So we create an empty one in memory and keep it as such until it has been modified and saved.\n            const globalWorkspace = new AngularWorkspace({ extensions: {}, projects: new core_1.workspaces.ProjectDefinitionCollection() }, defaultGlobalFilePath);\n            cachedWorkspaces.set(level, globalWorkspace);\n            return globalWorkspace;\n        }\n        cachedWorkspaces.set(level, undefined);\n        return undefined;\n    }\n    try {\n        const workspace = await AngularWorkspace.load(configPath);\n        cachedWorkspaces.set(level, workspace);\n        return workspace;\n    }\n    catch (error) {\n        throw new Error(`Workspace config file cannot be loaded: ${configPath}` +\n            `\\n${error instanceof Error ? error.message : error}`);\n    }\n}\nexports.getWorkspace = getWorkspace;\n/**\n * This method will load the workspace configuration in raw JSON format.\n * When `level` is `global` and file doesn't exists, it will be created.\n *\n * NB: This method is intended to be used only for `ng config`.\n */\nasync function getWorkspaceRaw(level = 'local') {\n    let configPath = level === 'local' ? projectFilePath() : globalFilePath();\n    if (!configPath) {\n        if (level === 'global') {\n            configPath = defaultGlobalFilePath;\n            // Config doesn't exist, force create it.\n            const globalWorkspace = await getWorkspace('global');\n            await globalWorkspace.save();\n        }\n        else {\n            return [null, null];\n        }\n    }\n    return [new json_file_1.JSONFile(configPath), configPath];\n}\nexports.getWorkspaceRaw = getWorkspaceRaw;\nasync function validateWorkspace(data, isGlobal) {\n    const schema = (0, json_file_1.readAndParseJson)(exports.workspaceSchemaPath);\n    // We should eventually have a dedicated global config schema and use that to validate.\n    const schemaToValidate = isGlobal\n        ? {\n            '$ref': '#/definitions/global',\n            definitions: schema['definitions'],\n        }\n        : schema;\n    const { formats } = await Promise.resolve().then(() => __importStar(require('@angular-devkit/schematics')));\n    const registry = new core_1.json.schema.CoreSchemaRegistry(formats.standardFormats);\n    const validator = await registry.compile(schemaToValidate).toPromise();\n    const { success, errors } = await validator(data).toPromise();\n    if (!success) {\n        throw new core_1.json.schema.SchemaValidationException(errors);\n    }\n}\nexports.validateWorkspace = validateWorkspace;\nfunction findProjectByPath(workspace, location) {\n    const isInside = (base, potential) => {\n        const absoluteBase = path.resolve(workspace.basePath, base);\n        const absolutePotential = path.resolve(workspace.basePath, potential);\n        const relativePotential = path.relative(absoluteBase, absolutePotential);\n        if (!relativePotential.startsWith('..') && !path.isAbsolute(relativePotential)) {\n            return true;\n        }\n        return false;\n    };\n    const projects = Array.from(workspace.projects)\n        .map(([name, project]) => [project.root, name])\n        .filter((tuple) => isInside(tuple[0], location))\n        // Sort tuples by depth, with the deeper ones first. Since the first member is a path and\n        // we filtered all invalid paths, the longest will be the deepest (and in case of equality\n        // the sort is stable and the first declared project will win).\n        .sort((a, b) => b[0].length - a[0].length);\n    if (projects.length === 0) {\n        return null;\n    }\n    else if (projects.length > 1) {\n        const found = new Set();\n        const sameRoots = projects.filter((v) => {\n            if (!found.has(v[0])) {\n                found.add(v[0]);\n                return false;\n            }\n            return true;\n        });\n        if (sameRoots.length > 0) {\n            // Ambiguous location - cannot determine a project\n            return null;\n        }\n    }\n    return projects[0][1];\n}\nlet defaultProjectDeprecationWarningShown = false;\nfunction getProjectByCwd(workspace) {\n    if (workspace.projects.size === 1) {\n        // If there is only one project, return that one.\n        return Array.from(workspace.projects.keys())[0];\n    }\n    const project = findProjectByPath(workspace, process.cwd());\n    if (project) {\n        return project;\n    }\n    const defaultProject = workspace.extensions['defaultProject'];\n    if (defaultProject && typeof defaultProject === 'string') {\n        // If there is a default project name, return it.\n        if (!defaultProjectDeprecationWarningShown) {\n            console.warn(`DEPRECATED: The 'defaultProject' workspace option has been deprecated. ` +\n                `The project to use will be determined from the current working directory.`);\n            defaultProjectDeprecationWarningShown = true;\n        }\n        return defaultProject;\n    }\n    return null;\n}\nexports.getProjectByCwd = getProjectByCwd;\nasync function getConfiguredPackageManager() {\n    var _a;\n    const getPackageManager = (source) => {\n        if (isJsonObject(source)) {\n            const value = source['packageManager'];\n            if (value && typeof value === 'string') {\n                return value;\n            }\n        }\n        return null;\n    };\n    let result = null;\n    const workspace = await getWorkspace('local');\n    if (workspace) {\n        const project = getProjectByCwd(workspace);\n        if (project) {\n            result = getPackageManager((_a = workspace.projects.get(project)) === null || _a === void 0 ? void 0 : _a.extensions['cli']);\n        }\n        result !== null && result !== void 0 ? result : (result = getPackageManager(workspace.extensions['cli']));\n    }\n    if (!result) {\n        const globalOptions = await getWorkspace('global');\n        result = getPackageManager(globalOptions === null || globalOptions === void 0 ? void 0 : globalOptions.extensions['cli']);\n    }\n    return result;\n}\nexports.getConfiguredPackageManager = getConfiguredPackageManager;\nasync function getSchematicDefaults(collection, schematic, project) {\n    var _a;\n    const result = {};\n    const mergeOptions = (source) => {\n        if (isJsonObject(source)) {\n            // Merge options from the qualified name\n            Object.assign(result, source[`${collection}:${schematic}`]);\n            // Merge options from nested collection schematics\n            const collectionOptions = source[collection];\n            if (isJsonObject(collectionOptions)) {\n                Object.assign(result, collectionOptions[schematic]);\n            }\n        }\n    };\n    // Global level schematic options\n    const globalOptions = await getWorkspace('global');\n    mergeOptions(globalOptions === null || globalOptions === void 0 ? void 0 : globalOptions.extensions['schematics']);\n    const workspace = await getWorkspace('local');\n    if (workspace) {\n        // Workspace level schematic options\n        mergeOptions(workspace.extensions['schematics']);\n        project = project || getProjectByCwd(workspace);\n        if (project) {\n            // Project level schematic options\n            mergeOptions((_a = workspace.projects.get(project)) === null || _a === void 0 ? void 0 : _a.extensions['schematics']);\n        }\n    }\n    return result;\n}\nexports.getSchematicDefaults = getSchematicDefaults;\nasync function isWarningEnabled(warning) {\n    var _a;\n    const getWarning = (source) => {\n        if (isJsonObject(source)) {\n            const warnings = source['warnings'];\n            if (isJsonObject(warnings)) {\n                const value = warnings[warning];\n                if (typeof value == 'boolean') {\n                    return value;\n                }\n            }\n        }\n    };\n    let result;\n    const workspace = await getWorkspace('local');\n    if (workspace) {\n        const project = getProjectByCwd(workspace);\n        if (project) {\n            result = getWarning((_a = workspace.projects.get(project)) === null || _a === void 0 ? void 0 : _a.extensions['cli']);\n        }\n        result = result !== null && result !== void 0 ? result : getWarning(workspace.extensions['cli']);\n    }\n    if (result === undefined) {\n        const globalOptions = await getWorkspace('global');\n        result = getWarning(globalOptions === null || globalOptions === void 0 ? void 0 : globalOptions.extensions['cli']);\n    }\n    // All warnings are enabled by default\n    return result !== null && result !== void 0 ? result : true;\n}\nexports.isWarningEnabled = isWarningEnabled;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}