{"ast":null,"code":"'use strict';\n\n/**\n * `editor` type prompt\n */\nconst chalk = require('chalk');\nconst {\n  editAsync\n} = require('external-editor');\nconst Base = require('./base');\nconst observe = require('../utils/events');\nconst {\n  Subject\n} = require('rxjs');\nclass EditorPrompt extends Base {\n  /**\n   * Start the Inquiry session\n   * @param  {Function} cb      Callback when prompt is done\n   * @return {this}\n   */\n\n  _run(cb) {\n    this.done = cb;\n    this.editorResult = new Subject();\n\n    // Open Editor on \"line\" (Enter Key)\n    const events = observe(this.rl);\n    this.lineSubscription = events.line.subscribe(this.startExternalEditor.bind(this));\n\n    // Trigger Validation when editor closes\n    const validation = this.handleSubmitEvents(this.editorResult);\n    validation.success.forEach(this.onEnd.bind(this));\n    validation.error.forEach(this.onError.bind(this));\n\n    // Prevents default from being printed on screen (can look weird with multiple lines)\n    this.currentText = this.opt.default;\n    this.opt.default = null;\n\n    // Init\n    this.render();\n    return this;\n  }\n\n  /**\n   * Render the prompt to screen\n   * @return {EditorPrompt} self\n   */\n\n  render(error) {\n    let bottomContent = '';\n    let message = this.getQuestion();\n    if (this.status === 'answered') {\n      message += chalk.dim('Received');\n    } else {\n      message += chalk.dim('Press <enter> to launch your preferred editor.');\n    }\n    if (error) {\n      bottomContent = chalk.red('>> ') + error;\n    }\n    this.screen.render(message, bottomContent);\n  }\n\n  /**\n   * Launch $EDITOR on user press enter\n   */\n\n  startExternalEditor() {\n    // Pause Readline to prevent stdin and stdout from being modified while the editor is showing\n    this.rl.pause();\n    editAsync(this.currentText, this.endExternalEditor.bind(this));\n  }\n  endExternalEditor(error, result) {\n    this.rl.resume();\n    if (error) {\n      this.editorResult.error(error);\n    } else {\n      this.editorResult.next(result);\n    }\n  }\n  onEnd(state) {\n    this.editorResult.unsubscribe();\n    this.lineSubscription.unsubscribe();\n    this.answer = state.value;\n    this.status = 'answered';\n    // Re-render prompt\n    this.render();\n    this.screen.done();\n    this.done(this.answer);\n  }\n  onError(state) {\n    this.render(state.isValid);\n  }\n}\nmodule.exports = EditorPrompt;","map":{"version":3,"names":["chalk","require","editAsync","Base","observe","Subject","EditorPrompt","_run","cb","done","editorResult","events","rl","lineSubscription","line","subscribe","startExternalEditor","bind","validation","handleSubmitEvents","success","forEach","onEnd","error","onError","currentText","opt","default","render","bottomContent","message","getQuestion","status","dim","red","screen","pause","endExternalEditor","result","resume","next","state","unsubscribe","answer","value","isValid","module","exports"],"sources":["/Users/sabyrzhanolzhabay/Web-Dev/Arabakz/ArabaFrontend/node_modules/inquirer/lib/prompts/editor.js"],"sourcesContent":["'use strict';\n/**\n * `editor` type prompt\n */\n\nconst chalk = require('chalk');\nconst { editAsync } = require('external-editor');\nconst Base = require('./base');\nconst observe = require('../utils/events');\nconst { Subject } = require('rxjs');\n\nclass EditorPrompt extends Base {\n  /**\n   * Start the Inquiry session\n   * @param  {Function} cb      Callback when prompt is done\n   * @return {this}\n   */\n\n  _run(cb) {\n    this.done = cb;\n\n    this.editorResult = new Subject();\n\n    // Open Editor on \"line\" (Enter Key)\n    const events = observe(this.rl);\n    this.lineSubscription = events.line.subscribe(this.startExternalEditor.bind(this));\n\n    // Trigger Validation when editor closes\n    const validation = this.handleSubmitEvents(this.editorResult);\n    validation.success.forEach(this.onEnd.bind(this));\n    validation.error.forEach(this.onError.bind(this));\n\n    // Prevents default from being printed on screen (can look weird with multiple lines)\n    this.currentText = this.opt.default;\n    this.opt.default = null;\n\n    // Init\n    this.render();\n\n    return this;\n  }\n\n  /**\n   * Render the prompt to screen\n   * @return {EditorPrompt} self\n   */\n\n  render(error) {\n    let bottomContent = '';\n    let message = this.getQuestion();\n\n    if (this.status === 'answered') {\n      message += chalk.dim('Received');\n    } else {\n      message += chalk.dim('Press <enter> to launch your preferred editor.');\n    }\n\n    if (error) {\n      bottomContent = chalk.red('>> ') + error;\n    }\n\n    this.screen.render(message, bottomContent);\n  }\n\n  /**\n   * Launch $EDITOR on user press enter\n   */\n\n  startExternalEditor() {\n    // Pause Readline to prevent stdin and stdout from being modified while the editor is showing\n    this.rl.pause();\n    editAsync(this.currentText, this.endExternalEditor.bind(this));\n  }\n\n  endExternalEditor(error, result) {\n    this.rl.resume();\n    if (error) {\n      this.editorResult.error(error);\n    } else {\n      this.editorResult.next(result);\n    }\n  }\n\n  onEnd(state) {\n    this.editorResult.unsubscribe();\n    this.lineSubscription.unsubscribe();\n    this.answer = state.value;\n    this.status = 'answered';\n    // Re-render prompt\n    this.render();\n    this.screen.done();\n    this.done(this.answer);\n  }\n\n  onError(state) {\n    this.render(state.isValid);\n  }\n}\n\nmodule.exports = EditorPrompt;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}