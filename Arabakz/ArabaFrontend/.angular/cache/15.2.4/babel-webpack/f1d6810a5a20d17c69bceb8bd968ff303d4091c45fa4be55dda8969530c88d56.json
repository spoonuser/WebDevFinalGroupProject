{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BuilderVersionSymbol = exports.BuilderSymbol = void 0;\n// Internal types that should not be exported directly. These are used by the host and architect\n// itself. Host implementations should import the host.ts file.\n/**\n * BuilderSymbol used for knowing if a function was created using createBuilder(). This is a\n * property set on the function that should be `true`.\n * Using Symbol.for() as it's a global registry that's the same for all installations of\n * Architect (if some libraries depends directly on architect instead of sharing the files).\n */\nexports.BuilderSymbol = Symbol.for('@angular-devkit/architect:builder');\n/**\n * BuilderVersionSymbol used for knowing which version of the library createBuilder() came from.\n * This is to make sure we don't try to use an incompatible builder.\n * Using Symbol.for() as it's a global registry that's the same for all installations of\n * Architect (if some libraries depends directly on architect instead of sharing the files).\n */\nexports.BuilderVersionSymbol = Symbol.for('@angular-devkit/architect:version');","map":{"version":3,"names":["Object","defineProperty","exports","value","BuilderVersionSymbol","BuilderSymbol","Symbol","for"],"sources":["/Users/sabyrzhanolzhabay/Web-Dev/Arabakz/ArabaFrontend/node_modules/@angular/cli/node_modules/@angular-devkit/architect/src/internal.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BuilderVersionSymbol = exports.BuilderSymbol = void 0;\n// Internal types that should not be exported directly. These are used by the host and architect\n// itself. Host implementations should import the host.ts file.\n/**\n * BuilderSymbol used for knowing if a function was created using createBuilder(). This is a\n * property set on the function that should be `true`.\n * Using Symbol.for() as it's a global registry that's the same for all installations of\n * Architect (if some libraries depends directly on architect instead of sharing the files).\n */\nexports.BuilderSymbol = Symbol.for('@angular-devkit/architect:builder');\n/**\n * BuilderVersionSymbol used for knowing which version of the library createBuilder() came from.\n * This is to make sure we don't try to use an incompatible builder.\n * Using Symbol.for() as it's a global registry that's the same for all installations of\n * Architect (if some libraries depends directly on architect instead of sharing the files).\n */\nexports.BuilderVersionSymbol = Symbol.for('@angular-devkit/architect:version');\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,oBAAoB,GAAGF,OAAO,CAACG,aAAa,GAAG,KAAK,CAAC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,OAAO,CAACG,aAAa,GAAGC,MAAM,CAACC,GAAG,CAAC,mCAAmC,CAAC;AACvE;AACA;AACA;AACA;AACA;AACA;AACAL,OAAO,CAACE,oBAAoB,GAAGE,MAAM,CAACC,GAAG,CAAC,mCAAmC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}