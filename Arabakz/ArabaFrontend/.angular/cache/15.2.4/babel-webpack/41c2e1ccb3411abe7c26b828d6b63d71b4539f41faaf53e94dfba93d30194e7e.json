{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _asyncToGenerator = require(\"/Users/sabyrzhanolzhabay/Web-Dev/Arabakz/ArabaFrontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CoreSchemaRegistry = exports.SchemaValidationException = void 0;\nconst ajv_1 = __importDefault(require(\"ajv\"));\nconst ajv_formats_1 = __importDefault(require(\"ajv-formats\"));\nconst http = __importStar(require(\"http\"));\nconst https = __importStar(require(\"https\"));\nconst rxjs_1 = require(\"rxjs\");\nconst operators_1 = require(\"rxjs/operators\");\nconst Url = __importStar(require(\"url\"));\nconst exception_1 = require(\"../../exception\");\nconst utils_1 = require(\"../../utils\");\nconst utils_2 = require(\"../utils\");\nconst utility_1 = require(\"./utility\");\nconst visitor_1 = require(\"./visitor\");\nclass SchemaValidationException extends exception_1.BaseException {\n  constructor(errors, baseMessage = 'Schema validation failed with the following errors:') {\n    if (!errors || errors.length === 0) {\n      super('Schema validation failed.');\n      this.errors = [];\n      return;\n    }\n    const messages = SchemaValidationException.createMessages(errors);\n    super(`${baseMessage}\\n  ${messages.join('\\n  ')}`);\n    this.errors = errors;\n  }\n  static createMessages(errors) {\n    if (!errors || errors.length === 0) {\n      return [];\n    }\n    const messages = errors.map(err => {\n      var _a;\n      let message = `Data path ${JSON.stringify(err.instancePath)} ${err.message}`;\n      if (err.params) {\n        switch (err.keyword) {\n          case 'additionalProperties':\n            message += `(${err.params.additionalProperty})`;\n            break;\n          case 'enum':\n            message += `. Allowed values are: ${(_a = err.params.allowedValues) === null || _a === void 0 ? void 0 : _a.map(v => `\"${v}\"`).join(', ')}`;\n            break;\n        }\n      }\n      return message + '.';\n    });\n    return messages;\n  }\n}\nexports.SchemaValidationException = SchemaValidationException;\nclass CoreSchemaRegistry {\n  constructor(formats = []) {\n    this._uriCache = new Map();\n    this._uriHandlers = new Set();\n    this._pre = new utils_1.PartiallyOrderedSet();\n    this._post = new utils_1.PartiallyOrderedSet();\n    this._smartDefaultKeyword = false;\n    this._sourceMap = new Map();\n    this._ajv = new ajv_1.default({\n      strict: false,\n      loadSchema: uri => this._fetch(uri),\n      passContext: true\n    });\n    (0, ajv_formats_1.default)(this._ajv);\n    for (const format of formats) {\n      this.addFormat(format);\n    }\n  }\n  _fetch(uri) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const maybeSchema = _this._uriCache.get(uri);\n      if (maybeSchema) {\n        return maybeSchema;\n      }\n      // Try all handlers, one after the other.\n      for (const handler of _this._uriHandlers) {\n        let handlerResult = handler(uri);\n        if (handlerResult === null || handlerResult === undefined) {\n          continue;\n        }\n        if ((0, rxjs_1.isObservable)(handlerResult)) {\n          handlerResult = handlerResult.toPromise();\n        }\n        const value = yield handlerResult;\n        _this._uriCache.set(uri, value);\n        return value;\n      }\n      // If none are found, handle using http client.\n      return new Promise((resolve, reject) => {\n        const url = new Url.URL(uri);\n        const client = url.protocol === 'https:' ? https : http;\n        client.get(url, res => {\n          if (!res.statusCode || res.statusCode >= 300) {\n            // Consume the rest of the data to free memory.\n            res.resume();\n            reject(new Error(`Request failed. Status Code: ${res.statusCode}`));\n          } else {\n            res.setEncoding('utf8');\n            let data = '';\n            res.on('data', chunk => {\n              data += chunk;\n            });\n            res.on('end', () => {\n              try {\n                const json = JSON.parse(data);\n                _this._uriCache.set(uri, json);\n                resolve(json);\n              } catch (err) {\n                reject(err);\n              }\n            });\n          }\n        });\n      });\n    })();\n  }\n  /**\n   * Add a transformation step before the validation of any Json.\n   * @param {JsonVisitor} visitor The visitor to transform every value.\n   * @param {JsonVisitor[]} deps A list of other visitors to run before.\n   */\n  addPreTransform(visitor, deps) {\n    this._pre.add(visitor, deps);\n  }\n  /**\n   * Add a transformation step after the validation of any Json. The JSON will not be validated\n   * after the POST, so if transformations are not compatible with the Schema it will not result\n   * in an error.\n   * @param {JsonVisitor} visitor The visitor to transform every value.\n   * @param {JsonVisitor[]} deps A list of other visitors to run before.\n   */\n  addPostTransform(visitor, deps) {\n    this._post.add(visitor, deps);\n  }\n  _resolver(ref, validate) {\n    if (!validate || !ref) {\n      return {};\n    }\n    const schema = validate.schemaEnv.root.schema;\n    const id = typeof schema === 'object' ? schema.$id : null;\n    let fullReference = ref;\n    if (typeof id === 'string') {\n      fullReference = Url.resolve(id, ref);\n      if (ref.startsWith('#')) {\n        fullReference = id + fullReference;\n      }\n    }\n    const resolvedSchema = this._ajv.getSchema(fullReference);\n    return {\n      context: resolvedSchema === null || resolvedSchema === void 0 ? void 0 : resolvedSchema.schemaEnv.validate,\n      schema: resolvedSchema === null || resolvedSchema === void 0 ? void 0 : resolvedSchema.schema\n    };\n  }\n  /**\n   * Flatten the Schema, resolving and replacing all the refs. Makes it into a synchronous schema\n   * that is also easier to traverse. Does not cache the result.\n   *\n   * @param schema The schema or URI to flatten.\n   * @returns An Observable of the flattened schema object.\n   * @deprecated since 11.2 without replacement.\n   * Producing a flatten schema document does not in all cases produce a schema with identical behavior to the original.\n   * See: https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.appendix.B.2\n   */\n  flatten(schema) {\n    return (0, rxjs_1.from)(this._flatten(schema));\n  }\n  _flatten(schema) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      _this2._ajv.removeSchema(schema);\n      _this2._currentCompilationSchemaInfo = undefined;\n      const validate = yield _this2._ajv.compileAsync(schema);\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      const self = _this2;\n      function visitor(current, pointer, parentSchema, index) {\n        if (current && parentSchema && index && (0, utils_2.isJsonObject)(current) && Object.prototype.hasOwnProperty.call(current, '$ref') && typeof current['$ref'] == 'string') {\n          const resolved = self._resolver(current['$ref'], validate);\n          if (resolved.schema) {\n            parentSchema[index] = resolved.schema;\n          }\n        }\n      }\n      const schemaCopy = (0, utils_1.deepCopy)(validate.schema);\n      (0, visitor_1.visitJsonSchema)(schemaCopy, visitor);\n      return schemaCopy;\n    })();\n  }\n  /**\n   * Compile and return a validation function for the Schema.\n   *\n   * @param schema The schema to validate. If a string, will fetch the schema before compiling it\n   * (using schema as a URI).\n   * @returns An Observable of the Validation function.\n   */\n  compile(schema) {\n    return (0, rxjs_1.from)(this._compile(schema)).pipe((0, operators_1.map)(validate => (value, options) => (0, rxjs_1.from)(validate(value, options))));\n  }\n  _compile(schema) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      if (typeof schema === 'boolean') {\n        return /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (data) {\n            return {\n              success: schema,\n              data\n            };\n          });\n          return function (_x) {\n            return _ref.apply(this, arguments);\n          };\n        }();\n      }\n      const schemaInfo = {\n        smartDefaultRecord: new Map(),\n        promptDefinitions: []\n      };\n      _this3._ajv.removeSchema(schema);\n      let validator;\n      try {\n        _this3._currentCompilationSchemaInfo = schemaInfo;\n        validator = _this3._ajv.compile(schema);\n      } catch (e) {\n        // This should eventually be refactored so that we we handle race condition where the same schema is validated at the same time.\n        if (!(e instanceof ajv_1.default.MissingRefError)) {\n          throw e;\n        }\n        validator = yield _this3._ajv.compileAsync(schema);\n      } finally {\n        _this3._currentCompilationSchemaInfo = undefined;\n      }\n      return /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* (data, options) {\n          var _a;\n          const validationOptions = {\n            withPrompts: true,\n            applyPostTransforms: true,\n            applyPreTransforms: true,\n            ...options\n          };\n          const validationContext = {\n            promptFieldsWithValue: new Set()\n          };\n          // Apply pre-validation transforms\n          if (validationOptions.applyPreTransforms) {\n            for (const visitor of _this3._pre.values()) {\n              data = yield (0, visitor_1.visitJson)(data, visitor, schema, _this3._resolver.bind(_this3), validator).toPromise();\n            }\n          }\n          // Apply smart defaults\n          yield _this3._applySmartDefaults(data, schemaInfo.smartDefaultRecord);\n          // Apply prompts\n          if (validationOptions.withPrompts) {\n            const visitor = (value, pointer) => {\n              if (value !== undefined) {\n                validationContext.promptFieldsWithValue.add(pointer);\n              }\n              return value;\n            };\n            if (typeof schema === 'object') {\n              yield (0, visitor_1.visitJson)(data, visitor, schema, _this3._resolver.bind(_this3), validator).toPromise();\n            }\n            const definitions = schemaInfo.promptDefinitions.filter(def => !validationContext.promptFieldsWithValue.has(def.id));\n            if (definitions.length > 0) {\n              yield _this3._applyPrompts(data, definitions);\n            }\n          }\n          // Validate using ajv\n          try {\n            const success = yield validator.call(validationContext, data);\n            if (!success) {\n              return {\n                data,\n                success,\n                errors: (_a = validator.errors) !== null && _a !== void 0 ? _a : []\n              };\n            }\n          } catch (error) {\n            if (error instanceof ajv_1.default.ValidationError) {\n              return {\n                data,\n                success: false,\n                errors: error.errors\n              };\n            }\n            throw error;\n          }\n          // Apply post-validation transforms\n          if (validationOptions.applyPostTransforms) {\n            for (const visitor of _this3._post.values()) {\n              data = yield (0, visitor_1.visitJson)(data, visitor, schema, _this3._resolver.bind(_this3), validator).toPromise();\n            }\n          }\n          return {\n            data,\n            success: true\n          };\n        });\n        return function (_x2, _x3) {\n          return _ref2.apply(this, arguments);\n        };\n      }();\n    })();\n  }\n  addFormat(format) {\n    this._ajv.addFormat(format.name, format.formatter);\n  }\n  addSmartDefaultProvider(source, provider) {\n    if (this._sourceMap.has(source)) {\n      throw new Error(source);\n    }\n    this._sourceMap.set(source, provider);\n    if (!this._smartDefaultKeyword) {\n      this._smartDefaultKeyword = true;\n      this._ajv.addKeyword({\n        keyword: '$default',\n        errors: false,\n        valid: true,\n        compile: (schema, _parentSchema, it) => {\n          const compilationSchemInfo = this._currentCompilationSchemaInfo;\n          if (compilationSchemInfo === undefined) {\n            return () => true;\n          }\n          // We cheat, heavily.\n          const pathArray = this.normalizeDataPathArr(it);\n          compilationSchemInfo.smartDefaultRecord.set(JSON.stringify(pathArray), schema);\n          return () => true;\n        },\n        metaSchema: {\n          type: 'object',\n          properties: {\n            '$source': {\n              type: 'string'\n            }\n          },\n          additionalProperties: true,\n          required: ['$source']\n        }\n      });\n    }\n  }\n  registerUriHandler(handler) {\n    this._uriHandlers.add(handler);\n  }\n  usePromptProvider(provider) {\n    const isSetup = !!this._promptProvider;\n    this._promptProvider = provider;\n    if (isSetup) {\n      return;\n    }\n    this._ajv.addKeyword({\n      keyword: 'x-prompt',\n      errors: false,\n      valid: true,\n      compile: (schema, parentSchema, it) => {\n        const compilationSchemInfo = this._currentCompilationSchemaInfo;\n        if (!compilationSchemInfo) {\n          return () => true;\n        }\n        const path = '/' + this.normalizeDataPathArr(it).join('/');\n        let type;\n        let items;\n        let message;\n        if (typeof schema == 'string') {\n          message = schema;\n        } else {\n          message = schema.message;\n          type = schema.type;\n          items = schema.items;\n        }\n        const propertyTypes = (0, utility_1.getTypesOfSchema)(parentSchema);\n        if (!type) {\n          if (propertyTypes.size === 1 && propertyTypes.has('boolean')) {\n            type = 'confirmation';\n          } else if (Array.isArray(parentSchema.enum)) {\n            type = 'list';\n          } else if (propertyTypes.size === 1 && propertyTypes.has('array') && parentSchema.items && Array.isArray(parentSchema.items.enum)) {\n            type = 'list';\n          } else {\n            type = 'input';\n          }\n        }\n        let multiselect;\n        if (type === 'list') {\n          multiselect = schema.multiselect === undefined ? propertyTypes.size === 1 && propertyTypes.has('array') : schema.multiselect;\n          const enumValues = multiselect ? parentSchema.items && parentSchema.items.enum : parentSchema.enum;\n          if (!items && Array.isArray(enumValues)) {\n            items = [];\n            for (const value of enumValues) {\n              if (typeof value == 'string') {\n                items.push(value);\n              } else if (typeof value == 'object') {\n                // Invalid\n              } else {\n                items.push({\n                  label: value.toString(),\n                  value\n                });\n              }\n            }\n          }\n        }\n        const definition = {\n          id: path,\n          type,\n          message,\n          raw: schema,\n          items,\n          multiselect,\n          propertyTypes,\n          default: typeof parentSchema.default == 'object' && parentSchema.default !== null && !Array.isArray(parentSchema.default) ? undefined : parentSchema.default,\n          validator(data) {\n            return _asyncToGenerator(function* () {\n              var _a;\n              try {\n                const result = yield it.self.validate(parentSchema, data);\n                // If the schema is sync then false will be returned on validation failure\n                if (result) {\n                  return result;\n                } else if ((_a = it.self.errors) === null || _a === void 0 ? void 0 : _a.length) {\n                  // Validation errors will be present on the Ajv instance when sync\n                  return it.self.errors[0].message;\n                }\n              } catch (e) {\n                const validationError = e;\n                // If the schema is async then an error will be thrown on validation failure\n                if (Array.isArray(validationError.errors) && validationError.errors.length) {\n                  return validationError.errors[0].message;\n                }\n              }\n              return false;\n            })();\n          }\n        };\n        compilationSchemInfo.promptDefinitions.push(definition);\n        return function () {\n          // If 'this' is undefined in the call, then it defaults to the global\n          // 'this'.\n          if (this && this.promptFieldsWithValue) {\n            this.promptFieldsWithValue.add(path);\n          }\n          return true;\n        };\n      },\n      metaSchema: {\n        oneOf: [{\n          type: 'string'\n        }, {\n          type: 'object',\n          properties: {\n            'type': {\n              type: 'string'\n            },\n            'message': {\n              type: 'string'\n            }\n          },\n          additionalProperties: true,\n          required: ['message']\n        }]\n      }\n    });\n  }\n  _applyPrompts(data, prompts) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const provider = _this4._promptProvider;\n      if (!provider) {\n        return;\n      }\n      const answers = yield (0, rxjs_1.from)(provider(prompts)).toPromise();\n      for (const path in answers) {\n        const pathFragments = path.split('/').slice(1);\n        CoreSchemaRegistry._set(data, pathFragments, answers[path], null, undefined, true);\n      }\n    })();\n  }\n  static _set(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  data, fragments, value,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  parent = null, parentProperty, force) {\n    for (let index = 0; index < fragments.length; index++) {\n      const fragment = fragments[index];\n      if (/^i\\d+$/.test(fragment)) {\n        if (!Array.isArray(data)) {\n          return;\n        }\n        for (let dataIndex = 0; dataIndex < data.length; dataIndex++) {\n          CoreSchemaRegistry._set(data[dataIndex], fragments.slice(index + 1), value, data, `${dataIndex}`);\n        }\n        return;\n      }\n      if (!data && parent !== null && parentProperty) {\n        data = parent[parentProperty] = {};\n      }\n      parent = data;\n      parentProperty = fragment;\n      data = data[fragment];\n    }\n    if (parent && parentProperty && (force || parent[parentProperty] === undefined)) {\n      parent[parentProperty] = value;\n    }\n  }\n  _applySmartDefaults(data, smartDefaults) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      for (const [pointer, schema] of smartDefaults.entries()) {\n        const fragments = JSON.parse(pointer);\n        const source = _this5._sourceMap.get(schema.$source);\n        if (!source) {\n          continue;\n        }\n        let value = source(schema);\n        if ((0, rxjs_1.isObservable)(value)) {\n          value = yield value.toPromise();\n        }\n        CoreSchemaRegistry._set(data, fragments, value);\n      }\n    })();\n  }\n  useXDeprecatedProvider(onUsage) {\n    this._ajv.addKeyword({\n      keyword: 'x-deprecated',\n      validate: (schema, _data, _parentSchema, dataCxt) => {\n        if (schema) {\n          onUsage(`Option \"${dataCxt === null || dataCxt === void 0 ? void 0 : dataCxt.parentDataProperty}\" is deprecated${typeof schema == 'string' ? ': ' + schema : '.'}`);\n        }\n        return true;\n      },\n      errors: false\n    });\n  }\n  normalizeDataPathArr(it) {\n    return it.dataPathArr.slice(1, it.dataLevel + 1).map(p => typeof p === 'number' ? p : p.str.replace(/\"/g, ''));\n  }\n}\nexports.CoreSchemaRegistry = CoreSchemaRegistry;","map":{"version":3,"names":["__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","__importDefault","exports","CoreSchemaRegistry","SchemaValidationException","ajv_1","require","ajv_formats_1","http","https","rxjs_1","operators_1","Url","exception_1","utils_1","utils_2","utility_1","visitor_1","BaseException","constructor","errors","baseMessage","length","messages","createMessages","join","map","err","_a","message","JSON","stringify","instancePath","params","keyword","additionalProperty","allowedValues","formats","_uriCache","Map","_uriHandlers","Set","_pre","PartiallyOrderedSet","_post","_smartDefaultKeyword","_sourceMap","_ajv","default","strict","loadSchema","uri","_fetch","passContext","format","addFormat","maybeSchema","handler","handlerResult","isObservable","toPromise","set","Promise","resolve","reject","url","URL","client","protocol","res","statusCode","resume","Error","setEncoding","data","on","chunk","json","parse","addPreTransform","visitor","deps","add","addPostTransform","_resolver","ref","validate","schema","schemaEnv","root","id","$id","fullReference","startsWith","resolvedSchema","getSchema","context","flatten","from","_flatten","removeSchema","_currentCompilationSchemaInfo","compileAsync","self","current","pointer","parentSchema","index","isJsonObject","resolved","schemaCopy","deepCopy","visitJsonSchema","compile","_compile","pipe","options","success","schemaInfo","smartDefaultRecord","promptDefinitions","validator","e","MissingRefError","validationOptions","withPrompts","applyPostTransforms","applyPreTransforms","validationContext","promptFieldsWithValue","values","visitJson","bind","_applySmartDefaults","definitions","filter","def","has","_applyPrompts","error","ValidationError","name","formatter","addSmartDefaultProvider","source","provider","addKeyword","valid","_parentSchema","it","compilationSchemInfo","pathArray","normalizeDataPathArr","metaSchema","type","properties","additionalProperties","required","registerUriHandler","usePromptProvider","isSetup","_promptProvider","path","items","propertyTypes","getTypesOfSchema","size","Array","isArray","enum","multiselect","enumValues","push","label","toString","definition","raw","validationError","oneOf","prompts","answers","pathFragments","split","slice","_set","fragments","parent","parentProperty","force","fragment","test","dataIndex","smartDefaults","entries","$source","useXDeprecatedProvider","onUsage","_data","dataCxt","parentDataProperty","dataPathArr","dataLevel","p","str","replace"],"sources":["/Users/sabyrzhanolzhabay/Web-Dev/Arabakz/ArabaFrontend/node_modules/@angular/cli/node_modules/@angular-devkit/core/src/json/schema/registry.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CoreSchemaRegistry = exports.SchemaValidationException = void 0;\nconst ajv_1 = __importDefault(require(\"ajv\"));\nconst ajv_formats_1 = __importDefault(require(\"ajv-formats\"));\nconst http = __importStar(require(\"http\"));\nconst https = __importStar(require(\"https\"));\nconst rxjs_1 = require(\"rxjs\");\nconst operators_1 = require(\"rxjs/operators\");\nconst Url = __importStar(require(\"url\"));\nconst exception_1 = require(\"../../exception\");\nconst utils_1 = require(\"../../utils\");\nconst utils_2 = require(\"../utils\");\nconst utility_1 = require(\"./utility\");\nconst visitor_1 = require(\"./visitor\");\nclass SchemaValidationException extends exception_1.BaseException {\n    constructor(errors, baseMessage = 'Schema validation failed with the following errors:') {\n        if (!errors || errors.length === 0) {\n            super('Schema validation failed.');\n            this.errors = [];\n            return;\n        }\n        const messages = SchemaValidationException.createMessages(errors);\n        super(`${baseMessage}\\n  ${messages.join('\\n  ')}`);\n        this.errors = errors;\n    }\n    static createMessages(errors) {\n        if (!errors || errors.length === 0) {\n            return [];\n        }\n        const messages = errors.map((err) => {\n            var _a;\n            let message = `Data path ${JSON.stringify(err.instancePath)} ${err.message}`;\n            if (err.params) {\n                switch (err.keyword) {\n                    case 'additionalProperties':\n                        message += `(${err.params.additionalProperty})`;\n                        break;\n                    case 'enum':\n                        message += `. Allowed values are: ${(_a = err.params.allowedValues) === null || _a === void 0 ? void 0 : _a.map((v) => `\"${v}\"`).join(', ')}`;\n                        break;\n                }\n            }\n            return message + '.';\n        });\n        return messages;\n    }\n}\nexports.SchemaValidationException = SchemaValidationException;\nclass CoreSchemaRegistry {\n    constructor(formats = []) {\n        this._uriCache = new Map();\n        this._uriHandlers = new Set();\n        this._pre = new utils_1.PartiallyOrderedSet();\n        this._post = new utils_1.PartiallyOrderedSet();\n        this._smartDefaultKeyword = false;\n        this._sourceMap = new Map();\n        this._ajv = new ajv_1.default({\n            strict: false,\n            loadSchema: (uri) => this._fetch(uri),\n            passContext: true,\n        });\n        (0, ajv_formats_1.default)(this._ajv);\n        for (const format of formats) {\n            this.addFormat(format);\n        }\n    }\n    async _fetch(uri) {\n        const maybeSchema = this._uriCache.get(uri);\n        if (maybeSchema) {\n            return maybeSchema;\n        }\n        // Try all handlers, one after the other.\n        for (const handler of this._uriHandlers) {\n            let handlerResult = handler(uri);\n            if (handlerResult === null || handlerResult === undefined) {\n                continue;\n            }\n            if ((0, rxjs_1.isObservable)(handlerResult)) {\n                handlerResult = handlerResult.toPromise();\n            }\n            const value = await handlerResult;\n            this._uriCache.set(uri, value);\n            return value;\n        }\n        // If none are found, handle using http client.\n        return new Promise((resolve, reject) => {\n            const url = new Url.URL(uri);\n            const client = url.protocol === 'https:' ? https : http;\n            client.get(url, (res) => {\n                if (!res.statusCode || res.statusCode >= 300) {\n                    // Consume the rest of the data to free memory.\n                    res.resume();\n                    reject(new Error(`Request failed. Status Code: ${res.statusCode}`));\n                }\n                else {\n                    res.setEncoding('utf8');\n                    let data = '';\n                    res.on('data', (chunk) => {\n                        data += chunk;\n                    });\n                    res.on('end', () => {\n                        try {\n                            const json = JSON.parse(data);\n                            this._uriCache.set(uri, json);\n                            resolve(json);\n                        }\n                        catch (err) {\n                            reject(err);\n                        }\n                    });\n                }\n            });\n        });\n    }\n    /**\n     * Add a transformation step before the validation of any Json.\n     * @param {JsonVisitor} visitor The visitor to transform every value.\n     * @param {JsonVisitor[]} deps A list of other visitors to run before.\n     */\n    addPreTransform(visitor, deps) {\n        this._pre.add(visitor, deps);\n    }\n    /**\n     * Add a transformation step after the validation of any Json. The JSON will not be validated\n     * after the POST, so if transformations are not compatible with the Schema it will not result\n     * in an error.\n     * @param {JsonVisitor} visitor The visitor to transform every value.\n     * @param {JsonVisitor[]} deps A list of other visitors to run before.\n     */\n    addPostTransform(visitor, deps) {\n        this._post.add(visitor, deps);\n    }\n    _resolver(ref, validate) {\n        if (!validate || !ref) {\n            return {};\n        }\n        const schema = validate.schemaEnv.root.schema;\n        const id = typeof schema === 'object' ? schema.$id : null;\n        let fullReference = ref;\n        if (typeof id === 'string') {\n            fullReference = Url.resolve(id, ref);\n            if (ref.startsWith('#')) {\n                fullReference = id + fullReference;\n            }\n        }\n        const resolvedSchema = this._ajv.getSchema(fullReference);\n        return {\n            context: resolvedSchema === null || resolvedSchema === void 0 ? void 0 : resolvedSchema.schemaEnv.validate,\n            schema: resolvedSchema === null || resolvedSchema === void 0 ? void 0 : resolvedSchema.schema,\n        };\n    }\n    /**\n     * Flatten the Schema, resolving and replacing all the refs. Makes it into a synchronous schema\n     * that is also easier to traverse. Does not cache the result.\n     *\n     * @param schema The schema or URI to flatten.\n     * @returns An Observable of the flattened schema object.\n     * @deprecated since 11.2 without replacement.\n     * Producing a flatten schema document does not in all cases produce a schema with identical behavior to the original.\n     * See: https://json-schema.org/draft/2019-09/json-schema-core.html#rfc.appendix.B.2\n     */\n    flatten(schema) {\n        return (0, rxjs_1.from)(this._flatten(schema));\n    }\n    async _flatten(schema) {\n        this._ajv.removeSchema(schema);\n        this._currentCompilationSchemaInfo = undefined;\n        const validate = await this._ajv.compileAsync(schema);\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const self = this;\n        function visitor(current, pointer, parentSchema, index) {\n            if (current &&\n                parentSchema &&\n                index &&\n                (0, utils_2.isJsonObject)(current) &&\n                Object.prototype.hasOwnProperty.call(current, '$ref') &&\n                typeof current['$ref'] == 'string') {\n                const resolved = self._resolver(current['$ref'], validate);\n                if (resolved.schema) {\n                    parentSchema[index] = resolved.schema;\n                }\n            }\n        }\n        const schemaCopy = (0, utils_1.deepCopy)(validate.schema);\n        (0, visitor_1.visitJsonSchema)(schemaCopy, visitor);\n        return schemaCopy;\n    }\n    /**\n     * Compile and return a validation function for the Schema.\n     *\n     * @param schema The schema to validate. If a string, will fetch the schema before compiling it\n     * (using schema as a URI).\n     * @returns An Observable of the Validation function.\n     */\n    compile(schema) {\n        return (0, rxjs_1.from)(this._compile(schema)).pipe((0, operators_1.map)((validate) => (value, options) => (0, rxjs_1.from)(validate(value, options))));\n    }\n    async _compile(schema) {\n        if (typeof schema === 'boolean') {\n            return async (data) => ({ success: schema, data });\n        }\n        const schemaInfo = {\n            smartDefaultRecord: new Map(),\n            promptDefinitions: [],\n        };\n        this._ajv.removeSchema(schema);\n        let validator;\n        try {\n            this._currentCompilationSchemaInfo = schemaInfo;\n            validator = this._ajv.compile(schema);\n        }\n        catch (e) {\n            // This should eventually be refactored so that we we handle race condition where the same schema is validated at the same time.\n            if (!(e instanceof ajv_1.default.MissingRefError)) {\n                throw e;\n            }\n            validator = await this._ajv.compileAsync(schema);\n        }\n        finally {\n            this._currentCompilationSchemaInfo = undefined;\n        }\n        return async (data, options) => {\n            var _a;\n            const validationOptions = {\n                withPrompts: true,\n                applyPostTransforms: true,\n                applyPreTransforms: true,\n                ...options,\n            };\n            const validationContext = {\n                promptFieldsWithValue: new Set(),\n            };\n            // Apply pre-validation transforms\n            if (validationOptions.applyPreTransforms) {\n                for (const visitor of this._pre.values()) {\n                    data = await (0, visitor_1.visitJson)(data, visitor, schema, this._resolver.bind(this), validator).toPromise();\n                }\n            }\n            // Apply smart defaults\n            await this._applySmartDefaults(data, schemaInfo.smartDefaultRecord);\n            // Apply prompts\n            if (validationOptions.withPrompts) {\n                const visitor = (value, pointer) => {\n                    if (value !== undefined) {\n                        validationContext.promptFieldsWithValue.add(pointer);\n                    }\n                    return value;\n                };\n                if (typeof schema === 'object') {\n                    await (0, visitor_1.visitJson)(data, visitor, schema, this._resolver.bind(this), validator).toPromise();\n                }\n                const definitions = schemaInfo.promptDefinitions.filter((def) => !validationContext.promptFieldsWithValue.has(def.id));\n                if (definitions.length > 0) {\n                    await this._applyPrompts(data, definitions);\n                }\n            }\n            // Validate using ajv\n            try {\n                const success = await validator.call(validationContext, data);\n                if (!success) {\n                    return { data, success, errors: (_a = validator.errors) !== null && _a !== void 0 ? _a : [] };\n                }\n            }\n            catch (error) {\n                if (error instanceof ajv_1.default.ValidationError) {\n                    return { data, success: false, errors: error.errors };\n                }\n                throw error;\n            }\n            // Apply post-validation transforms\n            if (validationOptions.applyPostTransforms) {\n                for (const visitor of this._post.values()) {\n                    data = await (0, visitor_1.visitJson)(data, visitor, schema, this._resolver.bind(this), validator).toPromise();\n                }\n            }\n            return { data, success: true };\n        };\n    }\n    addFormat(format) {\n        this._ajv.addFormat(format.name, format.formatter);\n    }\n    addSmartDefaultProvider(source, provider) {\n        if (this._sourceMap.has(source)) {\n            throw new Error(source);\n        }\n        this._sourceMap.set(source, provider);\n        if (!this._smartDefaultKeyword) {\n            this._smartDefaultKeyword = true;\n            this._ajv.addKeyword({\n                keyword: '$default',\n                errors: false,\n                valid: true,\n                compile: (schema, _parentSchema, it) => {\n                    const compilationSchemInfo = this._currentCompilationSchemaInfo;\n                    if (compilationSchemInfo === undefined) {\n                        return () => true;\n                    }\n                    // We cheat, heavily.\n                    const pathArray = this.normalizeDataPathArr(it);\n                    compilationSchemInfo.smartDefaultRecord.set(JSON.stringify(pathArray), schema);\n                    return () => true;\n                },\n                metaSchema: {\n                    type: 'object',\n                    properties: {\n                        '$source': { type: 'string' },\n                    },\n                    additionalProperties: true,\n                    required: ['$source'],\n                },\n            });\n        }\n    }\n    registerUriHandler(handler) {\n        this._uriHandlers.add(handler);\n    }\n    usePromptProvider(provider) {\n        const isSetup = !!this._promptProvider;\n        this._promptProvider = provider;\n        if (isSetup) {\n            return;\n        }\n        this._ajv.addKeyword({\n            keyword: 'x-prompt',\n            errors: false,\n            valid: true,\n            compile: (schema, parentSchema, it) => {\n                const compilationSchemInfo = this._currentCompilationSchemaInfo;\n                if (!compilationSchemInfo) {\n                    return () => true;\n                }\n                const path = '/' + this.normalizeDataPathArr(it).join('/');\n                let type;\n                let items;\n                let message;\n                if (typeof schema == 'string') {\n                    message = schema;\n                }\n                else {\n                    message = schema.message;\n                    type = schema.type;\n                    items = schema.items;\n                }\n                const propertyTypes = (0, utility_1.getTypesOfSchema)(parentSchema);\n                if (!type) {\n                    if (propertyTypes.size === 1 && propertyTypes.has('boolean')) {\n                        type = 'confirmation';\n                    }\n                    else if (Array.isArray(parentSchema.enum)) {\n                        type = 'list';\n                    }\n                    else if (propertyTypes.size === 1 &&\n                        propertyTypes.has('array') &&\n                        parentSchema.items &&\n                        Array.isArray(parentSchema.items.enum)) {\n                        type = 'list';\n                    }\n                    else {\n                        type = 'input';\n                    }\n                }\n                let multiselect;\n                if (type === 'list') {\n                    multiselect =\n                        schema.multiselect === undefined\n                            ? propertyTypes.size === 1 && propertyTypes.has('array')\n                            : schema.multiselect;\n                    const enumValues = multiselect\n                        ? parentSchema.items &&\n                            parentSchema.items.enum\n                        : parentSchema.enum;\n                    if (!items && Array.isArray(enumValues)) {\n                        items = [];\n                        for (const value of enumValues) {\n                            if (typeof value == 'string') {\n                                items.push(value);\n                            }\n                            else if (typeof value == 'object') {\n                                // Invalid\n                            }\n                            else {\n                                items.push({ label: value.toString(), value });\n                            }\n                        }\n                    }\n                }\n                const definition = {\n                    id: path,\n                    type,\n                    message,\n                    raw: schema,\n                    items,\n                    multiselect,\n                    propertyTypes,\n                    default: typeof parentSchema.default == 'object' &&\n                        parentSchema.default !== null &&\n                        !Array.isArray(parentSchema.default)\n                        ? undefined\n                        : parentSchema.default,\n                    async validator(data) {\n                        var _a;\n                        try {\n                            const result = await it.self.validate(parentSchema, data);\n                            // If the schema is sync then false will be returned on validation failure\n                            if (result) {\n                                return result;\n                            }\n                            else if ((_a = it.self.errors) === null || _a === void 0 ? void 0 : _a.length) {\n                                // Validation errors will be present on the Ajv instance when sync\n                                return it.self.errors[0].message;\n                            }\n                        }\n                        catch (e) {\n                            const validationError = e;\n                            // If the schema is async then an error will be thrown on validation failure\n                            if (Array.isArray(validationError.errors) && validationError.errors.length) {\n                                return validationError.errors[0].message;\n                            }\n                        }\n                        return false;\n                    },\n                };\n                compilationSchemInfo.promptDefinitions.push(definition);\n                return function () {\n                    // If 'this' is undefined in the call, then it defaults to the global\n                    // 'this'.\n                    if (this && this.promptFieldsWithValue) {\n                        this.promptFieldsWithValue.add(path);\n                    }\n                    return true;\n                };\n            },\n            metaSchema: {\n                oneOf: [\n                    { type: 'string' },\n                    {\n                        type: 'object',\n                        properties: {\n                            'type': { type: 'string' },\n                            'message': { type: 'string' },\n                        },\n                        additionalProperties: true,\n                        required: ['message'],\n                    },\n                ],\n            },\n        });\n    }\n    async _applyPrompts(data, prompts) {\n        const provider = this._promptProvider;\n        if (!provider) {\n            return;\n        }\n        const answers = await (0, rxjs_1.from)(provider(prompts)).toPromise();\n        for (const path in answers) {\n            const pathFragments = path.split('/').slice(1);\n            CoreSchemaRegistry._set(data, pathFragments, answers[path], null, undefined, true);\n        }\n    }\n    static _set(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    data, fragments, value, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    parent = null, parentProperty, force) {\n        for (let index = 0; index < fragments.length; index++) {\n            const fragment = fragments[index];\n            if (/^i\\d+$/.test(fragment)) {\n                if (!Array.isArray(data)) {\n                    return;\n                }\n                for (let dataIndex = 0; dataIndex < data.length; dataIndex++) {\n                    CoreSchemaRegistry._set(data[dataIndex], fragments.slice(index + 1), value, data, `${dataIndex}`);\n                }\n                return;\n            }\n            if (!data && parent !== null && parentProperty) {\n                data = parent[parentProperty] = {};\n            }\n            parent = data;\n            parentProperty = fragment;\n            data = data[fragment];\n        }\n        if (parent && parentProperty && (force || parent[parentProperty] === undefined)) {\n            parent[parentProperty] = value;\n        }\n    }\n    async _applySmartDefaults(data, smartDefaults) {\n        for (const [pointer, schema] of smartDefaults.entries()) {\n            const fragments = JSON.parse(pointer);\n            const source = this._sourceMap.get(schema.$source);\n            if (!source) {\n                continue;\n            }\n            let value = source(schema);\n            if ((0, rxjs_1.isObservable)(value)) {\n                value = await value.toPromise();\n            }\n            CoreSchemaRegistry._set(data, fragments, value);\n        }\n    }\n    useXDeprecatedProvider(onUsage) {\n        this._ajv.addKeyword({\n            keyword: 'x-deprecated',\n            validate: (schema, _data, _parentSchema, dataCxt) => {\n                if (schema) {\n                    onUsage(`Option \"${dataCxt === null || dataCxt === void 0 ? void 0 : dataCxt.parentDataProperty}\" is deprecated${typeof schema == 'string' ? ': ' + schema : '.'}`);\n                }\n                return true;\n            },\n            errors: false,\n        });\n    }\n    normalizeDataPathArr(it) {\n        return it.dataPathArr\n            .slice(1, it.dataLevel + 1)\n            .map((p) => (typeof p === 'number' ? p : p.str.replace(/\"/g, '')));\n    }\n}\nexports.CoreSchemaRegistry = CoreSchemaRegistry;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}