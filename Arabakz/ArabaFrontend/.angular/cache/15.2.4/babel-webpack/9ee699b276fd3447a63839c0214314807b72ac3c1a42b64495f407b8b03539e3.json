{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst code_1 = require(\"../code\");\nconst codegen_1 = require(\"../../compile/codegen\");\nconst error = {\n  message: ({\n    schemaCode\n  }) => (0, codegen_1.str)`must match pattern \"${schemaCode}\"`,\n  params: ({\n    schemaCode\n  }) => (0, codegen_1._)`{pattern: ${schemaCode}}`\n};\nconst def = {\n  keyword: \"pattern\",\n  type: \"string\",\n  schemaType: \"string\",\n  $data: true,\n  error,\n  code(cxt) {\n    const {\n      data,\n      $data,\n      schema,\n      schemaCode,\n      it\n    } = cxt;\n    // TODO regexp should be wrapped in try/catchs\n    const u = it.opts.unicodeRegExp ? \"u\" : \"\";\n    const regExp = $data ? (0, codegen_1._)`(new RegExp(${schemaCode}, ${u}))` : (0, code_1.usePattern)(cxt, schema);\n    cxt.fail$data((0, codegen_1._)`!${regExp}.test(${data})`);\n  }\n};\nexports.default = def;","map":{"version":3,"names":["Object","defineProperty","exports","value","code_1","require","codegen_1","error","message","schemaCode","str","params","_","def","keyword","type","schemaType","$data","code","cxt","data","schema","it","u","opts","unicodeRegExp","regExp","usePattern","fail$data","default"],"sources":["/Users/sabyrzhanolzhabay/Web-Dev/Arabakz/ArabaFrontend/node_modules/ajv/dist/vocabularies/validation/pattern.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst code_1 = require(\"../code\");\nconst codegen_1 = require(\"../../compile/codegen\");\nconst error = {\n    message: ({ schemaCode }) => (0, codegen_1.str) `must match pattern \"${schemaCode}\"`,\n    params: ({ schemaCode }) => (0, codegen_1._) `{pattern: ${schemaCode}}`,\n};\nconst def = {\n    keyword: \"pattern\",\n    type: \"string\",\n    schemaType: \"string\",\n    $data: true,\n    error,\n    code(cxt) {\n        const { data, $data, schema, schemaCode, it } = cxt;\n        // TODO regexp should be wrapped in try/catchs\n        const u = it.opts.unicodeRegExp ? \"u\" : \"\";\n        const regExp = $data ? (0, codegen_1._) `(new RegExp(${schemaCode}, ${u}))` : (0, code_1.usePattern)(cxt, schema);\n        cxt.fail$data((0, codegen_1._) `!${regExp}.test(${data})`);\n    },\n};\nexports.default = def;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,MAAMC,MAAM,GAAGC,OAAO,CAAC,SAAS,CAAC;AACjC,MAAMC,SAAS,GAAGD,OAAO,CAAC,uBAAuB,CAAC;AAClD,MAAME,KAAK,GAAG;EACVC,OAAO,EAAE,CAAC;IAAEC;EAAW,CAAC,KAAK,CAAC,CAAC,EAAEH,SAAS,CAACI,GAAG,CAAG,uBAAsBD,UAAW,GAAE;EACpFE,MAAM,EAAE,CAAC;IAAEF;EAAW,CAAC,KAAK,CAAC,CAAC,EAAEH,SAAS,CAACM,CAAC,CAAG,aAAYH,UAAW;AACzE,CAAC;AACD,MAAMI,GAAG,GAAG;EACRC,OAAO,EAAE,SAAS;EAClBC,IAAI,EAAE,QAAQ;EACdC,UAAU,EAAE,QAAQ;EACpBC,KAAK,EAAE,IAAI;EACXV,KAAK;EACLW,IAAI,CAACC,GAAG,EAAE;IACN,MAAM;MAAEC,IAAI;MAAEH,KAAK;MAAEI,MAAM;MAAEZ,UAAU;MAAEa;IAAG,CAAC,GAAGH,GAAG;IACnD;IACA,MAAMI,CAAC,GAAGD,EAAE,CAACE,IAAI,CAACC,aAAa,GAAG,GAAG,GAAG,EAAE;IAC1C,MAAMC,MAAM,GAAGT,KAAK,GAAG,CAAC,CAAC,EAAEX,SAAS,CAACM,CAAC,CAAG,eAAcH,UAAW,KAAIc,CAAE,IAAG,GAAG,CAAC,CAAC,EAAEnB,MAAM,CAACuB,UAAU,EAAER,GAAG,EAAEE,MAAM,CAAC;IACjHF,GAAG,CAACS,SAAS,CAAC,CAAC,CAAC,EAAEtB,SAAS,CAACM,CAAC,CAAG,IAAGc,MAAO,SAAQN,IAAK,GAAE,CAAC;EAC9D;AACJ,CAAC;AACDlB,OAAO,CAAC2B,OAAO,GAAGhB,GAAG"},"metadata":{},"sourceType":"script","externalDependencies":[]}