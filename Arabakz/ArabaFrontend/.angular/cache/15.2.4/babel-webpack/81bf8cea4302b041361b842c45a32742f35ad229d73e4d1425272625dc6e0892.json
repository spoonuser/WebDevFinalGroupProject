{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SimpleJobRegistry = void 0;\nconst core_1 = require(\"@angular-devkit/core\");\nconst rxjs_1 = require(\"rxjs\");\nconst api_1 = require(\"./api\");\nconst exception_1 = require(\"./exception\");\n/**\n * A simple job registry that keep a map of JobName => JobHandler internally.\n */\nclass SimpleJobRegistry {\n  constructor() {\n    this._jobNames = new Map();\n  }\n  get(name) {\n    return (0, rxjs_1.of)(this._jobNames.get(name) || null);\n  }\n  register(nameOrHandler, handlerOrOptions = {}, options = {}) {\n    // Switch on the arguments.\n    if (typeof nameOrHandler == 'string') {\n      if (!(0, api_1.isJobHandler)(handlerOrOptions)) {\n        // This is an error.\n        throw new TypeError('Expected a JobHandler as second argument.');\n      }\n      this._register(nameOrHandler, handlerOrOptions, options);\n    } else if ((0, api_1.isJobHandler)(nameOrHandler)) {\n      if (typeof handlerOrOptions !== 'object') {\n        // This is an error.\n        throw new TypeError('Expected an object options as second argument.');\n      }\n      const name = options.name || nameOrHandler.jobDescription.name || handlerOrOptions.name;\n      if (name === undefined) {\n        throw new TypeError('Expected name to be a string.');\n      }\n      this._register(name, nameOrHandler, options);\n    } else {\n      throw new TypeError('Unrecognized arguments.');\n    }\n  }\n  _register(name, handler, options) {\n    if (this._jobNames.has(name)) {\n      // We shouldn't allow conflicts.\n      throw new exception_1.JobNameAlreadyRegisteredException(name);\n    }\n    // Merge all fields with the ones in the handler (to make sure we respect the handler).\n    const argument = core_1.schema.mergeSchemas(handler.jobDescription.argument, options.argument);\n    const input = core_1.schema.mergeSchemas(handler.jobDescription.input, options.input);\n    const output = core_1.schema.mergeSchemas(handler.jobDescription.output, options.output);\n    // Create the job description.\n    const jobDescription = {\n      name,\n      argument,\n      output,\n      input\n    };\n    const jobHandler = Object.assign(handler.bind(undefined), {\n      jobDescription\n    });\n    this._jobNames.set(name, jobHandler);\n  }\n  /**\n   * Returns the job names of all jobs.\n   */\n  getJobNames() {\n    return [...this._jobNames.keys()];\n  }\n}\nexports.SimpleJobRegistry = SimpleJobRegistry;","map":{"version":3,"names":["Object","defineProperty","exports","value","SimpleJobRegistry","core_1","require","rxjs_1","api_1","exception_1","constructor","_jobNames","Map","get","name","of","register","nameOrHandler","handlerOrOptions","options","isJobHandler","TypeError","_register","jobDescription","undefined","handler","has","JobNameAlreadyRegisteredException","argument","schema","mergeSchemas","input","output","jobHandler","assign","bind","set","getJobNames","keys"],"sources":["/Users/sabyrzhanolzhabay/Web-Dev/Arabakz/ArabaFrontend/node_modules/@angular/cli/node_modules/@angular-devkit/architect/src/jobs/simple-registry.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SimpleJobRegistry = void 0;\nconst core_1 = require(\"@angular-devkit/core\");\nconst rxjs_1 = require(\"rxjs\");\nconst api_1 = require(\"./api\");\nconst exception_1 = require(\"./exception\");\n/**\n * A simple job registry that keep a map of JobName => JobHandler internally.\n */\nclass SimpleJobRegistry {\n    constructor() {\n        this._jobNames = new Map();\n    }\n    get(name) {\n        return (0, rxjs_1.of)(this._jobNames.get(name) || null);\n    }\n    register(nameOrHandler, handlerOrOptions = {}, options = {}) {\n        // Switch on the arguments.\n        if (typeof nameOrHandler == 'string') {\n            if (!(0, api_1.isJobHandler)(handlerOrOptions)) {\n                // This is an error.\n                throw new TypeError('Expected a JobHandler as second argument.');\n            }\n            this._register(nameOrHandler, handlerOrOptions, options);\n        }\n        else if ((0, api_1.isJobHandler)(nameOrHandler)) {\n            if (typeof handlerOrOptions !== 'object') {\n                // This is an error.\n                throw new TypeError('Expected an object options as second argument.');\n            }\n            const name = options.name || nameOrHandler.jobDescription.name || handlerOrOptions.name;\n            if (name === undefined) {\n                throw new TypeError('Expected name to be a string.');\n            }\n            this._register(name, nameOrHandler, options);\n        }\n        else {\n            throw new TypeError('Unrecognized arguments.');\n        }\n    }\n    _register(name, handler, options) {\n        if (this._jobNames.has(name)) {\n            // We shouldn't allow conflicts.\n            throw new exception_1.JobNameAlreadyRegisteredException(name);\n        }\n        // Merge all fields with the ones in the handler (to make sure we respect the handler).\n        const argument = core_1.schema.mergeSchemas(handler.jobDescription.argument, options.argument);\n        const input = core_1.schema.mergeSchemas(handler.jobDescription.input, options.input);\n        const output = core_1.schema.mergeSchemas(handler.jobDescription.output, options.output);\n        // Create the job description.\n        const jobDescription = {\n            name,\n            argument,\n            output,\n            input,\n        };\n        const jobHandler = Object.assign(handler.bind(undefined), {\n            jobDescription,\n        });\n        this._jobNames.set(name, jobHandler);\n    }\n    /**\n     * Returns the job names of all jobs.\n     */\n    getJobNames() {\n        return [...this._jobNames.keys()];\n    }\n}\nexports.SimpleJobRegistry = SimpleJobRegistry;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}