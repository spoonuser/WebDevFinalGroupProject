{"ast":null,"code":"'use strict';\n\n/**\n * `password` type prompt\n */\nconst chalk = require('chalk');\nconst {\n  map,\n  takeUntil\n} = require('rxjs/operators');\nconst Base = require('./base');\nconst observe = require('../utils/events');\nfunction mask(input, maskChar) {\n  input = String(input);\n  maskChar = typeof maskChar === 'string' ? maskChar : '*';\n  if (input.length === 0) {\n    return '';\n  }\n  return new Array(input.length + 1).join(maskChar);\n}\nclass PasswordPrompt extends Base {\n  /**\n   * Start the Inquiry session\n   * @param  {Function} cb      Callback when prompt is done\n   * @return {this}\n   */\n\n  _run(cb) {\n    this.done = cb;\n    const events = observe(this.rl);\n\n    // Once user confirm (enter key)\n    const submit = events.line.pipe(map(this.filterInput.bind(this)));\n    const validation = this.handleSubmitEvents(submit);\n    validation.success.forEach(this.onEnd.bind(this));\n    validation.error.forEach(this.onError.bind(this));\n    events.keypress.pipe(takeUntil(validation.success)).forEach(this.onKeypress.bind(this));\n\n    // Init\n    this.render();\n    return this;\n  }\n\n  /**\n   * Render the prompt to screen\n   * @return {PasswordPrompt} self\n   */\n\n  render(error) {\n    let message = this.getQuestion();\n    let bottomContent = '';\n    if (this.status === 'answered') {\n      message += this.getMaskedValue(this.answer);\n    } else {\n      message += this.getMaskedValue(this.rl.line || '');\n    }\n    if (error) {\n      bottomContent = '\\n' + chalk.red('>> ') + error;\n    }\n    this.screen.render(message, bottomContent);\n  }\n  getMaskedValue(value) {\n    if (this.status === 'answered') {\n      return this.opt.mask ? chalk.cyan(mask(value, this.opt.mask)) : chalk.italic.dim('[hidden]');\n    }\n    return this.opt.mask ? mask(value, this.opt.mask) : chalk.italic.dim('[input is hidden] ');\n  }\n\n  /**\n   * Mask value during async filter/validation.\n   */\n  getSpinningValue(value) {\n    return this.getMaskedValue(value);\n  }\n\n  /**\n   * When user press `enter` key\n   */\n\n  filterInput(input) {\n    if (!input) {\n      return this.opt.default == null ? '' : this.opt.default;\n    }\n    return input;\n  }\n  onEnd(state) {\n    this.status = 'answered';\n    this.answer = state.value;\n\n    // Re-render prompt\n    this.render();\n    this.screen.done();\n    this.done(state.value);\n  }\n  onError(state) {\n    this.render(state.isValid);\n  }\n  onKeypress() {\n    // If user press a key, just clear the default value\n    if (this.opt.default) {\n      this.opt.default = undefined;\n    }\n    this.render();\n  }\n}\nmodule.exports = PasswordPrompt;","map":{"version":3,"names":["chalk","require","map","takeUntil","Base","observe","mask","input","maskChar","String","length","Array","join","PasswordPrompt","_run","cb","done","events","rl","submit","line","pipe","filterInput","bind","validation","handleSubmitEvents","success","forEach","onEnd","error","onError","keypress","onKeypress","render","message","getQuestion","bottomContent","status","getMaskedValue","answer","red","screen","value","opt","cyan","italic","dim","getSpinningValue","default","state","isValid","undefined","module","exports"],"sources":["/Users/sabyrzhanolzhabay/Web-Dev/Arabakz/ArabaFrontend/node_modules/inquirer/lib/prompts/password.js"],"sourcesContent":["'use strict';\n/**\n * `password` type prompt\n */\n\nconst chalk = require('chalk');\nconst { map, takeUntil } = require('rxjs/operators');\nconst Base = require('./base');\nconst observe = require('../utils/events');\n\nfunction mask(input, maskChar) {\n  input = String(input);\n  maskChar = typeof maskChar === 'string' ? maskChar : '*';\n  if (input.length === 0) {\n    return '';\n  }\n\n  return new Array(input.length + 1).join(maskChar);\n}\n\nclass PasswordPrompt extends Base {\n  /**\n   * Start the Inquiry session\n   * @param  {Function} cb      Callback when prompt is done\n   * @return {this}\n   */\n\n  _run(cb) {\n    this.done = cb;\n\n    const events = observe(this.rl);\n\n    // Once user confirm (enter key)\n    const submit = events.line.pipe(map(this.filterInput.bind(this)));\n\n    const validation = this.handleSubmitEvents(submit);\n    validation.success.forEach(this.onEnd.bind(this));\n    validation.error.forEach(this.onError.bind(this));\n\n    events.keypress\n      .pipe(takeUntil(validation.success))\n      .forEach(this.onKeypress.bind(this));\n\n    // Init\n    this.render();\n\n    return this;\n  }\n\n  /**\n   * Render the prompt to screen\n   * @return {PasswordPrompt} self\n   */\n\n  render(error) {\n    let message = this.getQuestion();\n    let bottomContent = '';\n\n    if (this.status === 'answered') {\n      message += this.getMaskedValue(this.answer);\n    } else {\n      message += this.getMaskedValue(this.rl.line || '');\n    }\n\n    if (error) {\n      bottomContent = '\\n' + chalk.red('>> ') + error;\n    }\n\n    this.screen.render(message, bottomContent);\n  }\n\n  getMaskedValue(value) {\n    if (this.status === 'answered') {\n      return this.opt.mask\n        ? chalk.cyan(mask(value, this.opt.mask))\n        : chalk.italic.dim('[hidden]');\n    }\n    return this.opt.mask\n      ? mask(value, this.opt.mask)\n      : chalk.italic.dim('[input is hidden] ');\n  }\n\n  /**\n   * Mask value during async filter/validation.\n   */\n  getSpinningValue(value) {\n    return this.getMaskedValue(value);\n  }\n\n  /**\n   * When user press `enter` key\n   */\n\n  filterInput(input) {\n    if (!input) {\n      return this.opt.default == null ? '' : this.opt.default;\n    }\n\n    return input;\n  }\n\n  onEnd(state) {\n    this.status = 'answered';\n    this.answer = state.value;\n\n    // Re-render prompt\n    this.render();\n\n    this.screen.done();\n    this.done(state.value);\n  }\n\n  onError(state) {\n    this.render(state.isValid);\n  }\n\n  onKeypress() {\n    // If user press a key, just clear the default value\n    if (this.opt.default) {\n      this.opt.default = undefined;\n    }\n\n    this.render();\n  }\n}\n\nmodule.exports = PasswordPrompt;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}