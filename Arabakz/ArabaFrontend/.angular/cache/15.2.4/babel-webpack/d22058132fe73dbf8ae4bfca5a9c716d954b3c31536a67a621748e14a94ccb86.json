{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.extendSubschemaMode = exports.extendSubschemaData = exports.getSubschema = void 0;\nconst codegen_1 = require(\"../codegen\");\nconst util_1 = require(\"../util\");\nfunction getSubschema(it, {\n  keyword,\n  schemaProp,\n  schema,\n  schemaPath,\n  errSchemaPath,\n  topSchemaRef\n}) {\n  if (keyword !== undefined && schema !== undefined) {\n    throw new Error('both \"keyword\" and \"schema\" passed, only one allowed');\n  }\n  if (keyword !== undefined) {\n    const sch = it.schema[keyword];\n    return schemaProp === undefined ? {\n      schema: sch,\n      schemaPath: (0, codegen_1._)`${it.schemaPath}${(0, codegen_1.getProperty)(keyword)}`,\n      errSchemaPath: `${it.errSchemaPath}/${keyword}`\n    } : {\n      schema: sch[schemaProp],\n      schemaPath: (0, codegen_1._)`${it.schemaPath}${(0, codegen_1.getProperty)(keyword)}${(0, codegen_1.getProperty)(schemaProp)}`,\n      errSchemaPath: `${it.errSchemaPath}/${keyword}/${(0, util_1.escapeFragment)(schemaProp)}`\n    };\n  }\n  if (schema !== undefined) {\n    if (schemaPath === undefined || errSchemaPath === undefined || topSchemaRef === undefined) {\n      throw new Error('\"schemaPath\", \"errSchemaPath\" and \"topSchemaRef\" are required with \"schema\"');\n    }\n    return {\n      schema,\n      schemaPath,\n      topSchemaRef,\n      errSchemaPath\n    };\n  }\n  throw new Error('either \"keyword\" or \"schema\" must be passed');\n}\nexports.getSubschema = getSubschema;\nfunction extendSubschemaData(subschema, it, {\n  dataProp,\n  dataPropType: dpType,\n  data,\n  dataTypes,\n  propertyName\n}) {\n  if (data !== undefined && dataProp !== undefined) {\n    throw new Error('both \"data\" and \"dataProp\" passed, only one allowed');\n  }\n  const {\n    gen\n  } = it;\n  if (dataProp !== undefined) {\n    const {\n      errorPath,\n      dataPathArr,\n      opts\n    } = it;\n    const nextData = gen.let(\"data\", (0, codegen_1._)`${it.data}${(0, codegen_1.getProperty)(dataProp)}`, true);\n    dataContextProps(nextData);\n    subschema.errorPath = (0, codegen_1.str)`${errorPath}${(0, util_1.getErrorPath)(dataProp, dpType, opts.jsPropertySyntax)}`;\n    subschema.parentDataProperty = (0, codegen_1._)`${dataProp}`;\n    subschema.dataPathArr = [...dataPathArr, subschema.parentDataProperty];\n  }\n  if (data !== undefined) {\n    const nextData = data instanceof codegen_1.Name ? data : gen.let(\"data\", data, true); // replaceable if used once?\n    dataContextProps(nextData);\n    if (propertyName !== undefined) subschema.propertyName = propertyName;\n    // TODO something is possibly wrong here with not changing parentDataProperty and not appending dataPathArr\n  }\n\n  if (dataTypes) subschema.dataTypes = dataTypes;\n  function dataContextProps(_nextData) {\n    subschema.data = _nextData;\n    subschema.dataLevel = it.dataLevel + 1;\n    subschema.dataTypes = [];\n    it.definedProperties = new Set();\n    subschema.parentData = it.data;\n    subschema.dataNames = [...it.dataNames, _nextData];\n  }\n}\nexports.extendSubschemaData = extendSubschemaData;\nfunction extendSubschemaMode(subschema, {\n  jtdDiscriminator,\n  jtdMetadata,\n  compositeRule,\n  createErrors,\n  allErrors\n}) {\n  if (compositeRule !== undefined) subschema.compositeRule = compositeRule;\n  if (createErrors !== undefined) subschema.createErrors = createErrors;\n  if (allErrors !== undefined) subschema.allErrors = allErrors;\n  subschema.jtdDiscriminator = jtdDiscriminator; // not inherited\n  subschema.jtdMetadata = jtdMetadata; // not inherited\n}\n\nexports.extendSubschemaMode = extendSubschemaMode;","map":{"version":3,"names":["Object","defineProperty","exports","value","extendSubschemaMode","extendSubschemaData","getSubschema","codegen_1","require","util_1","it","keyword","schemaProp","schema","schemaPath","errSchemaPath","topSchemaRef","undefined","Error","sch","_","getProperty","escapeFragment","subschema","dataProp","dataPropType","dpType","data","dataTypes","propertyName","gen","errorPath","dataPathArr","opts","nextData","let","dataContextProps","str","getErrorPath","jsPropertySyntax","parentDataProperty","Name","_nextData","dataLevel","definedProperties","Set","parentData","dataNames","jtdDiscriminator","jtdMetadata","compositeRule","createErrors","allErrors"],"sources":["/Users/sabyrzhanolzhabay/Web-Dev/Arabakz/ArabaFrontend/node_modules/ajv/dist/compile/validate/subschema.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.extendSubschemaMode = exports.extendSubschemaData = exports.getSubschema = void 0;\nconst codegen_1 = require(\"../codegen\");\nconst util_1 = require(\"../util\");\nfunction getSubschema(it, { keyword, schemaProp, schema, schemaPath, errSchemaPath, topSchemaRef }) {\n    if (keyword !== undefined && schema !== undefined) {\n        throw new Error('both \"keyword\" and \"schema\" passed, only one allowed');\n    }\n    if (keyword !== undefined) {\n        const sch = it.schema[keyword];\n        return schemaProp === undefined\n            ? {\n                schema: sch,\n                schemaPath: (0, codegen_1._) `${it.schemaPath}${(0, codegen_1.getProperty)(keyword)}`,\n                errSchemaPath: `${it.errSchemaPath}/${keyword}`,\n            }\n            : {\n                schema: sch[schemaProp],\n                schemaPath: (0, codegen_1._) `${it.schemaPath}${(0, codegen_1.getProperty)(keyword)}${(0, codegen_1.getProperty)(schemaProp)}`,\n                errSchemaPath: `${it.errSchemaPath}/${keyword}/${(0, util_1.escapeFragment)(schemaProp)}`,\n            };\n    }\n    if (schema !== undefined) {\n        if (schemaPath === undefined || errSchemaPath === undefined || topSchemaRef === undefined) {\n            throw new Error('\"schemaPath\", \"errSchemaPath\" and \"topSchemaRef\" are required with \"schema\"');\n        }\n        return {\n            schema,\n            schemaPath,\n            topSchemaRef,\n            errSchemaPath,\n        };\n    }\n    throw new Error('either \"keyword\" or \"schema\" must be passed');\n}\nexports.getSubschema = getSubschema;\nfunction extendSubschemaData(subschema, it, { dataProp, dataPropType: dpType, data, dataTypes, propertyName }) {\n    if (data !== undefined && dataProp !== undefined) {\n        throw new Error('both \"data\" and \"dataProp\" passed, only one allowed');\n    }\n    const { gen } = it;\n    if (dataProp !== undefined) {\n        const { errorPath, dataPathArr, opts } = it;\n        const nextData = gen.let(\"data\", (0, codegen_1._) `${it.data}${(0, codegen_1.getProperty)(dataProp)}`, true);\n        dataContextProps(nextData);\n        subschema.errorPath = (0, codegen_1.str) `${errorPath}${(0, util_1.getErrorPath)(dataProp, dpType, opts.jsPropertySyntax)}`;\n        subschema.parentDataProperty = (0, codegen_1._) `${dataProp}`;\n        subschema.dataPathArr = [...dataPathArr, subschema.parentDataProperty];\n    }\n    if (data !== undefined) {\n        const nextData = data instanceof codegen_1.Name ? data : gen.let(\"data\", data, true); // replaceable if used once?\n        dataContextProps(nextData);\n        if (propertyName !== undefined)\n            subschema.propertyName = propertyName;\n        // TODO something is possibly wrong here with not changing parentDataProperty and not appending dataPathArr\n    }\n    if (dataTypes)\n        subschema.dataTypes = dataTypes;\n    function dataContextProps(_nextData) {\n        subschema.data = _nextData;\n        subschema.dataLevel = it.dataLevel + 1;\n        subschema.dataTypes = [];\n        it.definedProperties = new Set();\n        subschema.parentData = it.data;\n        subschema.dataNames = [...it.dataNames, _nextData];\n    }\n}\nexports.extendSubschemaData = extendSubschemaData;\nfunction extendSubschemaMode(subschema, { jtdDiscriminator, jtdMetadata, compositeRule, createErrors, allErrors }) {\n    if (compositeRule !== undefined)\n        subschema.compositeRule = compositeRule;\n    if (createErrors !== undefined)\n        subschema.createErrors = createErrors;\n    if (allErrors !== undefined)\n        subschema.allErrors = allErrors;\n    subschema.jtdDiscriminator = jtdDiscriminator; // not inherited\n    subschema.jtdMetadata = jtdMetadata; // not inherited\n}\nexports.extendSubschemaMode = extendSubschemaMode;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}