{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _asyncToGenerator = require(\"/Users/sabyrzhanolzhabay/Web-Dev/Arabakz/ArabaFrontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Architect = void 0;\nconst core_1 = require(\"@angular-devkit/core\");\nconst rxjs_1 = require(\"rxjs\");\nconst operators_1 = require(\"rxjs/operators\");\nconst api_1 = require(\"./api\");\nconst jobs_1 = require(\"./jobs\");\nconst schedule_by_name_1 = require(\"./schedule-by-name\");\nconst inputSchema = require('./input-schema.json');\nconst outputSchema = require('./output-schema.json');\nfunction _createJobHandlerFromBuilderInfo(info, target, host, registry, baseOptions) {\n  const jobDescription = {\n    name: target ? `{${(0, api_1.targetStringFromTarget)(target)}}` : info.builderName,\n    argument: {\n      type: 'object'\n    },\n    input: inputSchema,\n    output: outputSchema,\n    info\n  };\n  function handler(argument, context) {\n    // Add input validation to the inbound bus.\n    const inboundBusWithInputValidation = context.inboundBus.pipe((0, operators_1.concatMap)(message => {\n      if (message.kind === jobs_1.JobInboundMessageKind.Input) {\n        const v = message.value;\n        const options = {\n          ...baseOptions,\n          ...v.options\n        };\n        // Validate v against the options schema.\n        return registry.compile(info.optionSchema).pipe((0, operators_1.concatMap)(validation => validation(options)), (0, operators_1.map)(validationResult => {\n          const {\n            data,\n            success,\n            errors\n          } = validationResult;\n          if (success) {\n            return {\n              ...v,\n              options: data\n            };\n          }\n          throw new core_1.json.schema.SchemaValidationException(errors);\n        }), (0, operators_1.map)(value => ({\n          ...message,\n          value\n        })));\n      } else {\n        return (0, rxjs_1.of)(message);\n      }\n    }),\n    // Using a share replay because the job might be synchronously sending input, but\n    // asynchronously listening to it.\n    (0, operators_1.shareReplay)(1));\n    // Make an inboundBus that completes instead of erroring out.\n    // We'll merge the errors into the output instead.\n    const inboundBus = (0, rxjs_1.onErrorResumeNext)(inboundBusWithInputValidation);\n    const output = (0, rxjs_1.from)(host.loadBuilder(info)).pipe((0, operators_1.concatMap)(builder => {\n      if (builder === null) {\n        throw new Error(`Cannot load builder for builderInfo ${JSON.stringify(info, null, 2)}`);\n      }\n      return builder.handler(argument, {\n        ...context,\n        inboundBus\n      }).pipe((0, operators_1.map)(output => {\n        if (output.kind === jobs_1.JobOutboundMessageKind.Output) {\n          // Add target to it.\n          return {\n            ...output,\n            value: {\n              ...output.value,\n              ...(target ? {\n                target\n              } : 0)\n            }\n          };\n        } else {\n          return output;\n        }\n      }));\n    }),\n    // Share subscriptions to the output, otherwise the the handler will be re-run.\n    (0, operators_1.shareReplay)());\n    // Separate the errors from the inbound bus into their own observable that completes when the\n    // builder output does.\n    const inboundBusErrors = inboundBusWithInputValidation.pipe((0, operators_1.ignoreElements)(), (0, operators_1.takeUntil)((0, rxjs_1.onErrorResumeNext)(output.pipe((0, operators_1.last)()))));\n    // Return the builder output plus any input errors.\n    return (0, rxjs_1.merge)(inboundBusErrors, output);\n  }\n  return (0, rxjs_1.of)(Object.assign(handler, {\n    jobDescription\n  }));\n}\n/**\n * A JobRegistry that resolves builder targets from the host.\n */\nclass ArchitectBuilderJobRegistry {\n  constructor(_host, _registry, _jobCache, _infoCache) {\n    this._host = _host;\n    this._registry = _registry;\n    this._jobCache = _jobCache;\n    this._infoCache = _infoCache;\n  }\n  _resolveBuilder(name) {\n    const cache = this._infoCache;\n    if (cache) {\n      const maybeCache = cache.get(name);\n      if (maybeCache !== undefined) {\n        return maybeCache;\n      }\n      const info = (0, rxjs_1.from)(this._host.resolveBuilder(name)).pipe((0, operators_1.shareReplay)(1));\n      cache.set(name, info);\n      return info;\n    }\n    return (0, rxjs_1.from)(this._host.resolveBuilder(name));\n  }\n  _createBuilder(info, target, options) {\n    const cache = this._jobCache;\n    if (target) {\n      const maybeHit = cache && cache.get((0, api_1.targetStringFromTarget)(target));\n      if (maybeHit) {\n        return maybeHit;\n      }\n    } else {\n      const maybeHit = cache && cache.get(info.builderName);\n      if (maybeHit) {\n        return maybeHit;\n      }\n    }\n    const result = _createJobHandlerFromBuilderInfo(info, target, this._host, this._registry, options || {});\n    if (cache) {\n      if (target) {\n        cache.set((0, api_1.targetStringFromTarget)(target), result.pipe((0, operators_1.shareReplay)(1)));\n      } else {\n        cache.set(info.builderName, result.pipe((0, operators_1.shareReplay)(1)));\n      }\n    }\n    return result;\n  }\n  get(name) {\n    const m = name.match(/^([^:]+):([^:]+)$/i);\n    if (!m) {\n      return (0, rxjs_1.of)(null);\n    }\n    return (0, rxjs_1.from)(this._resolveBuilder(name)).pipe((0, operators_1.concatMap)(builderInfo => builderInfo ? this._createBuilder(builderInfo) : (0, rxjs_1.of)(null)), (0, operators_1.first)(null, null));\n  }\n}\n/**\n * A JobRegistry that resolves targets from the host.\n */\nclass ArchitectTargetJobRegistry extends ArchitectBuilderJobRegistry {\n  get(name) {\n    const m = name.match(/^{([^:]+):([^:]+)(?::([^:]*))?}$/i);\n    if (!m) {\n      return (0, rxjs_1.of)(null);\n    }\n    const target = {\n      project: m[1],\n      target: m[2],\n      configuration: m[3]\n    };\n    return (0, rxjs_1.from)(Promise.all([this._host.getBuilderNameForTarget(target), this._host.getOptionsForTarget(target)])).pipe((0, operators_1.concatMap)(([builderStr, options]) => {\n      if (builderStr === null || options === null) {\n        return (0, rxjs_1.of)(null);\n      }\n      return this._resolveBuilder(builderStr).pipe((0, operators_1.concatMap)(builderInfo => {\n        if (builderInfo === null) {\n          return (0, rxjs_1.of)(null);\n        }\n        return this._createBuilder(builderInfo, target, options);\n      }));\n    }), (0, operators_1.first)(null, null));\n  }\n}\nfunction _getTargetOptionsFactory(host) {\n  return (0, jobs_1.createJobHandler)(target => {\n    return host.getOptionsForTarget(target).then(options => {\n      if (options === null) {\n        throw new Error(`Invalid target: ${JSON.stringify(target)}.`);\n      }\n      return options;\n    });\n  }, {\n    name: '..getTargetOptions',\n    output: {\n      type: 'object'\n    },\n    argument: inputSchema.properties.target\n  });\n}\nfunction _getProjectMetadataFactory(host) {\n  return (0, jobs_1.createJobHandler)(target => {\n    return host.getProjectMetadata(target).then(options => {\n      if (options === null) {\n        throw new Error(`Invalid target: ${JSON.stringify(target)}.`);\n      }\n      return options;\n    });\n  }, {\n    name: '..getProjectMetadata',\n    output: {\n      type: 'object'\n    },\n    argument: {\n      oneOf: [{\n        type: 'string'\n      }, inputSchema.properties.target]\n    }\n  });\n}\nfunction _getBuilderNameForTargetFactory(host) {\n  return (0, jobs_1.createJobHandler)( /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* (target) {\n      const builderName = yield host.getBuilderNameForTarget(target);\n      if (!builderName) {\n        throw new Error(`No builder were found for target ${(0, api_1.targetStringFromTarget)(target)}.`);\n      }\n      return builderName;\n    });\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }(), {\n    name: '..getBuilderNameForTarget',\n    output: {\n      type: 'string'\n    },\n    argument: inputSchema.properties.target\n  });\n}\nfunction _validateOptionsFactory(host, registry) {\n  return (0, jobs_1.createJobHandler)( /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator(function* ([builderName, options]) {\n      // Get option schema from the host.\n      const builderInfo = yield host.resolveBuilder(builderName);\n      if (!builderInfo) {\n        throw new Error(`No builder info were found for builder ${JSON.stringify(builderName)}.`);\n      }\n      return registry.compile(builderInfo.optionSchema).pipe((0, operators_1.concatMap)(validation => validation(options)), (0, operators_1.switchMap)(({\n        data,\n        success,\n        errors\n      }) => {\n        if (success) {\n          return (0, rxjs_1.of)(data);\n        }\n        throw new core_1.json.schema.SchemaValidationException(errors);\n      })).toPromise();\n    });\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }(), {\n    name: '..validateOptions',\n    output: {\n      type: 'object'\n    },\n    argument: {\n      type: 'array',\n      items: [{\n        type: 'string'\n      }, {\n        type: 'object'\n      }]\n    }\n  });\n}\nclass Architect {\n  constructor(_host, registry = new core_1.json.schema.CoreSchemaRegistry(), additionalJobRegistry) {\n    this._host = _host;\n    this._jobCache = new Map();\n    this._infoCache = new Map();\n    const privateArchitectJobRegistry = new jobs_1.SimpleJobRegistry();\n    // Create private jobs.\n    privateArchitectJobRegistry.register(_getTargetOptionsFactory(_host));\n    privateArchitectJobRegistry.register(_getBuilderNameForTargetFactory(_host));\n    privateArchitectJobRegistry.register(_validateOptionsFactory(_host, registry));\n    privateArchitectJobRegistry.register(_getProjectMetadataFactory(_host));\n    const jobRegistry = new jobs_1.FallbackRegistry([new ArchitectTargetJobRegistry(_host, registry, this._jobCache, this._infoCache), new ArchitectBuilderJobRegistry(_host, registry, this._jobCache, this._infoCache), privateArchitectJobRegistry, ...(additionalJobRegistry ? [additionalJobRegistry] : [])]);\n    this._scheduler = new jobs_1.SimpleScheduler(jobRegistry, registry);\n  }\n  has(name) {\n    return this._scheduler.has(name);\n  }\n  scheduleBuilder(name, options, scheduleOptions = {}) {\n    // The below will match 'project:target:configuration'\n    if (!/^[^:]+:[^:]+(:[^:]+)?$/.test(name)) {\n      throw new Error('Invalid builder name: ' + JSON.stringify(name));\n    }\n    return (0, schedule_by_name_1.scheduleByName)(name, options, {\n      scheduler: this._scheduler,\n      logger: scheduleOptions.logger || new core_1.logging.NullLogger(),\n      currentDirectory: this._host.getCurrentDirectory(),\n      workspaceRoot: this._host.getWorkspaceRoot()\n    });\n  }\n  scheduleTarget(target, overrides = {}, scheduleOptions = {}) {\n    return (0, schedule_by_name_1.scheduleByTarget)(target, overrides, {\n      scheduler: this._scheduler,\n      logger: scheduleOptions.logger || new core_1.logging.NullLogger(),\n      currentDirectory: this._host.getCurrentDirectory(),\n      workspaceRoot: this._host.getWorkspaceRoot()\n    });\n  }\n}\nexports.Architect = Architect;","map":{"version":3,"names":["Object","defineProperty","exports","value","Architect","core_1","require","rxjs_1","operators_1","api_1","jobs_1","schedule_by_name_1","inputSchema","outputSchema","_createJobHandlerFromBuilderInfo","info","target","host","registry","baseOptions","jobDescription","name","targetStringFromTarget","builderName","argument","type","input","output","handler","context","inboundBusWithInputValidation","inboundBus","pipe","concatMap","message","kind","JobInboundMessageKind","Input","v","options","compile","optionSchema","validation","map","validationResult","data","success","errors","json","schema","SchemaValidationException","of","shareReplay","onErrorResumeNext","from","loadBuilder","builder","Error","JSON","stringify","JobOutboundMessageKind","Output","inboundBusErrors","ignoreElements","takeUntil","last","merge","assign","ArchitectBuilderJobRegistry","constructor","_host","_registry","_jobCache","_infoCache","_resolveBuilder","cache","maybeCache","get","undefined","resolveBuilder","set","_createBuilder","maybeHit","result","m","match","builderInfo","first","ArchitectTargetJobRegistry","project","configuration","Promise","all","getBuilderNameForTarget","getOptionsForTarget","builderStr","_getTargetOptionsFactory","createJobHandler","then","properties","_getProjectMetadataFactory","getProjectMetadata","oneOf","_getBuilderNameForTargetFactory","_validateOptionsFactory","switchMap","toPromise","items","CoreSchemaRegistry","additionalJobRegistry","Map","privateArchitectJobRegistry","SimpleJobRegistry","register","jobRegistry","FallbackRegistry","_scheduler","SimpleScheduler","has","scheduleBuilder","scheduleOptions","test","scheduleByName","scheduler","logger","logging","NullLogger","currentDirectory","getCurrentDirectory","workspaceRoot","getWorkspaceRoot","scheduleTarget","overrides","scheduleByTarget"],"sources":["/Users/sabyrzhanolzhabay/Web-Dev/Arabakz/ArabaFrontend/node_modules/@angular/cli/node_modules/@angular-devkit/architect/src/architect.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Architect = void 0;\nconst core_1 = require(\"@angular-devkit/core\");\nconst rxjs_1 = require(\"rxjs\");\nconst operators_1 = require(\"rxjs/operators\");\nconst api_1 = require(\"./api\");\nconst jobs_1 = require(\"./jobs\");\nconst schedule_by_name_1 = require(\"./schedule-by-name\");\nconst inputSchema = require('./input-schema.json');\nconst outputSchema = require('./output-schema.json');\nfunction _createJobHandlerFromBuilderInfo(info, target, host, registry, baseOptions) {\n    const jobDescription = {\n        name: target ? `{${(0, api_1.targetStringFromTarget)(target)}}` : info.builderName,\n        argument: { type: 'object' },\n        input: inputSchema,\n        output: outputSchema,\n        info,\n    };\n    function handler(argument, context) {\n        // Add input validation to the inbound bus.\n        const inboundBusWithInputValidation = context.inboundBus.pipe((0, operators_1.concatMap)((message) => {\n            if (message.kind === jobs_1.JobInboundMessageKind.Input) {\n                const v = message.value;\n                const options = {\n                    ...baseOptions,\n                    ...v.options,\n                };\n                // Validate v against the options schema.\n                return registry.compile(info.optionSchema).pipe((0, operators_1.concatMap)((validation) => validation(options)), (0, operators_1.map)((validationResult) => {\n                    const { data, success, errors } = validationResult;\n                    if (success) {\n                        return { ...v, options: data };\n                    }\n                    throw new core_1.json.schema.SchemaValidationException(errors);\n                }), (0, operators_1.map)((value) => ({ ...message, value })));\n            }\n            else {\n                return (0, rxjs_1.of)(message);\n            }\n        }), \n        // Using a share replay because the job might be synchronously sending input, but\n        // asynchronously listening to it.\n        (0, operators_1.shareReplay)(1));\n        // Make an inboundBus that completes instead of erroring out.\n        // We'll merge the errors into the output instead.\n        const inboundBus = (0, rxjs_1.onErrorResumeNext)(inboundBusWithInputValidation);\n        const output = (0, rxjs_1.from)(host.loadBuilder(info)).pipe((0, operators_1.concatMap)((builder) => {\n            if (builder === null) {\n                throw new Error(`Cannot load builder for builderInfo ${JSON.stringify(info, null, 2)}`);\n            }\n            return builder.handler(argument, { ...context, inboundBus }).pipe((0, operators_1.map)((output) => {\n                if (output.kind === jobs_1.JobOutboundMessageKind.Output) {\n                    // Add target to it.\n                    return {\n                        ...output,\n                        value: {\n                            ...output.value,\n                            ...(target ? { target } : 0),\n                        },\n                    };\n                }\n                else {\n                    return output;\n                }\n            }));\n        }), \n        // Share subscriptions to the output, otherwise the the handler will be re-run.\n        (0, operators_1.shareReplay)());\n        // Separate the errors from the inbound bus into their own observable that completes when the\n        // builder output does.\n        const inboundBusErrors = inboundBusWithInputValidation.pipe((0, operators_1.ignoreElements)(), (0, operators_1.takeUntil)((0, rxjs_1.onErrorResumeNext)(output.pipe((0, operators_1.last)()))));\n        // Return the builder output plus any input errors.\n        return (0, rxjs_1.merge)(inboundBusErrors, output);\n    }\n    return (0, rxjs_1.of)(Object.assign(handler, { jobDescription }));\n}\n/**\n * A JobRegistry that resolves builder targets from the host.\n */\nclass ArchitectBuilderJobRegistry {\n    constructor(_host, _registry, _jobCache, _infoCache) {\n        this._host = _host;\n        this._registry = _registry;\n        this._jobCache = _jobCache;\n        this._infoCache = _infoCache;\n    }\n    _resolveBuilder(name) {\n        const cache = this._infoCache;\n        if (cache) {\n            const maybeCache = cache.get(name);\n            if (maybeCache !== undefined) {\n                return maybeCache;\n            }\n            const info = (0, rxjs_1.from)(this._host.resolveBuilder(name)).pipe((0, operators_1.shareReplay)(1));\n            cache.set(name, info);\n            return info;\n        }\n        return (0, rxjs_1.from)(this._host.resolveBuilder(name));\n    }\n    _createBuilder(info, target, options) {\n        const cache = this._jobCache;\n        if (target) {\n            const maybeHit = cache && cache.get((0, api_1.targetStringFromTarget)(target));\n            if (maybeHit) {\n                return maybeHit;\n            }\n        }\n        else {\n            const maybeHit = cache && cache.get(info.builderName);\n            if (maybeHit) {\n                return maybeHit;\n            }\n        }\n        const result = _createJobHandlerFromBuilderInfo(info, target, this._host, this._registry, options || {});\n        if (cache) {\n            if (target) {\n                cache.set((0, api_1.targetStringFromTarget)(target), result.pipe((0, operators_1.shareReplay)(1)));\n            }\n            else {\n                cache.set(info.builderName, result.pipe((0, operators_1.shareReplay)(1)));\n            }\n        }\n        return result;\n    }\n    get(name) {\n        const m = name.match(/^([^:]+):([^:]+)$/i);\n        if (!m) {\n            return (0, rxjs_1.of)(null);\n        }\n        return (0, rxjs_1.from)(this._resolveBuilder(name)).pipe((0, operators_1.concatMap)((builderInfo) => (builderInfo ? this._createBuilder(builderInfo) : (0, rxjs_1.of)(null))), (0, operators_1.first)(null, null));\n    }\n}\n/**\n * A JobRegistry that resolves targets from the host.\n */\nclass ArchitectTargetJobRegistry extends ArchitectBuilderJobRegistry {\n    get(name) {\n        const m = name.match(/^{([^:]+):([^:]+)(?::([^:]*))?}$/i);\n        if (!m) {\n            return (0, rxjs_1.of)(null);\n        }\n        const target = {\n            project: m[1],\n            target: m[2],\n            configuration: m[3],\n        };\n        return (0, rxjs_1.from)(Promise.all([\n            this._host.getBuilderNameForTarget(target),\n            this._host.getOptionsForTarget(target),\n        ])).pipe((0, operators_1.concatMap)(([builderStr, options]) => {\n            if (builderStr === null || options === null) {\n                return (0, rxjs_1.of)(null);\n            }\n            return this._resolveBuilder(builderStr).pipe((0, operators_1.concatMap)((builderInfo) => {\n                if (builderInfo === null) {\n                    return (0, rxjs_1.of)(null);\n                }\n                return this._createBuilder(builderInfo, target, options);\n            }));\n        }), (0, operators_1.first)(null, null));\n    }\n}\nfunction _getTargetOptionsFactory(host) {\n    return (0, jobs_1.createJobHandler)((target) => {\n        return host.getOptionsForTarget(target).then((options) => {\n            if (options === null) {\n                throw new Error(`Invalid target: ${JSON.stringify(target)}.`);\n            }\n            return options;\n        });\n    }, {\n        name: '..getTargetOptions',\n        output: { type: 'object' },\n        argument: inputSchema.properties.target,\n    });\n}\nfunction _getProjectMetadataFactory(host) {\n    return (0, jobs_1.createJobHandler)((target) => {\n        return host.getProjectMetadata(target).then((options) => {\n            if (options === null) {\n                throw new Error(`Invalid target: ${JSON.stringify(target)}.`);\n            }\n            return options;\n        });\n    }, {\n        name: '..getProjectMetadata',\n        output: { type: 'object' },\n        argument: {\n            oneOf: [{ type: 'string' }, inputSchema.properties.target],\n        },\n    });\n}\nfunction _getBuilderNameForTargetFactory(host) {\n    return (0, jobs_1.createJobHandler)(async (target) => {\n        const builderName = await host.getBuilderNameForTarget(target);\n        if (!builderName) {\n            throw new Error(`No builder were found for target ${(0, api_1.targetStringFromTarget)(target)}.`);\n        }\n        return builderName;\n    }, {\n        name: '..getBuilderNameForTarget',\n        output: { type: 'string' },\n        argument: inputSchema.properties.target,\n    });\n}\nfunction _validateOptionsFactory(host, registry) {\n    return (0, jobs_1.createJobHandler)(async ([builderName, options]) => {\n        // Get option schema from the host.\n        const builderInfo = await host.resolveBuilder(builderName);\n        if (!builderInfo) {\n            throw new Error(`No builder info were found for builder ${JSON.stringify(builderName)}.`);\n        }\n        return registry\n            .compile(builderInfo.optionSchema)\n            .pipe((0, operators_1.concatMap)((validation) => validation(options)), (0, operators_1.switchMap)(({ data, success, errors }) => {\n            if (success) {\n                return (0, rxjs_1.of)(data);\n            }\n            throw new core_1.json.schema.SchemaValidationException(errors);\n        }))\n            .toPromise();\n    }, {\n        name: '..validateOptions',\n        output: { type: 'object' },\n        argument: {\n            type: 'array',\n            items: [{ type: 'string' }, { type: 'object' }],\n        },\n    });\n}\nclass Architect {\n    constructor(_host, registry = new core_1.json.schema.CoreSchemaRegistry(), additionalJobRegistry) {\n        this._host = _host;\n        this._jobCache = new Map();\n        this._infoCache = new Map();\n        const privateArchitectJobRegistry = new jobs_1.SimpleJobRegistry();\n        // Create private jobs.\n        privateArchitectJobRegistry.register(_getTargetOptionsFactory(_host));\n        privateArchitectJobRegistry.register(_getBuilderNameForTargetFactory(_host));\n        privateArchitectJobRegistry.register(_validateOptionsFactory(_host, registry));\n        privateArchitectJobRegistry.register(_getProjectMetadataFactory(_host));\n        const jobRegistry = new jobs_1.FallbackRegistry([\n            new ArchitectTargetJobRegistry(_host, registry, this._jobCache, this._infoCache),\n            new ArchitectBuilderJobRegistry(_host, registry, this._jobCache, this._infoCache),\n            privateArchitectJobRegistry,\n            ...(additionalJobRegistry ? [additionalJobRegistry] : []),\n        ]);\n        this._scheduler = new jobs_1.SimpleScheduler(jobRegistry, registry);\n    }\n    has(name) {\n        return this._scheduler.has(name);\n    }\n    scheduleBuilder(name, options, scheduleOptions = {}) {\n        // The below will match 'project:target:configuration'\n        if (!/^[^:]+:[^:]+(:[^:]+)?$/.test(name)) {\n            throw new Error('Invalid builder name: ' + JSON.stringify(name));\n        }\n        return (0, schedule_by_name_1.scheduleByName)(name, options, {\n            scheduler: this._scheduler,\n            logger: scheduleOptions.logger || new core_1.logging.NullLogger(),\n            currentDirectory: this._host.getCurrentDirectory(),\n            workspaceRoot: this._host.getWorkspaceRoot(),\n        });\n    }\n    scheduleTarget(target, overrides = {}, scheduleOptions = {}) {\n        return (0, schedule_by_name_1.scheduleByTarget)(target, overrides, {\n            scheduler: this._scheduler,\n            logger: scheduleOptions.logger || new core_1.logging.NullLogger(),\n            currentDirectory: this._host.getCurrentDirectory(),\n            workspaceRoot: this._host.getWorkspaceRoot(),\n        });\n    }\n}\nexports.Architect = Architect;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}