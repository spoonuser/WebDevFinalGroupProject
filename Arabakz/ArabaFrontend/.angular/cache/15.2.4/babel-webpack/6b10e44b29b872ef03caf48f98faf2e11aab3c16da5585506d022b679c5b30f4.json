{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Logger = void 0;\nconst rxjs_1 = require(\"rxjs\");\nclass Logger extends rxjs_1.Observable {\n  get _observable() {\n    return this._obs;\n  }\n  set _observable(v) {\n    if (this._subscription) {\n      this._subscription.unsubscribe();\n    }\n    this._obs = v;\n    if (this.parent) {\n      this._subscription = this.subscribe(value => {\n        if (this.parent) {\n          this.parent._subject.next(value);\n        }\n      }, error => {\n        if (this.parent) {\n          this.parent._subject.error(error);\n        }\n      }, () => {\n        if (this._subscription) {\n          this._subscription.unsubscribe();\n        }\n        this._subscription = null;\n      });\n    }\n  }\n  constructor(name, parent = null) {\n    super();\n    this.name = name;\n    this.parent = parent;\n    this._subject = new rxjs_1.Subject();\n    this._obs = rxjs_1.EMPTY;\n    this._subscription = null;\n    const path = [];\n    let p = parent;\n    while (p) {\n      path.push(p.name);\n      p = p.parent;\n    }\n    this._metadata = {\n      name,\n      path\n    };\n    this._observable = this._subject.asObservable();\n    if (this.parent && this.parent._subject) {\n      // When the parent completes, complete us as well.\n      this.parent._subject.subscribe(undefined, undefined, () => this.complete());\n    }\n  }\n  asApi() {\n    return {\n      createChild: name => this.createChild(name),\n      log: (level, message, metadata) => {\n        return this.log(level, message, metadata);\n      },\n      debug: (message, metadata) => this.debug(message, metadata),\n      info: (message, metadata) => this.info(message, metadata),\n      warn: (message, metadata) => this.warn(message, metadata),\n      error: (message, metadata) => this.error(message, metadata),\n      fatal: (message, metadata) => this.fatal(message, metadata)\n    };\n  }\n  createChild(name) {\n    return new this.constructor(name, this);\n  }\n  complete() {\n    this._subject.complete();\n  }\n  log(level, message, metadata = {}) {\n    const entry = Object.assign({}, metadata, this._metadata, {\n      level,\n      message,\n      timestamp: +Date.now()\n    });\n    this._subject.next(entry);\n  }\n  next(entry) {\n    this._subject.next(entry);\n  }\n  debug(message, metadata = {}) {\n    return this.log('debug', message, metadata);\n  }\n  info(message, metadata = {}) {\n    return this.log('info', message, metadata);\n  }\n  warn(message, metadata = {}) {\n    return this.log('warn', message, metadata);\n  }\n  error(message, metadata = {}) {\n    return this.log('error', message, metadata);\n  }\n  fatal(message, metadata = {}) {\n    return this.log('fatal', message, metadata);\n  }\n  toString() {\n    return `<Logger(${this.name})>`;\n  }\n  lift(operator) {\n    return this._observable.lift(operator);\n  }\n  subscribe(_observerOrNext, _error, _complete) {\n    // eslint-disable-next-line prefer-spread\n    return this._observable.subscribe.apply(this._observable,\n    // eslint-disable-next-line prefer-rest-params\n    arguments);\n  }\n  forEach(next, promiseCtor = Promise) {\n    return this._observable.forEach(next, promiseCtor);\n  }\n}\nexports.Logger = Logger;","map":{"version":3,"names":["Object","defineProperty","exports","value","Logger","rxjs_1","require","Observable","_observable","_obs","v","_subscription","unsubscribe","parent","subscribe","_subject","next","error","constructor","name","Subject","EMPTY","path","p","push","_metadata","asObservable","undefined","complete","asApi","createChild","log","level","message","metadata","debug","info","warn","fatal","entry","assign","timestamp","Date","now","toString","lift","operator","_observerOrNext","_error","_complete","apply","arguments","forEach","promiseCtor","Promise"],"sources":["/Users/sabyrzhanolzhabay/Web-Dev/Arabakz/ArabaFrontend/node_modules/@angular/cli/node_modules/@angular-devkit/core/src/logger/logger.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Logger = void 0;\nconst rxjs_1 = require(\"rxjs\");\nclass Logger extends rxjs_1.Observable {\n    get _observable() {\n        return this._obs;\n    }\n    set _observable(v) {\n        if (this._subscription) {\n            this._subscription.unsubscribe();\n        }\n        this._obs = v;\n        if (this.parent) {\n            this._subscription = this.subscribe((value) => {\n                if (this.parent) {\n                    this.parent._subject.next(value);\n                }\n            }, (error) => {\n                if (this.parent) {\n                    this.parent._subject.error(error);\n                }\n            }, () => {\n                if (this._subscription) {\n                    this._subscription.unsubscribe();\n                }\n                this._subscription = null;\n            });\n        }\n    }\n    constructor(name, parent = null) {\n        super();\n        this.name = name;\n        this.parent = parent;\n        this._subject = new rxjs_1.Subject();\n        this._obs = rxjs_1.EMPTY;\n        this._subscription = null;\n        const path = [];\n        let p = parent;\n        while (p) {\n            path.push(p.name);\n            p = p.parent;\n        }\n        this._metadata = { name, path };\n        this._observable = this._subject.asObservable();\n        if (this.parent && this.parent._subject) {\n            // When the parent completes, complete us as well.\n            this.parent._subject.subscribe(undefined, undefined, () => this.complete());\n        }\n    }\n    asApi() {\n        return {\n            createChild: (name) => this.createChild(name),\n            log: (level, message, metadata) => {\n                return this.log(level, message, metadata);\n            },\n            debug: (message, metadata) => this.debug(message, metadata),\n            info: (message, metadata) => this.info(message, metadata),\n            warn: (message, metadata) => this.warn(message, metadata),\n            error: (message, metadata) => this.error(message, metadata),\n            fatal: (message, metadata) => this.fatal(message, metadata),\n        };\n    }\n    createChild(name) {\n        return new this.constructor(name, this);\n    }\n    complete() {\n        this._subject.complete();\n    }\n    log(level, message, metadata = {}) {\n        const entry = Object.assign({}, metadata, this._metadata, {\n            level,\n            message,\n            timestamp: +Date.now(),\n        });\n        this._subject.next(entry);\n    }\n    next(entry) {\n        this._subject.next(entry);\n    }\n    debug(message, metadata = {}) {\n        return this.log('debug', message, metadata);\n    }\n    info(message, metadata = {}) {\n        return this.log('info', message, metadata);\n    }\n    warn(message, metadata = {}) {\n        return this.log('warn', message, metadata);\n    }\n    error(message, metadata = {}) {\n        return this.log('error', message, metadata);\n    }\n    fatal(message, metadata = {}) {\n        return this.log('fatal', message, metadata);\n    }\n    toString() {\n        return `<Logger(${this.name})>`;\n    }\n    lift(operator) {\n        return this._observable.lift(operator);\n    }\n    subscribe(_observerOrNext, _error, _complete) {\n        // eslint-disable-next-line prefer-spread\n        return this._observable.subscribe.apply(this._observable, \n        // eslint-disable-next-line prefer-rest-params\n        arguments);\n    }\n    forEach(next, promiseCtor = Promise) {\n        return this._observable.forEach(next, promiseCtor);\n    }\n}\nexports.Logger = Logger;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}