{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fileBufferToString = exports.fileBuffer = exports.stringToFileBuffer = void 0;\nfunction stringToFileBuffer(str) {\n  // If we're in Node...\n  if (typeof Buffer !== 'undefined' && typeof Buffer.from === 'function') {\n    const buf = Buffer.from(str);\n    const ab = new ArrayBuffer(buf.length);\n    const view = new Uint8Array(ab);\n    for (let i = 0; i < buf.length; ++i) {\n      view[i] = buf[i];\n    }\n    return ab;\n  } else if (typeof TextEncoder !== 'undefined') {\n    // Modern browsers implement TextEncode.\n    return new TextEncoder('utf-8').encode(str).buffer;\n  } else {\n    // Slowest method but sure to be compatible with every platform.\n    const buf = new ArrayBuffer(str.length * 2); // 2 bytes for each char\n    const bufView = new Uint16Array(buf);\n    for (let i = 0, strLen = str.length; i < strLen; i++) {\n      bufView[i] = str.charCodeAt(i);\n    }\n    return buf;\n  }\n}\nexports.stringToFileBuffer = stringToFileBuffer;\nconst fileBuffer = (strings, ...values) => {\n  return stringToFileBuffer(String.raw(strings, ...values));\n};\nexports.fileBuffer = fileBuffer;\nfunction fileBufferToString(fileBuffer) {\n  if (fileBuffer.toString.length == 1) {\n    return fileBuffer.toString('utf-8');\n  } else if (typeof Buffer !== 'undefined') {\n    return Buffer.from(fileBuffer).toString('utf-8');\n  } else if (typeof TextDecoder !== 'undefined') {\n    // Modern browsers implement TextEncode.\n    return new TextDecoder('utf-8').decode(new Uint8Array(fileBuffer));\n  } else {\n    // Slowest method but sure to be compatible with every platform.\n    const bufView = new Uint8Array(fileBuffer);\n    const bufLength = bufView.length;\n    let result = '';\n    let chunkLength = Math.pow(2, 16) - 1;\n    // We have to chunk it because String.fromCharCode.apply will throw\n    // `Maximum call stack size exceeded` on big inputs.\n    for (let i = 0; i < bufLength; i += chunkLength) {\n      if (i + chunkLength > bufLength) {\n        chunkLength = bufLength - i;\n      }\n      result += String.fromCharCode.apply(null, [...bufView.subarray(i, i + chunkLength)]);\n    }\n    return result;\n  }\n}\nexports.fileBufferToString = fileBufferToString;","map":{"version":3,"names":["Object","defineProperty","exports","value","fileBufferToString","fileBuffer","stringToFileBuffer","str","Buffer","from","buf","ab","ArrayBuffer","length","view","Uint8Array","i","TextEncoder","encode","buffer","bufView","Uint16Array","strLen","charCodeAt","strings","values","String","raw","toString","TextDecoder","decode","bufLength","result","chunkLength","Math","pow","fromCharCode","apply","subarray"],"sources":["/Users/sabyrzhanolzhabay/Web-Dev/Arabakz/ArabaFrontend/node_modules/@angular/cli/node_modules/@angular-devkit/core/src/virtual-fs/host/buffer.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.fileBufferToString = exports.fileBuffer = exports.stringToFileBuffer = void 0;\nfunction stringToFileBuffer(str) {\n    // If we're in Node...\n    if (typeof Buffer !== 'undefined' && typeof Buffer.from === 'function') {\n        const buf = Buffer.from(str);\n        const ab = new ArrayBuffer(buf.length);\n        const view = new Uint8Array(ab);\n        for (let i = 0; i < buf.length; ++i) {\n            view[i] = buf[i];\n        }\n        return ab;\n    }\n    else if (typeof TextEncoder !== 'undefined') {\n        // Modern browsers implement TextEncode.\n        return new TextEncoder('utf-8').encode(str).buffer;\n    }\n    else {\n        // Slowest method but sure to be compatible with every platform.\n        const buf = new ArrayBuffer(str.length * 2); // 2 bytes for each char\n        const bufView = new Uint16Array(buf);\n        for (let i = 0, strLen = str.length; i < strLen; i++) {\n            bufView[i] = str.charCodeAt(i);\n        }\n        return buf;\n    }\n}\nexports.stringToFileBuffer = stringToFileBuffer;\nconst fileBuffer = (strings, ...values) => {\n    return stringToFileBuffer(String.raw(strings, ...values));\n};\nexports.fileBuffer = fileBuffer;\nfunction fileBufferToString(fileBuffer) {\n    if (fileBuffer.toString.length == 1) {\n        return fileBuffer.toString('utf-8');\n    }\n    else if (typeof Buffer !== 'undefined') {\n        return Buffer.from(fileBuffer).toString('utf-8');\n    }\n    else if (typeof TextDecoder !== 'undefined') {\n        // Modern browsers implement TextEncode.\n        return new TextDecoder('utf-8').decode(new Uint8Array(fileBuffer));\n    }\n    else {\n        // Slowest method but sure to be compatible with every platform.\n        const bufView = new Uint8Array(fileBuffer);\n        const bufLength = bufView.length;\n        let result = '';\n        let chunkLength = Math.pow(2, 16) - 1;\n        // We have to chunk it because String.fromCharCode.apply will throw\n        // `Maximum call stack size exceeded` on big inputs.\n        for (let i = 0; i < bufLength; i += chunkLength) {\n            if (i + chunkLength > bufLength) {\n                chunkLength = bufLength - i;\n            }\n            result += String.fromCharCode.apply(null, [...bufView.subarray(i, i + chunkLength)]);\n        }\n        return result;\n    }\n}\nexports.fileBufferToString = fileBufferToString;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}