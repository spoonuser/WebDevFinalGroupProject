{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.JsonWorkspaceMetadata = exports.JsonWorkspaceSymbol = void 0;\nconst jsonc_parser_1 = require(\"jsonc-parser\");\nexports.JsonWorkspaceSymbol = Symbol.for('@angular/core:workspace-json');\nfunction escapeKey(key) {\n  return key.replace('~', '~0').replace('/', '~1');\n}\nclass JsonWorkspaceMetadata {\n  constructor(filePath, ast, raw) {\n    this.filePath = filePath;\n    this.ast = ast;\n    this.raw = raw;\n    this.changes = new Map();\n    this.hasLegacyTargetsName = true;\n  }\n  get hasChanges() {\n    return this.changes.size > 0;\n  }\n  get changeCount() {\n    return this.changes.size;\n  }\n  getNodeValueFromAst(path) {\n    const node = (0, jsonc_parser_1.findNodeAtLocation)(this.ast, path);\n    return node && (0, jsonc_parser_1.getNodeValue)(node);\n  }\n  findChangesForPath(path) {\n    return this.changes.get(path);\n  }\n  addChange(jsonPath, value, type) {\n    let currentPath = '';\n    for (let index = 0; index < jsonPath.length - 1; index++) {\n      currentPath = currentPath + '/' + escapeKey(jsonPath[index]);\n      if (this.changes.has(currentPath)) {\n        // Ignore changes on children as parent is updated.\n        return;\n      }\n    }\n    const pathKey = '/' + jsonPath.map(k => escapeKey(k)).join('/');\n    for (const key of this.changes.keys()) {\n      if (key.startsWith(pathKey + '/')) {\n        // changes on the same or child paths are redundant.\n        this.changes.delete(key);\n      }\n    }\n    this.changes.set(pathKey, {\n      jsonPath,\n      type,\n      value\n    });\n  }\n}\nexports.JsonWorkspaceMetadata = JsonWorkspaceMetadata;","map":{"version":3,"names":["Object","defineProperty","exports","value","JsonWorkspaceMetadata","JsonWorkspaceSymbol","jsonc_parser_1","require","Symbol","for","escapeKey","key","replace","constructor","filePath","ast","raw","changes","Map","hasLegacyTargetsName","hasChanges","size","changeCount","getNodeValueFromAst","path","node","findNodeAtLocation","getNodeValue","findChangesForPath","get","addChange","jsonPath","type","currentPath","index","length","has","pathKey","map","k","join","keys","startsWith","delete","set"],"sources":["/Users/sabyrzhanolzhabay/Web-Dev/Arabakz/ArabaFrontend/node_modules/@angular/cli/node_modules/@angular-devkit/core/src/workspace/json/metadata.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JsonWorkspaceMetadata = exports.JsonWorkspaceSymbol = void 0;\nconst jsonc_parser_1 = require(\"jsonc-parser\");\nexports.JsonWorkspaceSymbol = Symbol.for('@angular/core:workspace-json');\nfunction escapeKey(key) {\n    return key.replace('~', '~0').replace('/', '~1');\n}\nclass JsonWorkspaceMetadata {\n    constructor(filePath, ast, raw) {\n        this.filePath = filePath;\n        this.ast = ast;\n        this.raw = raw;\n        this.changes = new Map();\n        this.hasLegacyTargetsName = true;\n    }\n    get hasChanges() {\n        return this.changes.size > 0;\n    }\n    get changeCount() {\n        return this.changes.size;\n    }\n    getNodeValueFromAst(path) {\n        const node = (0, jsonc_parser_1.findNodeAtLocation)(this.ast, path);\n        return node && (0, jsonc_parser_1.getNodeValue)(node);\n    }\n    findChangesForPath(path) {\n        return this.changes.get(path);\n    }\n    addChange(jsonPath, value, type) {\n        let currentPath = '';\n        for (let index = 0; index < jsonPath.length - 1; index++) {\n            currentPath = currentPath + '/' + escapeKey(jsonPath[index]);\n            if (this.changes.has(currentPath)) {\n                // Ignore changes on children as parent is updated.\n                return;\n            }\n        }\n        const pathKey = '/' + jsonPath.map((k) => escapeKey(k)).join('/');\n        for (const key of this.changes.keys()) {\n            if (key.startsWith(pathKey + '/')) {\n                // changes on the same or child paths are redundant.\n                this.changes.delete(key);\n            }\n        }\n        this.changes.set(pathKey, { jsonPath, type, value });\n    }\n}\nexports.JsonWorkspaceMetadata = JsonWorkspaceMetadata;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,qBAAqB,GAAGF,OAAO,CAACG,mBAAmB,GAAG,KAAK,CAAC;AACpE,MAAMC,cAAc,GAAGC,OAAO,CAAC,cAAc,CAAC;AAC9CL,OAAO,CAACG,mBAAmB,GAAGG,MAAM,CAACC,GAAG,CAAC,8BAA8B,CAAC;AACxE,SAASC,SAAS,CAACC,GAAG,EAAE;EACpB,OAAOA,GAAG,CAACC,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,CAACA,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC;AACpD;AACA,MAAMR,qBAAqB,CAAC;EACxBS,WAAW,CAACC,QAAQ,EAAEC,GAAG,EAAEC,GAAG,EAAE;IAC5B,IAAI,CAACF,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,GAAG,GAAGA,GAAG;IACd,IAAI,CAACC,GAAG,GAAGA,GAAG;IACd,IAAI,CAACC,OAAO,GAAG,IAAIC,GAAG,EAAE;IACxB,IAAI,CAACC,oBAAoB,GAAG,IAAI;EACpC;EACA,IAAIC,UAAU,GAAG;IACb,OAAO,IAAI,CAACH,OAAO,CAACI,IAAI,GAAG,CAAC;EAChC;EACA,IAAIC,WAAW,GAAG;IACd,OAAO,IAAI,CAACL,OAAO,CAACI,IAAI;EAC5B;EACAE,mBAAmB,CAACC,IAAI,EAAE;IACtB,MAAMC,IAAI,GAAG,CAAC,CAAC,EAAEnB,cAAc,CAACoB,kBAAkB,EAAE,IAAI,CAACX,GAAG,EAAES,IAAI,CAAC;IACnE,OAAOC,IAAI,IAAI,CAAC,CAAC,EAAEnB,cAAc,CAACqB,YAAY,EAAEF,IAAI,CAAC;EACzD;EACAG,kBAAkB,CAACJ,IAAI,EAAE;IACrB,OAAO,IAAI,CAACP,OAAO,CAACY,GAAG,CAACL,IAAI,CAAC;EACjC;EACAM,SAAS,CAACC,QAAQ,EAAE5B,KAAK,EAAE6B,IAAI,EAAE;IAC7B,IAAIC,WAAW,GAAG,EAAE;IACpB,KAAK,IAAIC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGH,QAAQ,CAACI,MAAM,GAAG,CAAC,EAAED,KAAK,EAAE,EAAE;MACtDD,WAAW,GAAGA,WAAW,GAAG,GAAG,GAAGvB,SAAS,CAACqB,QAAQ,CAACG,KAAK,CAAC,CAAC;MAC5D,IAAI,IAAI,CAACjB,OAAO,CAACmB,GAAG,CAACH,WAAW,CAAC,EAAE;QAC/B;QACA;MACJ;IACJ;IACA,MAAMI,OAAO,GAAG,GAAG,GAAGN,QAAQ,CAACO,GAAG,CAAEC,CAAC,IAAK7B,SAAS,CAAC6B,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;IACjE,KAAK,MAAM7B,GAAG,IAAI,IAAI,CAACM,OAAO,CAACwB,IAAI,EAAE,EAAE;MACnC,IAAI9B,GAAG,CAAC+B,UAAU,CAACL,OAAO,GAAG,GAAG,CAAC,EAAE;QAC/B;QACA,IAAI,CAACpB,OAAO,CAAC0B,MAAM,CAAChC,GAAG,CAAC;MAC5B;IACJ;IACA,IAAI,CAACM,OAAO,CAAC2B,GAAG,CAACP,OAAO,EAAE;MAAEN,QAAQ;MAAEC,IAAI;MAAE7B;IAAM,CAAC,CAAC;EACxD;AACJ;AACAD,OAAO,CAACE,qBAAqB,GAAGA,qBAAqB"},"metadata":{},"sourceType":"script","externalDependencies":[]}