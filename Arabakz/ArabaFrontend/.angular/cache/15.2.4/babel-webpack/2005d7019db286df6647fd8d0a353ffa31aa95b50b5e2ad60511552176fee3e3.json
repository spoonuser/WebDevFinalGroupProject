{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.or = exports.and = exports.not = exports.CodeGen = exports.operators = exports.varKinds = exports.ValueScopeName = exports.ValueScope = exports.Scope = exports.Name = exports.regexpCode = exports.stringify = exports.getProperty = exports.nil = exports.strConcat = exports.str = exports._ = void 0;\nconst code_1 = require(\"./code\");\nconst scope_1 = require(\"./scope\");\nvar code_2 = require(\"./code\");\nObject.defineProperty(exports, \"_\", {\n  enumerable: true,\n  get: function () {\n    return code_2._;\n  }\n});\nObject.defineProperty(exports, \"str\", {\n  enumerable: true,\n  get: function () {\n    return code_2.str;\n  }\n});\nObject.defineProperty(exports, \"strConcat\", {\n  enumerable: true,\n  get: function () {\n    return code_2.strConcat;\n  }\n});\nObject.defineProperty(exports, \"nil\", {\n  enumerable: true,\n  get: function () {\n    return code_2.nil;\n  }\n});\nObject.defineProperty(exports, \"getProperty\", {\n  enumerable: true,\n  get: function () {\n    return code_2.getProperty;\n  }\n});\nObject.defineProperty(exports, \"stringify\", {\n  enumerable: true,\n  get: function () {\n    return code_2.stringify;\n  }\n});\nObject.defineProperty(exports, \"regexpCode\", {\n  enumerable: true,\n  get: function () {\n    return code_2.regexpCode;\n  }\n});\nObject.defineProperty(exports, \"Name\", {\n  enumerable: true,\n  get: function () {\n    return code_2.Name;\n  }\n});\nvar scope_2 = require(\"./scope\");\nObject.defineProperty(exports, \"Scope\", {\n  enumerable: true,\n  get: function () {\n    return scope_2.Scope;\n  }\n});\nObject.defineProperty(exports, \"ValueScope\", {\n  enumerable: true,\n  get: function () {\n    return scope_2.ValueScope;\n  }\n});\nObject.defineProperty(exports, \"ValueScopeName\", {\n  enumerable: true,\n  get: function () {\n    return scope_2.ValueScopeName;\n  }\n});\nObject.defineProperty(exports, \"varKinds\", {\n  enumerable: true,\n  get: function () {\n    return scope_2.varKinds;\n  }\n});\nexports.operators = {\n  GT: new code_1._Code(\">\"),\n  GTE: new code_1._Code(\">=\"),\n  LT: new code_1._Code(\"<\"),\n  LTE: new code_1._Code(\"<=\"),\n  EQ: new code_1._Code(\"===\"),\n  NEQ: new code_1._Code(\"!==\"),\n  NOT: new code_1._Code(\"!\"),\n  OR: new code_1._Code(\"||\"),\n  AND: new code_1._Code(\"&&\"),\n  ADD: new code_1._Code(\"+\")\n};\nclass Node {\n  optimizeNodes() {\n    return this;\n  }\n  optimizeNames(_names, _constants) {\n    return this;\n  }\n}\nclass Def extends Node {\n  constructor(varKind, name, rhs) {\n    super();\n    this.varKind = varKind;\n    this.name = name;\n    this.rhs = rhs;\n  }\n  render({\n    es5,\n    _n\n  }) {\n    const varKind = es5 ? scope_1.varKinds.var : this.varKind;\n    const rhs = this.rhs === undefined ? \"\" : ` = ${this.rhs}`;\n    return `${varKind} ${this.name}${rhs};` + _n;\n  }\n  optimizeNames(names, constants) {\n    if (!names[this.name.str]) return;\n    if (this.rhs) this.rhs = optimizeExpr(this.rhs, names, constants);\n    return this;\n  }\n  get names() {\n    return this.rhs instanceof code_1._CodeOrName ? this.rhs.names : {};\n  }\n}\nclass Assign extends Node {\n  constructor(lhs, rhs, sideEffects) {\n    super();\n    this.lhs = lhs;\n    this.rhs = rhs;\n    this.sideEffects = sideEffects;\n  }\n  render({\n    _n\n  }) {\n    return `${this.lhs} = ${this.rhs};` + _n;\n  }\n  optimizeNames(names, constants) {\n    if (this.lhs instanceof code_1.Name && !names[this.lhs.str] && !this.sideEffects) return;\n    this.rhs = optimizeExpr(this.rhs, names, constants);\n    return this;\n  }\n  get names() {\n    const names = this.lhs instanceof code_1.Name ? {} : {\n      ...this.lhs.names\n    };\n    return addExprNames(names, this.rhs);\n  }\n}\nclass AssignOp extends Assign {\n  constructor(lhs, op, rhs, sideEffects) {\n    super(lhs, rhs, sideEffects);\n    this.op = op;\n  }\n  render({\n    _n\n  }) {\n    return `${this.lhs} ${this.op}= ${this.rhs};` + _n;\n  }\n}\nclass Label extends Node {\n  constructor(label) {\n    super();\n    this.label = label;\n    this.names = {};\n  }\n  render({\n    _n\n  }) {\n    return `${this.label}:` + _n;\n  }\n}\nclass Break extends Node {\n  constructor(label) {\n    super();\n    this.label = label;\n    this.names = {};\n  }\n  render({\n    _n\n  }) {\n    const label = this.label ? ` ${this.label}` : \"\";\n    return `break${label};` + _n;\n  }\n}\nclass Throw extends Node {\n  constructor(error) {\n    super();\n    this.error = error;\n  }\n  render({\n    _n\n  }) {\n    return `throw ${this.error};` + _n;\n  }\n  get names() {\n    return this.error.names;\n  }\n}\nclass AnyCode extends Node {\n  constructor(code) {\n    super();\n    this.code = code;\n  }\n  render({\n    _n\n  }) {\n    return `${this.code};` + _n;\n  }\n  optimizeNodes() {\n    return `${this.code}` ? this : undefined;\n  }\n  optimizeNames(names, constants) {\n    this.code = optimizeExpr(this.code, names, constants);\n    return this;\n  }\n  get names() {\n    return this.code instanceof code_1._CodeOrName ? this.code.names : {};\n  }\n}\nclass ParentNode extends Node {\n  constructor(nodes = []) {\n    super();\n    this.nodes = nodes;\n  }\n  render(opts) {\n    return this.nodes.reduce((code, n) => code + n.render(opts), \"\");\n  }\n  optimizeNodes() {\n    const {\n      nodes\n    } = this;\n    let i = nodes.length;\n    while (i--) {\n      const n = nodes[i].optimizeNodes();\n      if (Array.isArray(n)) nodes.splice(i, 1, ...n);else if (n) nodes[i] = n;else nodes.splice(i, 1);\n    }\n    return nodes.length > 0 ? this : undefined;\n  }\n  optimizeNames(names, constants) {\n    const {\n      nodes\n    } = this;\n    let i = nodes.length;\n    while (i--) {\n      // iterating backwards improves 1-pass optimization\n      const n = nodes[i];\n      if (n.optimizeNames(names, constants)) continue;\n      subtractNames(names, n.names);\n      nodes.splice(i, 1);\n    }\n    return nodes.length > 0 ? this : undefined;\n  }\n  get names() {\n    return this.nodes.reduce((names, n) => addNames(names, n.names), {});\n  }\n}\nclass BlockNode extends ParentNode {\n  render(opts) {\n    return \"{\" + opts._n + super.render(opts) + \"}\" + opts._n;\n  }\n}\nclass Root extends ParentNode {}\nclass Else extends BlockNode {}\nElse.kind = \"else\";\nclass If extends BlockNode {\n  constructor(condition, nodes) {\n    super(nodes);\n    this.condition = condition;\n  }\n  render(opts) {\n    let code = `if(${this.condition})` + super.render(opts);\n    if (this.else) code += \"else \" + this.else.render(opts);\n    return code;\n  }\n  optimizeNodes() {\n    super.optimizeNodes();\n    const cond = this.condition;\n    if (cond === true) return this.nodes; // else is ignored here\n    let e = this.else;\n    if (e) {\n      const ns = e.optimizeNodes();\n      e = this.else = Array.isArray(ns) ? new Else(ns) : ns;\n    }\n    if (e) {\n      if (cond === false) return e instanceof If ? e : e.nodes;\n      if (this.nodes.length) return this;\n      return new If(not(cond), e instanceof If ? [e] : e.nodes);\n    }\n    if (cond === false || !this.nodes.length) return undefined;\n    return this;\n  }\n  optimizeNames(names, constants) {\n    var _a;\n    this.else = (_a = this.else) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);\n    if (!(super.optimizeNames(names, constants) || this.else)) return;\n    this.condition = optimizeExpr(this.condition, names, constants);\n    return this;\n  }\n  get names() {\n    const names = super.names;\n    addExprNames(names, this.condition);\n    if (this.else) addNames(names, this.else.names);\n    return names;\n  }\n}\nIf.kind = \"if\";\nclass For extends BlockNode {}\nFor.kind = \"for\";\nclass ForLoop extends For {\n  constructor(iteration) {\n    super();\n    this.iteration = iteration;\n  }\n  render(opts) {\n    return `for(${this.iteration})` + super.render(opts);\n  }\n  optimizeNames(names, constants) {\n    if (!super.optimizeNames(names, constants)) return;\n    this.iteration = optimizeExpr(this.iteration, names, constants);\n    return this;\n  }\n  get names() {\n    return addNames(super.names, this.iteration.names);\n  }\n}\nclass ForRange extends For {\n  constructor(varKind, name, from, to) {\n    super();\n    this.varKind = varKind;\n    this.name = name;\n    this.from = from;\n    this.to = to;\n  }\n  render(opts) {\n    const varKind = opts.es5 ? scope_1.varKinds.var : this.varKind;\n    const {\n      name,\n      from,\n      to\n    } = this;\n    return `for(${varKind} ${name}=${from}; ${name}<${to}; ${name}++)` + super.render(opts);\n  }\n  get names() {\n    const names = addExprNames(super.names, this.from);\n    return addExprNames(names, this.to);\n  }\n}\nclass ForIter extends For {\n  constructor(loop, varKind, name, iterable) {\n    super();\n    this.loop = loop;\n    this.varKind = varKind;\n    this.name = name;\n    this.iterable = iterable;\n  }\n  render(opts) {\n    return `for(${this.varKind} ${this.name} ${this.loop} ${this.iterable})` + super.render(opts);\n  }\n  optimizeNames(names, constants) {\n    if (!super.optimizeNames(names, constants)) return;\n    this.iterable = optimizeExpr(this.iterable, names, constants);\n    return this;\n  }\n  get names() {\n    return addNames(super.names, this.iterable.names);\n  }\n}\nclass Func extends BlockNode {\n  constructor(name, args, async) {\n    super();\n    this.name = name;\n    this.args = args;\n    this.async = async;\n  }\n  render(opts) {\n    const _async = this.async ? \"async \" : \"\";\n    return `${_async}function ${this.name}(${this.args})` + super.render(opts);\n  }\n}\nFunc.kind = \"func\";\nclass Return extends ParentNode {\n  render(opts) {\n    return \"return \" + super.render(opts);\n  }\n}\nReturn.kind = \"return\";\nclass Try extends BlockNode {\n  render(opts) {\n    let code = \"try\" + super.render(opts);\n    if (this.catch) code += this.catch.render(opts);\n    if (this.finally) code += this.finally.render(opts);\n    return code;\n  }\n  optimizeNodes() {\n    var _a, _b;\n    super.optimizeNodes();\n    (_a = this.catch) === null || _a === void 0 ? void 0 : _a.optimizeNodes();\n    (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNodes();\n    return this;\n  }\n  optimizeNames(names, constants) {\n    var _a, _b;\n    super.optimizeNames(names, constants);\n    (_a = this.catch) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);\n    (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNames(names, constants);\n    return this;\n  }\n  get names() {\n    const names = super.names;\n    if (this.catch) addNames(names, this.catch.names);\n    if (this.finally) addNames(names, this.finally.names);\n    return names;\n  }\n}\nclass Catch extends BlockNode {\n  constructor(error) {\n    super();\n    this.error = error;\n  }\n  render(opts) {\n    return `catch(${this.error})` + super.render(opts);\n  }\n}\nCatch.kind = \"catch\";\nclass Finally extends BlockNode {\n  render(opts) {\n    return \"finally\" + super.render(opts);\n  }\n}\nFinally.kind = \"finally\";\nclass CodeGen {\n  constructor(extScope, opts = {}) {\n    this._values = {};\n    this._blockStarts = [];\n    this._constants = {};\n    this.opts = {\n      ...opts,\n      _n: opts.lines ? \"\\n\" : \"\"\n    };\n    this._extScope = extScope;\n    this._scope = new scope_1.Scope({\n      parent: extScope\n    });\n    this._nodes = [new Root()];\n  }\n  toString() {\n    return this._root.render(this.opts);\n  }\n  // returns unique name in the internal scope\n  name(prefix) {\n    return this._scope.name(prefix);\n  }\n  // reserves unique name in the external scope\n  scopeName(prefix) {\n    return this._extScope.name(prefix);\n  }\n  // reserves unique name in the external scope and assigns value to it\n  scopeValue(prefixOrName, value) {\n    const name = this._extScope.value(prefixOrName, value);\n    const vs = this._values[name.prefix] || (this._values[name.prefix] = new Set());\n    vs.add(name);\n    return name;\n  }\n  getScopeValue(prefix, keyOrRef) {\n    return this._extScope.getValue(prefix, keyOrRef);\n  }\n  // return code that assigns values in the external scope to the names that are used internally\n  // (same names that were returned by gen.scopeName or gen.scopeValue)\n  scopeRefs(scopeName) {\n    return this._extScope.scopeRefs(scopeName, this._values);\n  }\n  scopeCode() {\n    return this._extScope.scopeCode(this._values);\n  }\n  _def(varKind, nameOrPrefix, rhs, constant) {\n    const name = this._scope.toName(nameOrPrefix);\n    if (rhs !== undefined && constant) this._constants[name.str] = rhs;\n    this._leafNode(new Def(varKind, name, rhs));\n    return name;\n  }\n  // `const` declaration (`var` in es5 mode)\n  const(nameOrPrefix, rhs, _constant) {\n    return this._def(scope_1.varKinds.const, nameOrPrefix, rhs, _constant);\n  }\n  // `let` declaration with optional assignment (`var` in es5 mode)\n  let(nameOrPrefix, rhs, _constant) {\n    return this._def(scope_1.varKinds.let, nameOrPrefix, rhs, _constant);\n  }\n  // `var` declaration with optional assignment\n  var(nameOrPrefix, rhs, _constant) {\n    return this._def(scope_1.varKinds.var, nameOrPrefix, rhs, _constant);\n  }\n  // assignment code\n  assign(lhs, rhs, sideEffects) {\n    return this._leafNode(new Assign(lhs, rhs, sideEffects));\n  }\n  // `+=` code\n  add(lhs, rhs) {\n    return this._leafNode(new AssignOp(lhs, exports.operators.ADD, rhs));\n  }\n  // appends passed SafeExpr to code or executes Block\n  code(c) {\n    if (typeof c == \"function\") c();else if (c !== code_1.nil) this._leafNode(new AnyCode(c));\n    return this;\n  }\n  // returns code for object literal for the passed argument list of key-value pairs\n  object(...keyValues) {\n    const code = [\"{\"];\n    for (const [key, value] of keyValues) {\n      if (code.length > 1) code.push(\",\");\n      code.push(key);\n      if (key !== value || this.opts.es5) {\n        code.push(\":\");\n        (0, code_1.addCodeArg)(code, value);\n      }\n    }\n    code.push(\"}\");\n    return new code_1._Code(code);\n  }\n  // `if` clause (or statement if `thenBody` and, optionally, `elseBody` are passed)\n  if(condition, thenBody, elseBody) {\n    this._blockNode(new If(condition));\n    if (thenBody && elseBody) {\n      this.code(thenBody).else().code(elseBody).endIf();\n    } else if (thenBody) {\n      this.code(thenBody).endIf();\n    } else if (elseBody) {\n      throw new Error('CodeGen: \"else\" body without \"then\" body');\n    }\n    return this;\n  }\n  // `else if` clause - invalid without `if` or after `else` clauses\n  elseIf(condition) {\n    return this._elseNode(new If(condition));\n  }\n  // `else` clause - only valid after `if` or `else if` clauses\n  else() {\n    return this._elseNode(new Else());\n  }\n  // end `if` statement (needed if gen.if was used only with condition)\n  endIf() {\n    return this._endBlockNode(If, Else);\n  }\n  _for(node, forBody) {\n    this._blockNode(node);\n    if (forBody) this.code(forBody).endFor();\n    return this;\n  }\n  // a generic `for` clause (or statement if `forBody` is passed)\n  for(iteration, forBody) {\n    return this._for(new ForLoop(iteration), forBody);\n  }\n  // `for` statement for a range of values\n  forRange(nameOrPrefix, from, to, forBody, varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.let) {\n    const name = this._scope.toName(nameOrPrefix);\n    return this._for(new ForRange(varKind, name, from, to), () => forBody(name));\n  }\n  // `for-of` statement (in es5 mode replace with a normal for loop)\n  forOf(nameOrPrefix, iterable, forBody, varKind = scope_1.varKinds.const) {\n    const name = this._scope.toName(nameOrPrefix);\n    if (this.opts.es5) {\n      const arr = iterable instanceof code_1.Name ? iterable : this.var(\"_arr\", iterable);\n      return this.forRange(\"_i\", 0, (0, code_1._)`${arr}.length`, i => {\n        this.var(name, (0, code_1._)`${arr}[${i}]`);\n        forBody(name);\n      });\n    }\n    return this._for(new ForIter(\"of\", varKind, name, iterable), () => forBody(name));\n  }\n  // `for-in` statement.\n  // With option `ownProperties` replaced with a `for-of` loop for object keys\n  forIn(nameOrPrefix, obj, forBody, varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.const) {\n    if (this.opts.ownProperties) {\n      return this.forOf(nameOrPrefix, (0, code_1._)`Object.keys(${obj})`, forBody);\n    }\n    const name = this._scope.toName(nameOrPrefix);\n    return this._for(new ForIter(\"in\", varKind, name, obj), () => forBody(name));\n  }\n  // end `for` loop\n  endFor() {\n    return this._endBlockNode(For);\n  }\n  // `label` statement\n  label(label) {\n    return this._leafNode(new Label(label));\n  }\n  // `break` statement\n  break(label) {\n    return this._leafNode(new Break(label));\n  }\n  // `return` statement\n  return(value) {\n    const node = new Return();\n    this._blockNode(node);\n    this.code(value);\n    if (node.nodes.length !== 1) throw new Error('CodeGen: \"return\" should have one node');\n    return this._endBlockNode(Return);\n  }\n  // `try` statement\n  try(tryBody, catchCode, finallyCode) {\n    if (!catchCode && !finallyCode) throw new Error('CodeGen: \"try\" without \"catch\" and \"finally\"');\n    const node = new Try();\n    this._blockNode(node);\n    this.code(tryBody);\n    if (catchCode) {\n      const error = this.name(\"e\");\n      this._currNode = node.catch = new Catch(error);\n      catchCode(error);\n    }\n    if (finallyCode) {\n      this._currNode = node.finally = new Finally();\n      this.code(finallyCode);\n    }\n    return this._endBlockNode(Catch, Finally);\n  }\n  // `throw` statement\n  throw(error) {\n    return this._leafNode(new Throw(error));\n  }\n  // start self-balancing block\n  block(body, nodeCount) {\n    this._blockStarts.push(this._nodes.length);\n    if (body) this.code(body).endBlock(nodeCount);\n    return this;\n  }\n  // end the current self-balancing block\n  endBlock(nodeCount) {\n    const len = this._blockStarts.pop();\n    if (len === undefined) throw new Error(\"CodeGen: not in self-balancing block\");\n    const toClose = this._nodes.length - len;\n    if (toClose < 0 || nodeCount !== undefined && toClose !== nodeCount) {\n      throw new Error(`CodeGen: wrong number of nodes: ${toClose} vs ${nodeCount} expected`);\n    }\n    this._nodes.length = len;\n    return this;\n  }\n  // `function` heading (or definition if funcBody is passed)\n  func(name, args = code_1.nil, async, funcBody) {\n    this._blockNode(new Func(name, args, async));\n    if (funcBody) this.code(funcBody).endFunc();\n    return this;\n  }\n  // end function definition\n  endFunc() {\n    return this._endBlockNode(Func);\n  }\n  optimize(n = 1) {\n    while (n-- > 0) {\n      this._root.optimizeNodes();\n      this._root.optimizeNames(this._root.names, this._constants);\n    }\n  }\n  _leafNode(node) {\n    this._currNode.nodes.push(node);\n    return this;\n  }\n  _blockNode(node) {\n    this._currNode.nodes.push(node);\n    this._nodes.push(node);\n  }\n  _endBlockNode(N1, N2) {\n    const n = this._currNode;\n    if (n instanceof N1 || N2 && n instanceof N2) {\n      this._nodes.pop();\n      return this;\n    }\n    throw new Error(`CodeGen: not in block \"${N2 ? `${N1.kind}/${N2.kind}` : N1.kind}\"`);\n  }\n  _elseNode(node) {\n    const n = this._currNode;\n    if (!(n instanceof If)) {\n      throw new Error('CodeGen: \"else\" without \"if\"');\n    }\n    this._currNode = n.else = node;\n    return this;\n  }\n  get _root() {\n    return this._nodes[0];\n  }\n  get _currNode() {\n    const ns = this._nodes;\n    return ns[ns.length - 1];\n  }\n  set _currNode(node) {\n    const ns = this._nodes;\n    ns[ns.length - 1] = node;\n  }\n}\nexports.CodeGen = CodeGen;\nfunction addNames(names, from) {\n  for (const n in from) names[n] = (names[n] || 0) + (from[n] || 0);\n  return names;\n}\nfunction addExprNames(names, from) {\n  return from instanceof code_1._CodeOrName ? addNames(names, from.names) : names;\n}\nfunction optimizeExpr(expr, names, constants) {\n  if (expr instanceof code_1.Name) return replaceName(expr);\n  if (!canOptimize(expr)) return expr;\n  return new code_1._Code(expr._items.reduce((items, c) => {\n    if (c instanceof code_1.Name) c = replaceName(c);\n    if (c instanceof code_1._Code) items.push(...c._items);else items.push(c);\n    return items;\n  }, []));\n  function replaceName(n) {\n    const c = constants[n.str];\n    if (c === undefined || names[n.str] !== 1) return n;\n    delete names[n.str];\n    return c;\n  }\n  function canOptimize(e) {\n    return e instanceof code_1._Code && e._items.some(c => c instanceof code_1.Name && names[c.str] === 1 && constants[c.str] !== undefined);\n  }\n}\nfunction subtractNames(names, from) {\n  for (const n in from) names[n] = (names[n] || 0) - (from[n] || 0);\n}\nfunction not(x) {\n  return typeof x == \"boolean\" || typeof x == \"number\" || x === null ? !x : (0, code_1._)`!${par(x)}`;\n}\nexports.not = not;\nconst andCode = mappend(exports.operators.AND);\n// boolean AND (&&) expression with the passed arguments\nfunction and(...args) {\n  return args.reduce(andCode);\n}\nexports.and = and;\nconst orCode = mappend(exports.operators.OR);\n// boolean OR (||) expression with the passed arguments\nfunction or(...args) {\n  return args.reduce(orCode);\n}\nexports.or = or;\nfunction mappend(op) {\n  return (x, y) => x === code_1.nil ? y : y === code_1.nil ? x : (0, code_1._)`${par(x)} ${op} ${par(y)}`;\n}\nfunction par(x) {\n  return x instanceof code_1.Name ? x : (0, code_1._)`(${x})`;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","or","and","not","CodeGen","operators","varKinds","ValueScopeName","ValueScope","Scope","Name","regexpCode","stringify","getProperty","nil","strConcat","str","_","code_1","require","scope_1","code_2","enumerable","get","scope_2","GT","_Code","GTE","LT","LTE","EQ","NEQ","NOT","OR","AND","ADD","Node","optimizeNodes","optimizeNames","_names","_constants","Def","constructor","varKind","name","rhs","render","es5","_n","var","undefined","names","constants","optimizeExpr","_CodeOrName","Assign","lhs","sideEffects","addExprNames","AssignOp","op","Label","label","Break","Throw","error","AnyCode","code","ParentNode","nodes","opts","reduce","n","i","length","Array","isArray","splice","subtractNames","addNames","BlockNode","Root","Else","kind","If","condition","else","cond","e","ns","_a","For","ForLoop","iteration","ForRange","from","to","ForIter","loop","iterable","Func","args","async","_async","Return","Try","catch","finally","_b","Catch","Finally","extScope","_values","_blockStarts","lines","_extScope","_scope","parent","_nodes","toString","_root","prefix","scopeName","scopeValue","prefixOrName","vs","Set","add","getScopeValue","keyOrRef","getValue","scopeRefs","scopeCode","_def","nameOrPrefix","constant","toName","_leafNode","const","_constant","let","assign","c","object","keyValues","key","push","addCodeArg","if","thenBody","elseBody","_blockNode","endIf","Error","elseIf","_elseNode","_endBlockNode","_for","node","forBody","endFor","for","forRange","forOf","arr","forIn","obj","ownProperties","break","return","try","tryBody","catchCode","finallyCode","_currNode","throw","block","body","nodeCount","endBlock","len","pop","toClose","func","funcBody","endFunc","optimize","N1","N2","expr","replaceName","canOptimize","_items","items","some","x","par","andCode","mappend","orCode","y"],"sources":["/Users/sabyrzhanolzhabay/Web-Dev/Arabakz/ArabaFrontend/node_modules/ajv/dist/compile/codegen/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.or = exports.and = exports.not = exports.CodeGen = exports.operators = exports.varKinds = exports.ValueScopeName = exports.ValueScope = exports.Scope = exports.Name = exports.regexpCode = exports.stringify = exports.getProperty = exports.nil = exports.strConcat = exports.str = exports._ = void 0;\nconst code_1 = require(\"./code\");\nconst scope_1 = require(\"./scope\");\nvar code_2 = require(\"./code\");\nObject.defineProperty(exports, \"_\", { enumerable: true, get: function () { return code_2._; } });\nObject.defineProperty(exports, \"str\", { enumerable: true, get: function () { return code_2.str; } });\nObject.defineProperty(exports, \"strConcat\", { enumerable: true, get: function () { return code_2.strConcat; } });\nObject.defineProperty(exports, \"nil\", { enumerable: true, get: function () { return code_2.nil; } });\nObject.defineProperty(exports, \"getProperty\", { enumerable: true, get: function () { return code_2.getProperty; } });\nObject.defineProperty(exports, \"stringify\", { enumerable: true, get: function () { return code_2.stringify; } });\nObject.defineProperty(exports, \"regexpCode\", { enumerable: true, get: function () { return code_2.regexpCode; } });\nObject.defineProperty(exports, \"Name\", { enumerable: true, get: function () { return code_2.Name; } });\nvar scope_2 = require(\"./scope\");\nObject.defineProperty(exports, \"Scope\", { enumerable: true, get: function () { return scope_2.Scope; } });\nObject.defineProperty(exports, \"ValueScope\", { enumerable: true, get: function () { return scope_2.ValueScope; } });\nObject.defineProperty(exports, \"ValueScopeName\", { enumerable: true, get: function () { return scope_2.ValueScopeName; } });\nObject.defineProperty(exports, \"varKinds\", { enumerable: true, get: function () { return scope_2.varKinds; } });\nexports.operators = {\n    GT: new code_1._Code(\">\"),\n    GTE: new code_1._Code(\">=\"),\n    LT: new code_1._Code(\"<\"),\n    LTE: new code_1._Code(\"<=\"),\n    EQ: new code_1._Code(\"===\"),\n    NEQ: new code_1._Code(\"!==\"),\n    NOT: new code_1._Code(\"!\"),\n    OR: new code_1._Code(\"||\"),\n    AND: new code_1._Code(\"&&\"),\n    ADD: new code_1._Code(\"+\"),\n};\nclass Node {\n    optimizeNodes() {\n        return this;\n    }\n    optimizeNames(_names, _constants) {\n        return this;\n    }\n}\nclass Def extends Node {\n    constructor(varKind, name, rhs) {\n        super();\n        this.varKind = varKind;\n        this.name = name;\n        this.rhs = rhs;\n    }\n    render({ es5, _n }) {\n        const varKind = es5 ? scope_1.varKinds.var : this.varKind;\n        const rhs = this.rhs === undefined ? \"\" : ` = ${this.rhs}`;\n        return `${varKind} ${this.name}${rhs};` + _n;\n    }\n    optimizeNames(names, constants) {\n        if (!names[this.name.str])\n            return;\n        if (this.rhs)\n            this.rhs = optimizeExpr(this.rhs, names, constants);\n        return this;\n    }\n    get names() {\n        return this.rhs instanceof code_1._CodeOrName ? this.rhs.names : {};\n    }\n}\nclass Assign extends Node {\n    constructor(lhs, rhs, sideEffects) {\n        super();\n        this.lhs = lhs;\n        this.rhs = rhs;\n        this.sideEffects = sideEffects;\n    }\n    render({ _n }) {\n        return `${this.lhs} = ${this.rhs};` + _n;\n    }\n    optimizeNames(names, constants) {\n        if (this.lhs instanceof code_1.Name && !names[this.lhs.str] && !this.sideEffects)\n            return;\n        this.rhs = optimizeExpr(this.rhs, names, constants);\n        return this;\n    }\n    get names() {\n        const names = this.lhs instanceof code_1.Name ? {} : { ...this.lhs.names };\n        return addExprNames(names, this.rhs);\n    }\n}\nclass AssignOp extends Assign {\n    constructor(lhs, op, rhs, sideEffects) {\n        super(lhs, rhs, sideEffects);\n        this.op = op;\n    }\n    render({ _n }) {\n        return `${this.lhs} ${this.op}= ${this.rhs};` + _n;\n    }\n}\nclass Label extends Node {\n    constructor(label) {\n        super();\n        this.label = label;\n        this.names = {};\n    }\n    render({ _n }) {\n        return `${this.label}:` + _n;\n    }\n}\nclass Break extends Node {\n    constructor(label) {\n        super();\n        this.label = label;\n        this.names = {};\n    }\n    render({ _n }) {\n        const label = this.label ? ` ${this.label}` : \"\";\n        return `break${label};` + _n;\n    }\n}\nclass Throw extends Node {\n    constructor(error) {\n        super();\n        this.error = error;\n    }\n    render({ _n }) {\n        return `throw ${this.error};` + _n;\n    }\n    get names() {\n        return this.error.names;\n    }\n}\nclass AnyCode extends Node {\n    constructor(code) {\n        super();\n        this.code = code;\n    }\n    render({ _n }) {\n        return `${this.code};` + _n;\n    }\n    optimizeNodes() {\n        return `${this.code}` ? this : undefined;\n    }\n    optimizeNames(names, constants) {\n        this.code = optimizeExpr(this.code, names, constants);\n        return this;\n    }\n    get names() {\n        return this.code instanceof code_1._CodeOrName ? this.code.names : {};\n    }\n}\nclass ParentNode extends Node {\n    constructor(nodes = []) {\n        super();\n        this.nodes = nodes;\n    }\n    render(opts) {\n        return this.nodes.reduce((code, n) => code + n.render(opts), \"\");\n    }\n    optimizeNodes() {\n        const { nodes } = this;\n        let i = nodes.length;\n        while (i--) {\n            const n = nodes[i].optimizeNodes();\n            if (Array.isArray(n))\n                nodes.splice(i, 1, ...n);\n            else if (n)\n                nodes[i] = n;\n            else\n                nodes.splice(i, 1);\n        }\n        return nodes.length > 0 ? this : undefined;\n    }\n    optimizeNames(names, constants) {\n        const { nodes } = this;\n        let i = nodes.length;\n        while (i--) {\n            // iterating backwards improves 1-pass optimization\n            const n = nodes[i];\n            if (n.optimizeNames(names, constants))\n                continue;\n            subtractNames(names, n.names);\n            nodes.splice(i, 1);\n        }\n        return nodes.length > 0 ? this : undefined;\n    }\n    get names() {\n        return this.nodes.reduce((names, n) => addNames(names, n.names), {});\n    }\n}\nclass BlockNode extends ParentNode {\n    render(opts) {\n        return \"{\" + opts._n + super.render(opts) + \"}\" + opts._n;\n    }\n}\nclass Root extends ParentNode {\n}\nclass Else extends BlockNode {\n}\nElse.kind = \"else\";\nclass If extends BlockNode {\n    constructor(condition, nodes) {\n        super(nodes);\n        this.condition = condition;\n    }\n    render(opts) {\n        let code = `if(${this.condition})` + super.render(opts);\n        if (this.else)\n            code += \"else \" + this.else.render(opts);\n        return code;\n    }\n    optimizeNodes() {\n        super.optimizeNodes();\n        const cond = this.condition;\n        if (cond === true)\n            return this.nodes; // else is ignored here\n        let e = this.else;\n        if (e) {\n            const ns = e.optimizeNodes();\n            e = this.else = Array.isArray(ns) ? new Else(ns) : ns;\n        }\n        if (e) {\n            if (cond === false)\n                return e instanceof If ? e : e.nodes;\n            if (this.nodes.length)\n                return this;\n            return new If(not(cond), e instanceof If ? [e] : e.nodes);\n        }\n        if (cond === false || !this.nodes.length)\n            return undefined;\n        return this;\n    }\n    optimizeNames(names, constants) {\n        var _a;\n        this.else = (_a = this.else) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);\n        if (!(super.optimizeNames(names, constants) || this.else))\n            return;\n        this.condition = optimizeExpr(this.condition, names, constants);\n        return this;\n    }\n    get names() {\n        const names = super.names;\n        addExprNames(names, this.condition);\n        if (this.else)\n            addNames(names, this.else.names);\n        return names;\n    }\n}\nIf.kind = \"if\";\nclass For extends BlockNode {\n}\nFor.kind = \"for\";\nclass ForLoop extends For {\n    constructor(iteration) {\n        super();\n        this.iteration = iteration;\n    }\n    render(opts) {\n        return `for(${this.iteration})` + super.render(opts);\n    }\n    optimizeNames(names, constants) {\n        if (!super.optimizeNames(names, constants))\n            return;\n        this.iteration = optimizeExpr(this.iteration, names, constants);\n        return this;\n    }\n    get names() {\n        return addNames(super.names, this.iteration.names);\n    }\n}\nclass ForRange extends For {\n    constructor(varKind, name, from, to) {\n        super();\n        this.varKind = varKind;\n        this.name = name;\n        this.from = from;\n        this.to = to;\n    }\n    render(opts) {\n        const varKind = opts.es5 ? scope_1.varKinds.var : this.varKind;\n        const { name, from, to } = this;\n        return `for(${varKind} ${name}=${from}; ${name}<${to}; ${name}++)` + super.render(opts);\n    }\n    get names() {\n        const names = addExprNames(super.names, this.from);\n        return addExprNames(names, this.to);\n    }\n}\nclass ForIter extends For {\n    constructor(loop, varKind, name, iterable) {\n        super();\n        this.loop = loop;\n        this.varKind = varKind;\n        this.name = name;\n        this.iterable = iterable;\n    }\n    render(opts) {\n        return `for(${this.varKind} ${this.name} ${this.loop} ${this.iterable})` + super.render(opts);\n    }\n    optimizeNames(names, constants) {\n        if (!super.optimizeNames(names, constants))\n            return;\n        this.iterable = optimizeExpr(this.iterable, names, constants);\n        return this;\n    }\n    get names() {\n        return addNames(super.names, this.iterable.names);\n    }\n}\nclass Func extends BlockNode {\n    constructor(name, args, async) {\n        super();\n        this.name = name;\n        this.args = args;\n        this.async = async;\n    }\n    render(opts) {\n        const _async = this.async ? \"async \" : \"\";\n        return `${_async}function ${this.name}(${this.args})` + super.render(opts);\n    }\n}\nFunc.kind = \"func\";\nclass Return extends ParentNode {\n    render(opts) {\n        return \"return \" + super.render(opts);\n    }\n}\nReturn.kind = \"return\";\nclass Try extends BlockNode {\n    render(opts) {\n        let code = \"try\" + super.render(opts);\n        if (this.catch)\n            code += this.catch.render(opts);\n        if (this.finally)\n            code += this.finally.render(opts);\n        return code;\n    }\n    optimizeNodes() {\n        var _a, _b;\n        super.optimizeNodes();\n        (_a = this.catch) === null || _a === void 0 ? void 0 : _a.optimizeNodes();\n        (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNodes();\n        return this;\n    }\n    optimizeNames(names, constants) {\n        var _a, _b;\n        super.optimizeNames(names, constants);\n        (_a = this.catch) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);\n        (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNames(names, constants);\n        return this;\n    }\n    get names() {\n        const names = super.names;\n        if (this.catch)\n            addNames(names, this.catch.names);\n        if (this.finally)\n            addNames(names, this.finally.names);\n        return names;\n    }\n}\nclass Catch extends BlockNode {\n    constructor(error) {\n        super();\n        this.error = error;\n    }\n    render(opts) {\n        return `catch(${this.error})` + super.render(opts);\n    }\n}\nCatch.kind = \"catch\";\nclass Finally extends BlockNode {\n    render(opts) {\n        return \"finally\" + super.render(opts);\n    }\n}\nFinally.kind = \"finally\";\nclass CodeGen {\n    constructor(extScope, opts = {}) {\n        this._values = {};\n        this._blockStarts = [];\n        this._constants = {};\n        this.opts = { ...opts, _n: opts.lines ? \"\\n\" : \"\" };\n        this._extScope = extScope;\n        this._scope = new scope_1.Scope({ parent: extScope });\n        this._nodes = [new Root()];\n    }\n    toString() {\n        return this._root.render(this.opts);\n    }\n    // returns unique name in the internal scope\n    name(prefix) {\n        return this._scope.name(prefix);\n    }\n    // reserves unique name in the external scope\n    scopeName(prefix) {\n        return this._extScope.name(prefix);\n    }\n    // reserves unique name in the external scope and assigns value to it\n    scopeValue(prefixOrName, value) {\n        const name = this._extScope.value(prefixOrName, value);\n        const vs = this._values[name.prefix] || (this._values[name.prefix] = new Set());\n        vs.add(name);\n        return name;\n    }\n    getScopeValue(prefix, keyOrRef) {\n        return this._extScope.getValue(prefix, keyOrRef);\n    }\n    // return code that assigns values in the external scope to the names that are used internally\n    // (same names that were returned by gen.scopeName or gen.scopeValue)\n    scopeRefs(scopeName) {\n        return this._extScope.scopeRefs(scopeName, this._values);\n    }\n    scopeCode() {\n        return this._extScope.scopeCode(this._values);\n    }\n    _def(varKind, nameOrPrefix, rhs, constant) {\n        const name = this._scope.toName(nameOrPrefix);\n        if (rhs !== undefined && constant)\n            this._constants[name.str] = rhs;\n        this._leafNode(new Def(varKind, name, rhs));\n        return name;\n    }\n    // `const` declaration (`var` in es5 mode)\n    const(nameOrPrefix, rhs, _constant) {\n        return this._def(scope_1.varKinds.const, nameOrPrefix, rhs, _constant);\n    }\n    // `let` declaration with optional assignment (`var` in es5 mode)\n    let(nameOrPrefix, rhs, _constant) {\n        return this._def(scope_1.varKinds.let, nameOrPrefix, rhs, _constant);\n    }\n    // `var` declaration with optional assignment\n    var(nameOrPrefix, rhs, _constant) {\n        return this._def(scope_1.varKinds.var, nameOrPrefix, rhs, _constant);\n    }\n    // assignment code\n    assign(lhs, rhs, sideEffects) {\n        return this._leafNode(new Assign(lhs, rhs, sideEffects));\n    }\n    // `+=` code\n    add(lhs, rhs) {\n        return this._leafNode(new AssignOp(lhs, exports.operators.ADD, rhs));\n    }\n    // appends passed SafeExpr to code or executes Block\n    code(c) {\n        if (typeof c == \"function\")\n            c();\n        else if (c !== code_1.nil)\n            this._leafNode(new AnyCode(c));\n        return this;\n    }\n    // returns code for object literal for the passed argument list of key-value pairs\n    object(...keyValues) {\n        const code = [\"{\"];\n        for (const [key, value] of keyValues) {\n            if (code.length > 1)\n                code.push(\",\");\n            code.push(key);\n            if (key !== value || this.opts.es5) {\n                code.push(\":\");\n                (0, code_1.addCodeArg)(code, value);\n            }\n        }\n        code.push(\"}\");\n        return new code_1._Code(code);\n    }\n    // `if` clause (or statement if `thenBody` and, optionally, `elseBody` are passed)\n    if(condition, thenBody, elseBody) {\n        this._blockNode(new If(condition));\n        if (thenBody && elseBody) {\n            this.code(thenBody).else().code(elseBody).endIf();\n        }\n        else if (thenBody) {\n            this.code(thenBody).endIf();\n        }\n        else if (elseBody) {\n            throw new Error('CodeGen: \"else\" body without \"then\" body');\n        }\n        return this;\n    }\n    // `else if` clause - invalid without `if` or after `else` clauses\n    elseIf(condition) {\n        return this._elseNode(new If(condition));\n    }\n    // `else` clause - only valid after `if` or `else if` clauses\n    else() {\n        return this._elseNode(new Else());\n    }\n    // end `if` statement (needed if gen.if was used only with condition)\n    endIf() {\n        return this._endBlockNode(If, Else);\n    }\n    _for(node, forBody) {\n        this._blockNode(node);\n        if (forBody)\n            this.code(forBody).endFor();\n        return this;\n    }\n    // a generic `for` clause (or statement if `forBody` is passed)\n    for(iteration, forBody) {\n        return this._for(new ForLoop(iteration), forBody);\n    }\n    // `for` statement for a range of values\n    forRange(nameOrPrefix, from, to, forBody, varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.let) {\n        const name = this._scope.toName(nameOrPrefix);\n        return this._for(new ForRange(varKind, name, from, to), () => forBody(name));\n    }\n    // `for-of` statement (in es5 mode replace with a normal for loop)\n    forOf(nameOrPrefix, iterable, forBody, varKind = scope_1.varKinds.const) {\n        const name = this._scope.toName(nameOrPrefix);\n        if (this.opts.es5) {\n            const arr = iterable instanceof code_1.Name ? iterable : this.var(\"_arr\", iterable);\n            return this.forRange(\"_i\", 0, (0, code_1._) `${arr}.length`, (i) => {\n                this.var(name, (0, code_1._) `${arr}[${i}]`);\n                forBody(name);\n            });\n        }\n        return this._for(new ForIter(\"of\", varKind, name, iterable), () => forBody(name));\n    }\n    // `for-in` statement.\n    // With option `ownProperties` replaced with a `for-of` loop for object keys\n    forIn(nameOrPrefix, obj, forBody, varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.const) {\n        if (this.opts.ownProperties) {\n            return this.forOf(nameOrPrefix, (0, code_1._) `Object.keys(${obj})`, forBody);\n        }\n        const name = this._scope.toName(nameOrPrefix);\n        return this._for(new ForIter(\"in\", varKind, name, obj), () => forBody(name));\n    }\n    // end `for` loop\n    endFor() {\n        return this._endBlockNode(For);\n    }\n    // `label` statement\n    label(label) {\n        return this._leafNode(new Label(label));\n    }\n    // `break` statement\n    break(label) {\n        return this._leafNode(new Break(label));\n    }\n    // `return` statement\n    return(value) {\n        const node = new Return();\n        this._blockNode(node);\n        this.code(value);\n        if (node.nodes.length !== 1)\n            throw new Error('CodeGen: \"return\" should have one node');\n        return this._endBlockNode(Return);\n    }\n    // `try` statement\n    try(tryBody, catchCode, finallyCode) {\n        if (!catchCode && !finallyCode)\n            throw new Error('CodeGen: \"try\" without \"catch\" and \"finally\"');\n        const node = new Try();\n        this._blockNode(node);\n        this.code(tryBody);\n        if (catchCode) {\n            const error = this.name(\"e\");\n            this._currNode = node.catch = new Catch(error);\n            catchCode(error);\n        }\n        if (finallyCode) {\n            this._currNode = node.finally = new Finally();\n            this.code(finallyCode);\n        }\n        return this._endBlockNode(Catch, Finally);\n    }\n    // `throw` statement\n    throw(error) {\n        return this._leafNode(new Throw(error));\n    }\n    // start self-balancing block\n    block(body, nodeCount) {\n        this._blockStarts.push(this._nodes.length);\n        if (body)\n            this.code(body).endBlock(nodeCount);\n        return this;\n    }\n    // end the current self-balancing block\n    endBlock(nodeCount) {\n        const len = this._blockStarts.pop();\n        if (len === undefined)\n            throw new Error(\"CodeGen: not in self-balancing block\");\n        const toClose = this._nodes.length - len;\n        if (toClose < 0 || (nodeCount !== undefined && toClose !== nodeCount)) {\n            throw new Error(`CodeGen: wrong number of nodes: ${toClose} vs ${nodeCount} expected`);\n        }\n        this._nodes.length = len;\n        return this;\n    }\n    // `function` heading (or definition if funcBody is passed)\n    func(name, args = code_1.nil, async, funcBody) {\n        this._blockNode(new Func(name, args, async));\n        if (funcBody)\n            this.code(funcBody).endFunc();\n        return this;\n    }\n    // end function definition\n    endFunc() {\n        return this._endBlockNode(Func);\n    }\n    optimize(n = 1) {\n        while (n-- > 0) {\n            this._root.optimizeNodes();\n            this._root.optimizeNames(this._root.names, this._constants);\n        }\n    }\n    _leafNode(node) {\n        this._currNode.nodes.push(node);\n        return this;\n    }\n    _blockNode(node) {\n        this._currNode.nodes.push(node);\n        this._nodes.push(node);\n    }\n    _endBlockNode(N1, N2) {\n        const n = this._currNode;\n        if (n instanceof N1 || (N2 && n instanceof N2)) {\n            this._nodes.pop();\n            return this;\n        }\n        throw new Error(`CodeGen: not in block \"${N2 ? `${N1.kind}/${N2.kind}` : N1.kind}\"`);\n    }\n    _elseNode(node) {\n        const n = this._currNode;\n        if (!(n instanceof If)) {\n            throw new Error('CodeGen: \"else\" without \"if\"');\n        }\n        this._currNode = n.else = node;\n        return this;\n    }\n    get _root() {\n        return this._nodes[0];\n    }\n    get _currNode() {\n        const ns = this._nodes;\n        return ns[ns.length - 1];\n    }\n    set _currNode(node) {\n        const ns = this._nodes;\n        ns[ns.length - 1] = node;\n    }\n}\nexports.CodeGen = CodeGen;\nfunction addNames(names, from) {\n    for (const n in from)\n        names[n] = (names[n] || 0) + (from[n] || 0);\n    return names;\n}\nfunction addExprNames(names, from) {\n    return from instanceof code_1._CodeOrName ? addNames(names, from.names) : names;\n}\nfunction optimizeExpr(expr, names, constants) {\n    if (expr instanceof code_1.Name)\n        return replaceName(expr);\n    if (!canOptimize(expr))\n        return expr;\n    return new code_1._Code(expr._items.reduce((items, c) => {\n        if (c instanceof code_1.Name)\n            c = replaceName(c);\n        if (c instanceof code_1._Code)\n            items.push(...c._items);\n        else\n            items.push(c);\n        return items;\n    }, []));\n    function replaceName(n) {\n        const c = constants[n.str];\n        if (c === undefined || names[n.str] !== 1)\n            return n;\n        delete names[n.str];\n        return c;\n    }\n    function canOptimize(e) {\n        return (e instanceof code_1._Code &&\n            e._items.some((c) => c instanceof code_1.Name && names[c.str] === 1 && constants[c.str] !== undefined));\n    }\n}\nfunction subtractNames(names, from) {\n    for (const n in from)\n        names[n] = (names[n] || 0) - (from[n] || 0);\n}\nfunction not(x) {\n    return typeof x == \"boolean\" || typeof x == \"number\" || x === null ? !x : (0, code_1._) `!${par(x)}`;\n}\nexports.not = not;\nconst andCode = mappend(exports.operators.AND);\n// boolean AND (&&) expression with the passed arguments\nfunction and(...args) {\n    return args.reduce(andCode);\n}\nexports.and = and;\nconst orCode = mappend(exports.operators.OR);\n// boolean OR (||) expression with the passed arguments\nfunction or(...args) {\n    return args.reduce(orCode);\n}\nexports.or = or;\nfunction mappend(op) {\n    return (x, y) => (x === code_1.nil ? y : y === code_1.nil ? x : (0, code_1._) `${par(x)} ${op} ${par(y)}`);\n}\nfunction par(x) {\n    return x instanceof code_1.Name ? x : (0, code_1._) `(${x})`;\n}\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,EAAE,GAAGF,OAAO,CAACG,GAAG,GAAGH,OAAO,CAACI,GAAG,GAAGJ,OAAO,CAACK,OAAO,GAAGL,OAAO,CAACM,SAAS,GAAGN,OAAO,CAACO,QAAQ,GAAGP,OAAO,CAACQ,cAAc,GAAGR,OAAO,CAACS,UAAU,GAAGT,OAAO,CAACU,KAAK,GAAGV,OAAO,CAACW,IAAI,GAAGX,OAAO,CAACY,UAAU,GAAGZ,OAAO,CAACa,SAAS,GAAGb,OAAO,CAACc,WAAW,GAAGd,OAAO,CAACe,GAAG,GAAGf,OAAO,CAACgB,SAAS,GAAGhB,OAAO,CAACiB,GAAG,GAAGjB,OAAO,CAACkB,CAAC,GAAG,KAAK,CAAC;AAChT,MAAMC,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAMC,OAAO,GAAGD,OAAO,CAAC,SAAS,CAAC;AAClC,IAAIE,MAAM,GAAGF,OAAO,CAAC,QAAQ,CAAC;AAC9BtB,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,GAAG,EAAE;EAAEuB,UAAU,EAAE,IAAI;EAAEC,GAAG,EAAE,YAAY;IAAE,OAAOF,MAAM,CAACJ,CAAC;EAAE;AAAE,CAAC,CAAC;AAChGpB,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,KAAK,EAAE;EAAEuB,UAAU,EAAE,IAAI;EAAEC,GAAG,EAAE,YAAY;IAAE,OAAOF,MAAM,CAACL,GAAG;EAAE;AAAE,CAAC,CAAC;AACpGnB,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,WAAW,EAAE;EAAEuB,UAAU,EAAE,IAAI;EAAEC,GAAG,EAAE,YAAY;IAAE,OAAOF,MAAM,CAACN,SAAS;EAAE;AAAE,CAAC,CAAC;AAChHlB,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,KAAK,EAAE;EAAEuB,UAAU,EAAE,IAAI;EAAEC,GAAG,EAAE,YAAY;IAAE,OAAOF,MAAM,CAACP,GAAG;EAAE;AAAE,CAAC,CAAC;AACpGjB,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,aAAa,EAAE;EAAEuB,UAAU,EAAE,IAAI;EAAEC,GAAG,EAAE,YAAY;IAAE,OAAOF,MAAM,CAACR,WAAW;EAAE;AAAE,CAAC,CAAC;AACpHhB,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,WAAW,EAAE;EAAEuB,UAAU,EAAE,IAAI;EAAEC,GAAG,EAAE,YAAY;IAAE,OAAOF,MAAM,CAACT,SAAS;EAAE;AAAE,CAAC,CAAC;AAChHf,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEuB,UAAU,EAAE,IAAI;EAAEC,GAAG,EAAE,YAAY;IAAE,OAAOF,MAAM,CAACV,UAAU;EAAE;AAAE,CAAC,CAAC;AAClHd,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,MAAM,EAAE;EAAEuB,UAAU,EAAE,IAAI;EAAEC,GAAG,EAAE,YAAY;IAAE,OAAOF,MAAM,CAACX,IAAI;EAAE;AAAE,CAAC,CAAC;AACtG,IAAIc,OAAO,GAAGL,OAAO,CAAC,SAAS,CAAC;AAChCtB,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,OAAO,EAAE;EAAEuB,UAAU,EAAE,IAAI;EAAEC,GAAG,EAAE,YAAY;IAAE,OAAOC,OAAO,CAACf,KAAK;EAAE;AAAE,CAAC,CAAC;AACzGZ,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEuB,UAAU,EAAE,IAAI;EAAEC,GAAG,EAAE,YAAY;IAAE,OAAOC,OAAO,CAAChB,UAAU;EAAE;AAAE,CAAC,CAAC;AACnHX,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,gBAAgB,EAAE;EAAEuB,UAAU,EAAE,IAAI;EAAEC,GAAG,EAAE,YAAY;IAAE,OAAOC,OAAO,CAACjB,cAAc;EAAE;AAAE,CAAC,CAAC;AAC3HV,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,UAAU,EAAE;EAAEuB,UAAU,EAAE,IAAI;EAAEC,GAAG,EAAE,YAAY;IAAE,OAAOC,OAAO,CAAClB,QAAQ;EAAE;AAAE,CAAC,CAAC;AAC/GP,OAAO,CAACM,SAAS,GAAG;EAChBoB,EAAE,EAAE,IAAIP,MAAM,CAACQ,KAAK,CAAC,GAAG,CAAC;EACzBC,GAAG,EAAE,IAAIT,MAAM,CAACQ,KAAK,CAAC,IAAI,CAAC;EAC3BE,EAAE,EAAE,IAAIV,MAAM,CAACQ,KAAK,CAAC,GAAG,CAAC;EACzBG,GAAG,EAAE,IAAIX,MAAM,CAACQ,KAAK,CAAC,IAAI,CAAC;EAC3BI,EAAE,EAAE,IAAIZ,MAAM,CAACQ,KAAK,CAAC,KAAK,CAAC;EAC3BK,GAAG,EAAE,IAAIb,MAAM,CAACQ,KAAK,CAAC,KAAK,CAAC;EAC5BM,GAAG,EAAE,IAAId,MAAM,CAACQ,KAAK,CAAC,GAAG,CAAC;EAC1BO,EAAE,EAAE,IAAIf,MAAM,CAACQ,KAAK,CAAC,IAAI,CAAC;EAC1BQ,GAAG,EAAE,IAAIhB,MAAM,CAACQ,KAAK,CAAC,IAAI,CAAC;EAC3BS,GAAG,EAAE,IAAIjB,MAAM,CAACQ,KAAK,CAAC,GAAG;AAC7B,CAAC;AACD,MAAMU,IAAI,CAAC;EACPC,aAAa,GAAG;IACZ,OAAO,IAAI;EACf;EACAC,aAAa,CAACC,MAAM,EAAEC,UAAU,EAAE;IAC9B,OAAO,IAAI;EACf;AACJ;AACA,MAAMC,GAAG,SAASL,IAAI,CAAC;EACnBM,WAAW,CAACC,OAAO,EAAEC,IAAI,EAAEC,GAAG,EAAE;IAC5B,KAAK,EAAE;IACP,IAAI,CAACF,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,GAAG,GAAGA,GAAG;EAClB;EACAC,MAAM,CAAC;IAAEC,GAAG;IAAEC;EAAG,CAAC,EAAE;IAChB,MAAML,OAAO,GAAGI,GAAG,GAAG3B,OAAO,CAACd,QAAQ,CAAC2C,GAAG,GAAG,IAAI,CAACN,OAAO;IACzD,MAAME,GAAG,GAAG,IAAI,CAACA,GAAG,KAAKK,SAAS,GAAG,EAAE,GAAI,MAAK,IAAI,CAACL,GAAI,EAAC;IAC1D,OAAQ,GAAEF,OAAQ,IAAG,IAAI,CAACC,IAAK,GAAEC,GAAI,GAAE,GAAGG,EAAE;EAChD;EACAV,aAAa,CAACa,KAAK,EAAEC,SAAS,EAAE;IAC5B,IAAI,CAACD,KAAK,CAAC,IAAI,CAACP,IAAI,CAAC5B,GAAG,CAAC,EACrB;IACJ,IAAI,IAAI,CAAC6B,GAAG,EACR,IAAI,CAACA,GAAG,GAAGQ,YAAY,CAAC,IAAI,CAACR,GAAG,EAAEM,KAAK,EAAEC,SAAS,CAAC;IACvD,OAAO,IAAI;EACf;EACA,IAAID,KAAK,GAAG;IACR,OAAO,IAAI,CAACN,GAAG,YAAY3B,MAAM,CAACoC,WAAW,GAAG,IAAI,CAACT,GAAG,CAACM,KAAK,GAAG,CAAC,CAAC;EACvE;AACJ;AACA,MAAMI,MAAM,SAASnB,IAAI,CAAC;EACtBM,WAAW,CAACc,GAAG,EAAEX,GAAG,EAAEY,WAAW,EAAE;IAC/B,KAAK,EAAE;IACP,IAAI,CAACD,GAAG,GAAGA,GAAG;IACd,IAAI,CAACX,GAAG,GAAGA,GAAG;IACd,IAAI,CAACY,WAAW,GAAGA,WAAW;EAClC;EACAX,MAAM,CAAC;IAAEE;EAAG,CAAC,EAAE;IACX,OAAQ,GAAE,IAAI,CAACQ,GAAI,MAAK,IAAI,CAACX,GAAI,GAAE,GAAGG,EAAE;EAC5C;EACAV,aAAa,CAACa,KAAK,EAAEC,SAAS,EAAE;IAC5B,IAAI,IAAI,CAACI,GAAG,YAAYtC,MAAM,CAACR,IAAI,IAAI,CAACyC,KAAK,CAAC,IAAI,CAACK,GAAG,CAACxC,GAAG,CAAC,IAAI,CAAC,IAAI,CAACyC,WAAW,EAC5E;IACJ,IAAI,CAACZ,GAAG,GAAGQ,YAAY,CAAC,IAAI,CAACR,GAAG,EAAEM,KAAK,EAAEC,SAAS,CAAC;IACnD,OAAO,IAAI;EACf;EACA,IAAID,KAAK,GAAG;IACR,MAAMA,KAAK,GAAG,IAAI,CAACK,GAAG,YAAYtC,MAAM,CAACR,IAAI,GAAG,CAAC,CAAC,GAAG;MAAE,GAAG,IAAI,CAAC8C,GAAG,CAACL;IAAM,CAAC;IAC1E,OAAOO,YAAY,CAACP,KAAK,EAAE,IAAI,CAACN,GAAG,CAAC;EACxC;AACJ;AACA,MAAMc,QAAQ,SAASJ,MAAM,CAAC;EAC1Bb,WAAW,CAACc,GAAG,EAAEI,EAAE,EAAEf,GAAG,EAAEY,WAAW,EAAE;IACnC,KAAK,CAACD,GAAG,EAAEX,GAAG,EAAEY,WAAW,CAAC;IAC5B,IAAI,CAACG,EAAE,GAAGA,EAAE;EAChB;EACAd,MAAM,CAAC;IAAEE;EAAG,CAAC,EAAE;IACX,OAAQ,GAAE,IAAI,CAACQ,GAAI,IAAG,IAAI,CAACI,EAAG,KAAI,IAAI,CAACf,GAAI,GAAE,GAAGG,EAAE;EACtD;AACJ;AACA,MAAMa,KAAK,SAASzB,IAAI,CAAC;EACrBM,WAAW,CAACoB,KAAK,EAAE;IACf,KAAK,EAAE;IACP,IAAI,CAACA,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACX,KAAK,GAAG,CAAC,CAAC;EACnB;EACAL,MAAM,CAAC;IAAEE;EAAG,CAAC,EAAE;IACX,OAAQ,GAAE,IAAI,CAACc,KAAM,GAAE,GAAGd,EAAE;EAChC;AACJ;AACA,MAAMe,KAAK,SAAS3B,IAAI,CAAC;EACrBM,WAAW,CAACoB,KAAK,EAAE;IACf,KAAK,EAAE;IACP,IAAI,CAACA,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACX,KAAK,GAAG,CAAC,CAAC;EACnB;EACAL,MAAM,CAAC;IAAEE;EAAG,CAAC,EAAE;IACX,MAAMc,KAAK,GAAG,IAAI,CAACA,KAAK,GAAI,IAAG,IAAI,CAACA,KAAM,EAAC,GAAG,EAAE;IAChD,OAAQ,QAAOA,KAAM,GAAE,GAAGd,EAAE;EAChC;AACJ;AACA,MAAMgB,KAAK,SAAS5B,IAAI,CAAC;EACrBM,WAAW,CAACuB,KAAK,EAAE;IACf,KAAK,EAAE;IACP,IAAI,CAACA,KAAK,GAAGA,KAAK;EACtB;EACAnB,MAAM,CAAC;IAAEE;EAAG,CAAC,EAAE;IACX,OAAQ,SAAQ,IAAI,CAACiB,KAAM,GAAE,GAAGjB,EAAE;EACtC;EACA,IAAIG,KAAK,GAAG;IACR,OAAO,IAAI,CAACc,KAAK,CAACd,KAAK;EAC3B;AACJ;AACA,MAAMe,OAAO,SAAS9B,IAAI,CAAC;EACvBM,WAAW,CAACyB,IAAI,EAAE;IACd,KAAK,EAAE;IACP,IAAI,CAACA,IAAI,GAAGA,IAAI;EACpB;EACArB,MAAM,CAAC;IAAEE;EAAG,CAAC,EAAE;IACX,OAAQ,GAAE,IAAI,CAACmB,IAAK,GAAE,GAAGnB,EAAE;EAC/B;EACAX,aAAa,GAAG;IACZ,OAAQ,GAAE,IAAI,CAAC8B,IAAK,EAAC,GAAG,IAAI,GAAGjB,SAAS;EAC5C;EACAZ,aAAa,CAACa,KAAK,EAAEC,SAAS,EAAE;IAC5B,IAAI,CAACe,IAAI,GAAGd,YAAY,CAAC,IAAI,CAACc,IAAI,EAAEhB,KAAK,EAAEC,SAAS,CAAC;IACrD,OAAO,IAAI;EACf;EACA,IAAID,KAAK,GAAG;IACR,OAAO,IAAI,CAACgB,IAAI,YAAYjD,MAAM,CAACoC,WAAW,GAAG,IAAI,CAACa,IAAI,CAAChB,KAAK,GAAG,CAAC,CAAC;EACzE;AACJ;AACA,MAAMiB,UAAU,SAAShC,IAAI,CAAC;EAC1BM,WAAW,CAAC2B,KAAK,GAAG,EAAE,EAAE;IACpB,KAAK,EAAE;IACP,IAAI,CAACA,KAAK,GAAGA,KAAK;EACtB;EACAvB,MAAM,CAACwB,IAAI,EAAE;IACT,OAAO,IAAI,CAACD,KAAK,CAACE,MAAM,CAAC,CAACJ,IAAI,EAAEK,CAAC,KAAKL,IAAI,GAAGK,CAAC,CAAC1B,MAAM,CAACwB,IAAI,CAAC,EAAE,EAAE,CAAC;EACpE;EACAjC,aAAa,GAAG;IACZ,MAAM;MAAEgC;IAAM,CAAC,GAAG,IAAI;IACtB,IAAII,CAAC,GAAGJ,KAAK,CAACK,MAAM;IACpB,OAAOD,CAAC,EAAE,EAAE;MACR,MAAMD,CAAC,GAAGH,KAAK,CAACI,CAAC,CAAC,CAACpC,aAAa,EAAE;MAClC,IAAIsC,KAAK,CAACC,OAAO,CAACJ,CAAC,CAAC,EAChBH,KAAK,CAACQ,MAAM,CAACJ,CAAC,EAAE,CAAC,EAAE,GAAGD,CAAC,CAAC,CAAC,KACxB,IAAIA,CAAC,EACNH,KAAK,CAACI,CAAC,CAAC,GAAGD,CAAC,CAAC,KAEbH,KAAK,CAACQ,MAAM,CAACJ,CAAC,EAAE,CAAC,CAAC;IAC1B;IACA,OAAOJ,KAAK,CAACK,MAAM,GAAG,CAAC,GAAG,IAAI,GAAGxB,SAAS;EAC9C;EACAZ,aAAa,CAACa,KAAK,EAAEC,SAAS,EAAE;IAC5B,MAAM;MAAEiB;IAAM,CAAC,GAAG,IAAI;IACtB,IAAII,CAAC,GAAGJ,KAAK,CAACK,MAAM;IACpB,OAAOD,CAAC,EAAE,EAAE;MACR;MACA,MAAMD,CAAC,GAAGH,KAAK,CAACI,CAAC,CAAC;MAClB,IAAID,CAAC,CAAClC,aAAa,CAACa,KAAK,EAAEC,SAAS,CAAC,EACjC;MACJ0B,aAAa,CAAC3B,KAAK,EAAEqB,CAAC,CAACrB,KAAK,CAAC;MAC7BkB,KAAK,CAACQ,MAAM,CAACJ,CAAC,EAAE,CAAC,CAAC;IACtB;IACA,OAAOJ,KAAK,CAACK,MAAM,GAAG,CAAC,GAAG,IAAI,GAAGxB,SAAS;EAC9C;EACA,IAAIC,KAAK,GAAG;IACR,OAAO,IAAI,CAACkB,KAAK,CAACE,MAAM,CAAC,CAACpB,KAAK,EAAEqB,CAAC,KAAKO,QAAQ,CAAC5B,KAAK,EAAEqB,CAAC,CAACrB,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;EACxE;AACJ;AACA,MAAM6B,SAAS,SAASZ,UAAU,CAAC;EAC/BtB,MAAM,CAACwB,IAAI,EAAE;IACT,OAAO,GAAG,GAAGA,IAAI,CAACtB,EAAE,GAAG,KAAK,CAACF,MAAM,CAACwB,IAAI,CAAC,GAAG,GAAG,GAAGA,IAAI,CAACtB,EAAE;EAC7D;AACJ;AACA,MAAMiC,IAAI,SAASb,UAAU,CAAC;AAE9B,MAAMc,IAAI,SAASF,SAAS,CAAC;AAE7BE,IAAI,CAACC,IAAI,GAAG,MAAM;AAClB,MAAMC,EAAE,SAASJ,SAAS,CAAC;EACvBtC,WAAW,CAAC2C,SAAS,EAAEhB,KAAK,EAAE;IAC1B,KAAK,CAACA,KAAK,CAAC;IACZ,IAAI,CAACgB,SAAS,GAAGA,SAAS;EAC9B;EACAvC,MAAM,CAACwB,IAAI,EAAE;IACT,IAAIH,IAAI,GAAI,MAAK,IAAI,CAACkB,SAAU,GAAE,GAAG,KAAK,CAACvC,MAAM,CAACwB,IAAI,CAAC;IACvD,IAAI,IAAI,CAACgB,IAAI,EACTnB,IAAI,IAAI,OAAO,GAAG,IAAI,CAACmB,IAAI,CAACxC,MAAM,CAACwB,IAAI,CAAC;IAC5C,OAAOH,IAAI;EACf;EACA9B,aAAa,GAAG;IACZ,KAAK,CAACA,aAAa,EAAE;IACrB,MAAMkD,IAAI,GAAG,IAAI,CAACF,SAAS;IAC3B,IAAIE,IAAI,KAAK,IAAI,EACb,OAAO,IAAI,CAAClB,KAAK,CAAC,CAAC;IACvB,IAAImB,CAAC,GAAG,IAAI,CAACF,IAAI;IACjB,IAAIE,CAAC,EAAE;MACH,MAAMC,EAAE,GAAGD,CAAC,CAACnD,aAAa,EAAE;MAC5BmD,CAAC,GAAG,IAAI,CAACF,IAAI,GAAGX,KAAK,CAACC,OAAO,CAACa,EAAE,CAAC,GAAG,IAAIP,IAAI,CAACO,EAAE,CAAC,GAAGA,EAAE;IACzD;IACA,IAAID,CAAC,EAAE;MACH,IAAID,IAAI,KAAK,KAAK,EACd,OAAOC,CAAC,YAAYJ,EAAE,GAAGI,CAAC,GAAGA,CAAC,CAACnB,KAAK;MACxC,IAAI,IAAI,CAACA,KAAK,CAACK,MAAM,EACjB,OAAO,IAAI;MACf,OAAO,IAAIU,EAAE,CAACjF,GAAG,CAACoF,IAAI,CAAC,EAAEC,CAAC,YAAYJ,EAAE,GAAG,CAACI,CAAC,CAAC,GAAGA,CAAC,CAACnB,KAAK,CAAC;IAC7D;IACA,IAAIkB,IAAI,KAAK,KAAK,IAAI,CAAC,IAAI,CAAClB,KAAK,CAACK,MAAM,EACpC,OAAOxB,SAAS;IACpB,OAAO,IAAI;EACf;EACAZ,aAAa,CAACa,KAAK,EAAEC,SAAS,EAAE;IAC5B,IAAIsC,EAAE;IACN,IAAI,CAACJ,IAAI,GAAG,CAACI,EAAE,GAAG,IAAI,CAACJ,IAAI,MAAM,IAAI,IAAII,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACpD,aAAa,CAACa,KAAK,EAAEC,SAAS,CAAC;IACpG,IAAI,EAAE,KAAK,CAACd,aAAa,CAACa,KAAK,EAAEC,SAAS,CAAC,IAAI,IAAI,CAACkC,IAAI,CAAC,EACrD;IACJ,IAAI,CAACD,SAAS,GAAGhC,YAAY,CAAC,IAAI,CAACgC,SAAS,EAAElC,KAAK,EAAEC,SAAS,CAAC;IAC/D,OAAO,IAAI;EACf;EACA,IAAID,KAAK,GAAG;IACR,MAAMA,KAAK,GAAG,KAAK,CAACA,KAAK;IACzBO,YAAY,CAACP,KAAK,EAAE,IAAI,CAACkC,SAAS,CAAC;IACnC,IAAI,IAAI,CAACC,IAAI,EACTP,QAAQ,CAAC5B,KAAK,EAAE,IAAI,CAACmC,IAAI,CAACnC,KAAK,CAAC;IACpC,OAAOA,KAAK;EAChB;AACJ;AACAiC,EAAE,CAACD,IAAI,GAAG,IAAI;AACd,MAAMQ,GAAG,SAASX,SAAS,CAAC;AAE5BW,GAAG,CAACR,IAAI,GAAG,KAAK;AAChB,MAAMS,OAAO,SAASD,GAAG,CAAC;EACtBjD,WAAW,CAACmD,SAAS,EAAE;IACnB,KAAK,EAAE;IACP,IAAI,CAACA,SAAS,GAAGA,SAAS;EAC9B;EACA/C,MAAM,CAACwB,IAAI,EAAE;IACT,OAAQ,OAAM,IAAI,CAACuB,SAAU,GAAE,GAAG,KAAK,CAAC/C,MAAM,CAACwB,IAAI,CAAC;EACxD;EACAhC,aAAa,CAACa,KAAK,EAAEC,SAAS,EAAE;IAC5B,IAAI,CAAC,KAAK,CAACd,aAAa,CAACa,KAAK,EAAEC,SAAS,CAAC,EACtC;IACJ,IAAI,CAACyC,SAAS,GAAGxC,YAAY,CAAC,IAAI,CAACwC,SAAS,EAAE1C,KAAK,EAAEC,SAAS,CAAC;IAC/D,OAAO,IAAI;EACf;EACA,IAAID,KAAK,GAAG;IACR,OAAO4B,QAAQ,CAAC,KAAK,CAAC5B,KAAK,EAAE,IAAI,CAAC0C,SAAS,CAAC1C,KAAK,CAAC;EACtD;AACJ;AACA,MAAM2C,QAAQ,SAASH,GAAG,CAAC;EACvBjD,WAAW,CAACC,OAAO,EAAEC,IAAI,EAAEmD,IAAI,EAAEC,EAAE,EAAE;IACjC,KAAK,EAAE;IACP,IAAI,CAACrD,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACmD,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,EAAE,GAAGA,EAAE;EAChB;EACAlD,MAAM,CAACwB,IAAI,EAAE;IACT,MAAM3B,OAAO,GAAG2B,IAAI,CAACvB,GAAG,GAAG3B,OAAO,CAACd,QAAQ,CAAC2C,GAAG,GAAG,IAAI,CAACN,OAAO;IAC9D,MAAM;MAAEC,IAAI;MAAEmD,IAAI;MAAEC;IAAG,CAAC,GAAG,IAAI;IAC/B,OAAQ,OAAMrD,OAAQ,IAAGC,IAAK,IAAGmD,IAAK,KAAInD,IAAK,IAAGoD,EAAG,KAAIpD,IAAK,KAAI,GAAG,KAAK,CAACE,MAAM,CAACwB,IAAI,CAAC;EAC3F;EACA,IAAInB,KAAK,GAAG;IACR,MAAMA,KAAK,GAAGO,YAAY,CAAC,KAAK,CAACP,KAAK,EAAE,IAAI,CAAC4C,IAAI,CAAC;IAClD,OAAOrC,YAAY,CAACP,KAAK,EAAE,IAAI,CAAC6C,EAAE,CAAC;EACvC;AACJ;AACA,MAAMC,OAAO,SAASN,GAAG,CAAC;EACtBjD,WAAW,CAACwD,IAAI,EAAEvD,OAAO,EAAEC,IAAI,EAAEuD,QAAQ,EAAE;IACvC,KAAK,EAAE;IACP,IAAI,CAACD,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACvD,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACuD,QAAQ,GAAGA,QAAQ;EAC5B;EACArD,MAAM,CAACwB,IAAI,EAAE;IACT,OAAQ,OAAM,IAAI,CAAC3B,OAAQ,IAAG,IAAI,CAACC,IAAK,IAAG,IAAI,CAACsD,IAAK,IAAG,IAAI,CAACC,QAAS,GAAE,GAAG,KAAK,CAACrD,MAAM,CAACwB,IAAI,CAAC;EACjG;EACAhC,aAAa,CAACa,KAAK,EAAEC,SAAS,EAAE;IAC5B,IAAI,CAAC,KAAK,CAACd,aAAa,CAACa,KAAK,EAAEC,SAAS,CAAC,EACtC;IACJ,IAAI,CAAC+C,QAAQ,GAAG9C,YAAY,CAAC,IAAI,CAAC8C,QAAQ,EAAEhD,KAAK,EAAEC,SAAS,CAAC;IAC7D,OAAO,IAAI;EACf;EACA,IAAID,KAAK,GAAG;IACR,OAAO4B,QAAQ,CAAC,KAAK,CAAC5B,KAAK,EAAE,IAAI,CAACgD,QAAQ,CAAChD,KAAK,CAAC;EACrD;AACJ;AACA,MAAMiD,IAAI,SAASpB,SAAS,CAAC;EACzBtC,WAAW,CAACE,IAAI,EAAEyD,IAAI,EAAEC,KAAK,EAAE;IAC3B,KAAK,EAAE;IACP,IAAI,CAAC1D,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACyD,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,KAAK,GAAGA,KAAK;EACtB;EACAxD,MAAM,CAACwB,IAAI,EAAE;IACT,MAAMiC,MAAM,GAAG,IAAI,CAACD,KAAK,GAAG,QAAQ,GAAG,EAAE;IACzC,OAAQ,GAAEC,MAAO,YAAW,IAAI,CAAC3D,IAAK,IAAG,IAAI,CAACyD,IAAK,GAAE,GAAG,KAAK,CAACvD,MAAM,CAACwB,IAAI,CAAC;EAC9E;AACJ;AACA8B,IAAI,CAACjB,IAAI,GAAG,MAAM;AAClB,MAAMqB,MAAM,SAASpC,UAAU,CAAC;EAC5BtB,MAAM,CAACwB,IAAI,EAAE;IACT,OAAO,SAAS,GAAG,KAAK,CAACxB,MAAM,CAACwB,IAAI,CAAC;EACzC;AACJ;AACAkC,MAAM,CAACrB,IAAI,GAAG,QAAQ;AACtB,MAAMsB,GAAG,SAASzB,SAAS,CAAC;EACxBlC,MAAM,CAACwB,IAAI,EAAE;IACT,IAAIH,IAAI,GAAG,KAAK,GAAG,KAAK,CAACrB,MAAM,CAACwB,IAAI,CAAC;IACrC,IAAI,IAAI,CAACoC,KAAK,EACVvC,IAAI,IAAI,IAAI,CAACuC,KAAK,CAAC5D,MAAM,CAACwB,IAAI,CAAC;IACnC,IAAI,IAAI,CAACqC,OAAO,EACZxC,IAAI,IAAI,IAAI,CAACwC,OAAO,CAAC7D,MAAM,CAACwB,IAAI,CAAC;IACrC,OAAOH,IAAI;EACf;EACA9B,aAAa,GAAG;IACZ,IAAIqD,EAAE,EAAEkB,EAAE;IACV,KAAK,CAACvE,aAAa,EAAE;IACrB,CAACqD,EAAE,GAAG,IAAI,CAACgB,KAAK,MAAM,IAAI,IAAIhB,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACrD,aAAa,EAAE;IACzE,CAACuE,EAAE,GAAG,IAAI,CAACD,OAAO,MAAM,IAAI,IAAIC,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACvE,aAAa,EAAE;IAC3E,OAAO,IAAI;EACf;EACAC,aAAa,CAACa,KAAK,EAAEC,SAAS,EAAE;IAC5B,IAAIsC,EAAE,EAAEkB,EAAE;IACV,KAAK,CAACtE,aAAa,CAACa,KAAK,EAAEC,SAAS,CAAC;IACrC,CAACsC,EAAE,GAAG,IAAI,CAACgB,KAAK,MAAM,IAAI,IAAIhB,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACpD,aAAa,CAACa,KAAK,EAAEC,SAAS,CAAC;IACzF,CAACwD,EAAE,GAAG,IAAI,CAACD,OAAO,MAAM,IAAI,IAAIC,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACtE,aAAa,CAACa,KAAK,EAAEC,SAAS,CAAC;IAC3F,OAAO,IAAI;EACf;EACA,IAAID,KAAK,GAAG;IACR,MAAMA,KAAK,GAAG,KAAK,CAACA,KAAK;IACzB,IAAI,IAAI,CAACuD,KAAK,EACV3B,QAAQ,CAAC5B,KAAK,EAAE,IAAI,CAACuD,KAAK,CAACvD,KAAK,CAAC;IACrC,IAAI,IAAI,CAACwD,OAAO,EACZ5B,QAAQ,CAAC5B,KAAK,EAAE,IAAI,CAACwD,OAAO,CAACxD,KAAK,CAAC;IACvC,OAAOA,KAAK;EAChB;AACJ;AACA,MAAM0D,KAAK,SAAS7B,SAAS,CAAC;EAC1BtC,WAAW,CAACuB,KAAK,EAAE;IACf,KAAK,EAAE;IACP,IAAI,CAACA,KAAK,GAAGA,KAAK;EACtB;EACAnB,MAAM,CAACwB,IAAI,EAAE;IACT,OAAQ,SAAQ,IAAI,CAACL,KAAM,GAAE,GAAG,KAAK,CAACnB,MAAM,CAACwB,IAAI,CAAC;EACtD;AACJ;AACAuC,KAAK,CAAC1B,IAAI,GAAG,OAAO;AACpB,MAAM2B,OAAO,SAAS9B,SAAS,CAAC;EAC5BlC,MAAM,CAACwB,IAAI,EAAE;IACT,OAAO,SAAS,GAAG,KAAK,CAACxB,MAAM,CAACwB,IAAI,CAAC;EACzC;AACJ;AACAwC,OAAO,CAAC3B,IAAI,GAAG,SAAS;AACxB,MAAM/E,OAAO,CAAC;EACVsC,WAAW,CAACqE,QAAQ,EAAEzC,IAAI,GAAG,CAAC,CAAC,EAAE;IAC7B,IAAI,CAAC0C,OAAO,GAAG,CAAC,CAAC;IACjB,IAAI,CAACC,YAAY,GAAG,EAAE;IACtB,IAAI,CAACzE,UAAU,GAAG,CAAC,CAAC;IACpB,IAAI,CAAC8B,IAAI,GAAG;MAAE,GAAGA,IAAI;MAAEtB,EAAE,EAAEsB,IAAI,CAAC4C,KAAK,GAAG,IAAI,GAAG;IAAG,CAAC;IACnD,IAAI,CAACC,SAAS,GAAGJ,QAAQ;IACzB,IAAI,CAACK,MAAM,GAAG,IAAIhG,OAAO,CAACX,KAAK,CAAC;MAAE4G,MAAM,EAAEN;IAAS,CAAC,CAAC;IACrD,IAAI,CAACO,MAAM,GAAG,CAAC,IAAIrC,IAAI,EAAE,CAAC;EAC9B;EACAsC,QAAQ,GAAG;IACP,OAAO,IAAI,CAACC,KAAK,CAAC1E,MAAM,CAAC,IAAI,CAACwB,IAAI,CAAC;EACvC;EACA;EACA1B,IAAI,CAAC6E,MAAM,EAAE;IACT,OAAO,IAAI,CAACL,MAAM,CAACxE,IAAI,CAAC6E,MAAM,CAAC;EACnC;EACA;EACAC,SAAS,CAACD,MAAM,EAAE;IACd,OAAO,IAAI,CAACN,SAAS,CAACvE,IAAI,CAAC6E,MAAM,CAAC;EACtC;EACA;EACAE,UAAU,CAACC,YAAY,EAAE5H,KAAK,EAAE;IAC5B,MAAM4C,IAAI,GAAG,IAAI,CAACuE,SAAS,CAACnH,KAAK,CAAC4H,YAAY,EAAE5H,KAAK,CAAC;IACtD,MAAM6H,EAAE,GAAG,IAAI,CAACb,OAAO,CAACpE,IAAI,CAAC6E,MAAM,CAAC,KAAK,IAAI,CAACT,OAAO,CAACpE,IAAI,CAAC6E,MAAM,CAAC,GAAG,IAAIK,GAAG,EAAE,CAAC;IAC/ED,EAAE,CAACE,GAAG,CAACnF,IAAI,CAAC;IACZ,OAAOA,IAAI;EACf;EACAoF,aAAa,CAACP,MAAM,EAAEQ,QAAQ,EAAE;IAC5B,OAAO,IAAI,CAACd,SAAS,CAACe,QAAQ,CAACT,MAAM,EAAEQ,QAAQ,CAAC;EACpD;EACA;EACA;EACAE,SAAS,CAACT,SAAS,EAAE;IACjB,OAAO,IAAI,CAACP,SAAS,CAACgB,SAAS,CAACT,SAAS,EAAE,IAAI,CAACV,OAAO,CAAC;EAC5D;EACAoB,SAAS,GAAG;IACR,OAAO,IAAI,CAACjB,SAAS,CAACiB,SAAS,CAAC,IAAI,CAACpB,OAAO,CAAC;EACjD;EACAqB,IAAI,CAAC1F,OAAO,EAAE2F,YAAY,EAAEzF,GAAG,EAAE0F,QAAQ,EAAE;IACvC,MAAM3F,IAAI,GAAG,IAAI,CAACwE,MAAM,CAACoB,MAAM,CAACF,YAAY,CAAC;IAC7C,IAAIzF,GAAG,KAAKK,SAAS,IAAIqF,QAAQ,EAC7B,IAAI,CAAC/F,UAAU,CAACI,IAAI,CAAC5B,GAAG,CAAC,GAAG6B,GAAG;IACnC,IAAI,CAAC4F,SAAS,CAAC,IAAIhG,GAAG,CAACE,OAAO,EAAEC,IAAI,EAAEC,GAAG,CAAC,CAAC;IAC3C,OAAOD,IAAI;EACf;EACA;EACA8F,KAAK,CAACJ,YAAY,EAAEzF,GAAG,EAAE8F,SAAS,EAAE;IAChC,OAAO,IAAI,CAACN,IAAI,CAACjH,OAAO,CAACd,QAAQ,CAACoI,KAAK,EAAEJ,YAAY,EAAEzF,GAAG,EAAE8F,SAAS,CAAC;EAC1E;EACA;EACAC,GAAG,CAACN,YAAY,EAAEzF,GAAG,EAAE8F,SAAS,EAAE;IAC9B,OAAO,IAAI,CAACN,IAAI,CAACjH,OAAO,CAACd,QAAQ,CAACsI,GAAG,EAAEN,YAAY,EAAEzF,GAAG,EAAE8F,SAAS,CAAC;EACxE;EACA;EACA1F,GAAG,CAACqF,YAAY,EAAEzF,GAAG,EAAE8F,SAAS,EAAE;IAC9B,OAAO,IAAI,CAACN,IAAI,CAACjH,OAAO,CAACd,QAAQ,CAAC2C,GAAG,EAAEqF,YAAY,EAAEzF,GAAG,EAAE8F,SAAS,CAAC;EACxE;EACA;EACAE,MAAM,CAACrF,GAAG,EAAEX,GAAG,EAAEY,WAAW,EAAE;IAC1B,OAAO,IAAI,CAACgF,SAAS,CAAC,IAAIlF,MAAM,CAACC,GAAG,EAAEX,GAAG,EAAEY,WAAW,CAAC,CAAC;EAC5D;EACA;EACAsE,GAAG,CAACvE,GAAG,EAAEX,GAAG,EAAE;IACV,OAAO,IAAI,CAAC4F,SAAS,CAAC,IAAI9E,QAAQ,CAACH,GAAG,EAAEzD,OAAO,CAACM,SAAS,CAAC8B,GAAG,EAAEU,GAAG,CAAC,CAAC;EACxE;EACA;EACAsB,IAAI,CAAC2E,CAAC,EAAE;IACJ,IAAI,OAAOA,CAAC,IAAI,UAAU,EACtBA,CAAC,EAAE,CAAC,KACH,IAAIA,CAAC,KAAK5H,MAAM,CAACJ,GAAG,EACrB,IAAI,CAAC2H,SAAS,CAAC,IAAIvE,OAAO,CAAC4E,CAAC,CAAC,CAAC;IAClC,OAAO,IAAI;EACf;EACA;EACAC,MAAM,CAAC,GAAGC,SAAS,EAAE;IACjB,MAAM7E,IAAI,GAAG,CAAC,GAAG,CAAC;IAClB,KAAK,MAAM,CAAC8E,GAAG,EAAEjJ,KAAK,CAAC,IAAIgJ,SAAS,EAAE;MAClC,IAAI7E,IAAI,CAACO,MAAM,GAAG,CAAC,EACfP,IAAI,CAAC+E,IAAI,CAAC,GAAG,CAAC;MAClB/E,IAAI,CAAC+E,IAAI,CAACD,GAAG,CAAC;MACd,IAAIA,GAAG,KAAKjJ,KAAK,IAAI,IAAI,CAACsE,IAAI,CAACvB,GAAG,EAAE;QAChCoB,IAAI,CAAC+E,IAAI,CAAC,GAAG,CAAC;QACd,CAAC,CAAC,EAAEhI,MAAM,CAACiI,UAAU,EAAEhF,IAAI,EAAEnE,KAAK,CAAC;MACvC;IACJ;IACAmE,IAAI,CAAC+E,IAAI,CAAC,GAAG,CAAC;IACd,OAAO,IAAIhI,MAAM,CAACQ,KAAK,CAACyC,IAAI,CAAC;EACjC;EACA;EACAiF,EAAE,CAAC/D,SAAS,EAAEgE,QAAQ,EAAEC,QAAQ,EAAE;IAC9B,IAAI,CAACC,UAAU,CAAC,IAAInE,EAAE,CAACC,SAAS,CAAC,CAAC;IAClC,IAAIgE,QAAQ,IAAIC,QAAQ,EAAE;MACtB,IAAI,CAACnF,IAAI,CAACkF,QAAQ,CAAC,CAAC/D,IAAI,EAAE,CAACnB,IAAI,CAACmF,QAAQ,CAAC,CAACE,KAAK,EAAE;IACrD,CAAC,MACI,IAAIH,QAAQ,EAAE;MACf,IAAI,CAAClF,IAAI,CAACkF,QAAQ,CAAC,CAACG,KAAK,EAAE;IAC/B,CAAC,MACI,IAAIF,QAAQ,EAAE;MACf,MAAM,IAAIG,KAAK,CAAC,0CAA0C,CAAC;IAC/D;IACA,OAAO,IAAI;EACf;EACA;EACAC,MAAM,CAACrE,SAAS,EAAE;IACd,OAAO,IAAI,CAACsE,SAAS,CAAC,IAAIvE,EAAE,CAACC,SAAS,CAAC,CAAC;EAC5C;EACA;EACAC,IAAI,GAAG;IACH,OAAO,IAAI,CAACqE,SAAS,CAAC,IAAIzE,IAAI,EAAE,CAAC;EACrC;EACA;EACAsE,KAAK,GAAG;IACJ,OAAO,IAAI,CAACI,aAAa,CAACxE,EAAE,EAAEF,IAAI,CAAC;EACvC;EACA2E,IAAI,CAACC,IAAI,EAAEC,OAAO,EAAE;IAChB,IAAI,CAACR,UAAU,CAACO,IAAI,CAAC;IACrB,IAAIC,OAAO,EACP,IAAI,CAAC5F,IAAI,CAAC4F,OAAO,CAAC,CAACC,MAAM,EAAE;IAC/B,OAAO,IAAI;EACf;EACA;EACAC,GAAG,CAACpE,SAAS,EAAEkE,OAAO,EAAE;IACpB,OAAO,IAAI,CAACF,IAAI,CAAC,IAAIjE,OAAO,CAACC,SAAS,CAAC,EAAEkE,OAAO,CAAC;EACrD;EACA;EACAG,QAAQ,CAAC5B,YAAY,EAAEvC,IAAI,EAAEC,EAAE,EAAE+D,OAAO,EAAEpH,OAAO,GAAG,IAAI,CAAC2B,IAAI,CAACvB,GAAG,GAAG3B,OAAO,CAACd,QAAQ,CAAC2C,GAAG,GAAG7B,OAAO,CAACd,QAAQ,CAACsI,GAAG,EAAE;IAC7G,MAAMhG,IAAI,GAAG,IAAI,CAACwE,MAAM,CAACoB,MAAM,CAACF,YAAY,CAAC;IAC7C,OAAO,IAAI,CAACuB,IAAI,CAAC,IAAI/D,QAAQ,CAACnD,OAAO,EAAEC,IAAI,EAAEmD,IAAI,EAAEC,EAAE,CAAC,EAAE,MAAM+D,OAAO,CAACnH,IAAI,CAAC,CAAC;EAChF;EACA;EACAuH,KAAK,CAAC7B,YAAY,EAAEnC,QAAQ,EAAE4D,OAAO,EAAEpH,OAAO,GAAGvB,OAAO,CAACd,QAAQ,CAACoI,KAAK,EAAE;IACrE,MAAM9F,IAAI,GAAG,IAAI,CAACwE,MAAM,CAACoB,MAAM,CAACF,YAAY,CAAC;IAC7C,IAAI,IAAI,CAAChE,IAAI,CAACvB,GAAG,EAAE;MACf,MAAMqH,GAAG,GAAGjE,QAAQ,YAAYjF,MAAM,CAACR,IAAI,GAAGyF,QAAQ,GAAG,IAAI,CAAClD,GAAG,CAAC,MAAM,EAAEkD,QAAQ,CAAC;MACnF,OAAO,IAAI,CAAC+D,QAAQ,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,EAAEhJ,MAAM,CAACD,CAAC,CAAG,GAAEmJ,GAAI,SAAQ,EAAG3F,CAAC,IAAK;QAChE,IAAI,CAACxB,GAAG,CAACL,IAAI,EAAE,CAAC,CAAC,EAAE1B,MAAM,CAACD,CAAC,CAAG,GAAEmJ,GAAI,IAAG3F,CAAE,GAAE,CAAC;QAC5CsF,OAAO,CAACnH,IAAI,CAAC;MACjB,CAAC,CAAC;IACN;IACA,OAAO,IAAI,CAACiH,IAAI,CAAC,IAAI5D,OAAO,CAAC,IAAI,EAAEtD,OAAO,EAAEC,IAAI,EAAEuD,QAAQ,CAAC,EAAE,MAAM4D,OAAO,CAACnH,IAAI,CAAC,CAAC;EACrF;EACA;EACA;EACAyH,KAAK,CAAC/B,YAAY,EAAEgC,GAAG,EAAEP,OAAO,EAAEpH,OAAO,GAAG,IAAI,CAAC2B,IAAI,CAACvB,GAAG,GAAG3B,OAAO,CAACd,QAAQ,CAAC2C,GAAG,GAAG7B,OAAO,CAACd,QAAQ,CAACoI,KAAK,EAAE;IACvG,IAAI,IAAI,CAACpE,IAAI,CAACiG,aAAa,EAAE;MACzB,OAAO,IAAI,CAACJ,KAAK,CAAC7B,YAAY,EAAE,CAAC,CAAC,EAAEpH,MAAM,CAACD,CAAC,CAAG,eAAcqJ,GAAI,GAAE,EAAEP,OAAO,CAAC;IACjF;IACA,MAAMnH,IAAI,GAAG,IAAI,CAACwE,MAAM,CAACoB,MAAM,CAACF,YAAY,CAAC;IAC7C,OAAO,IAAI,CAACuB,IAAI,CAAC,IAAI5D,OAAO,CAAC,IAAI,EAAEtD,OAAO,EAAEC,IAAI,EAAE0H,GAAG,CAAC,EAAE,MAAMP,OAAO,CAACnH,IAAI,CAAC,CAAC;EAChF;EACA;EACAoH,MAAM,GAAG;IACL,OAAO,IAAI,CAACJ,aAAa,CAACjE,GAAG,CAAC;EAClC;EACA;EACA7B,KAAK,CAACA,KAAK,EAAE;IACT,OAAO,IAAI,CAAC2E,SAAS,CAAC,IAAI5E,KAAK,CAACC,KAAK,CAAC,CAAC;EAC3C;EACA;EACA0G,KAAK,CAAC1G,KAAK,EAAE;IACT,OAAO,IAAI,CAAC2E,SAAS,CAAC,IAAI1E,KAAK,CAACD,KAAK,CAAC,CAAC;EAC3C;EACA;EACA2G,MAAM,CAACzK,KAAK,EAAE;IACV,MAAM8J,IAAI,GAAG,IAAItD,MAAM,EAAE;IACzB,IAAI,CAAC+C,UAAU,CAACO,IAAI,CAAC;IACrB,IAAI,CAAC3F,IAAI,CAACnE,KAAK,CAAC;IAChB,IAAI8J,IAAI,CAACzF,KAAK,CAACK,MAAM,KAAK,CAAC,EACvB,MAAM,IAAI+E,KAAK,CAAC,wCAAwC,CAAC;IAC7D,OAAO,IAAI,CAACG,aAAa,CAACpD,MAAM,CAAC;EACrC;EACA;EACAkE,GAAG,CAACC,OAAO,EAAEC,SAAS,EAAEC,WAAW,EAAE;IACjC,IAAI,CAACD,SAAS,IAAI,CAACC,WAAW,EAC1B,MAAM,IAAIpB,KAAK,CAAC,8CAA8C,CAAC;IACnE,MAAMK,IAAI,GAAG,IAAIrD,GAAG,EAAE;IACtB,IAAI,CAAC8C,UAAU,CAACO,IAAI,CAAC;IACrB,IAAI,CAAC3F,IAAI,CAACwG,OAAO,CAAC;IAClB,IAAIC,SAAS,EAAE;MACX,MAAM3G,KAAK,GAAG,IAAI,CAACrB,IAAI,CAAC,GAAG,CAAC;MAC5B,IAAI,CAACkI,SAAS,GAAGhB,IAAI,CAACpD,KAAK,GAAG,IAAIG,KAAK,CAAC5C,KAAK,CAAC;MAC9C2G,SAAS,CAAC3G,KAAK,CAAC;IACpB;IACA,IAAI4G,WAAW,EAAE;MACb,IAAI,CAACC,SAAS,GAAGhB,IAAI,CAACnD,OAAO,GAAG,IAAIG,OAAO,EAAE;MAC7C,IAAI,CAAC3C,IAAI,CAAC0G,WAAW,CAAC;IAC1B;IACA,OAAO,IAAI,CAACjB,aAAa,CAAC/C,KAAK,EAAEC,OAAO,CAAC;EAC7C;EACA;EACAiE,KAAK,CAAC9G,KAAK,EAAE;IACT,OAAO,IAAI,CAACwE,SAAS,CAAC,IAAIzE,KAAK,CAACC,KAAK,CAAC,CAAC;EAC3C;EACA;EACA+G,KAAK,CAACC,IAAI,EAAEC,SAAS,EAAE;IACnB,IAAI,CAACjE,YAAY,CAACiC,IAAI,CAAC,IAAI,CAAC5B,MAAM,CAAC5C,MAAM,CAAC;IAC1C,IAAIuG,IAAI,EACJ,IAAI,CAAC9G,IAAI,CAAC8G,IAAI,CAAC,CAACE,QAAQ,CAACD,SAAS,CAAC;IACvC,OAAO,IAAI;EACf;EACA;EACAC,QAAQ,CAACD,SAAS,EAAE;IAChB,MAAME,GAAG,GAAG,IAAI,CAACnE,YAAY,CAACoE,GAAG,EAAE;IACnC,IAAID,GAAG,KAAKlI,SAAS,EACjB,MAAM,IAAIuG,KAAK,CAAC,sCAAsC,CAAC;IAC3D,MAAM6B,OAAO,GAAG,IAAI,CAAChE,MAAM,CAAC5C,MAAM,GAAG0G,GAAG;IACxC,IAAIE,OAAO,GAAG,CAAC,IAAKJ,SAAS,KAAKhI,SAAS,IAAIoI,OAAO,KAAKJ,SAAU,EAAE;MACnE,MAAM,IAAIzB,KAAK,CAAE,mCAAkC6B,OAAQ,OAAMJ,SAAU,WAAU,CAAC;IAC1F;IACA,IAAI,CAAC5D,MAAM,CAAC5C,MAAM,GAAG0G,GAAG;IACxB,OAAO,IAAI;EACf;EACA;EACAG,IAAI,CAAC3I,IAAI,EAAEyD,IAAI,GAAGnF,MAAM,CAACJ,GAAG,EAAEwF,KAAK,EAAEkF,QAAQ,EAAE;IAC3C,IAAI,CAACjC,UAAU,CAAC,IAAInD,IAAI,CAACxD,IAAI,EAAEyD,IAAI,EAAEC,KAAK,CAAC,CAAC;IAC5C,IAAIkF,QAAQ,EACR,IAAI,CAACrH,IAAI,CAACqH,QAAQ,CAAC,CAACC,OAAO,EAAE;IACjC,OAAO,IAAI;EACf;EACA;EACAA,OAAO,GAAG;IACN,OAAO,IAAI,CAAC7B,aAAa,CAACxD,IAAI,CAAC;EACnC;EACAsF,QAAQ,CAAClH,CAAC,GAAG,CAAC,EAAE;IACZ,OAAOA,CAAC,EAAE,GAAG,CAAC,EAAE;MACZ,IAAI,CAACgD,KAAK,CAACnF,aAAa,EAAE;MAC1B,IAAI,CAACmF,KAAK,CAAClF,aAAa,CAAC,IAAI,CAACkF,KAAK,CAACrE,KAAK,EAAE,IAAI,CAACX,UAAU,CAAC;IAC/D;EACJ;EACAiG,SAAS,CAACqB,IAAI,EAAE;IACZ,IAAI,CAACgB,SAAS,CAACzG,KAAK,CAAC6E,IAAI,CAACY,IAAI,CAAC;IAC/B,OAAO,IAAI;EACf;EACAP,UAAU,CAACO,IAAI,EAAE;IACb,IAAI,CAACgB,SAAS,CAACzG,KAAK,CAAC6E,IAAI,CAACY,IAAI,CAAC;IAC/B,IAAI,CAACxC,MAAM,CAAC4B,IAAI,CAACY,IAAI,CAAC;EAC1B;EACAF,aAAa,CAAC+B,EAAE,EAAEC,EAAE,EAAE;IAClB,MAAMpH,CAAC,GAAG,IAAI,CAACsG,SAAS;IACxB,IAAItG,CAAC,YAAYmH,EAAE,IAAKC,EAAE,IAAIpH,CAAC,YAAYoH,EAAG,EAAE;MAC5C,IAAI,CAACtE,MAAM,CAAC+D,GAAG,EAAE;MACjB,OAAO,IAAI;IACf;IACA,MAAM,IAAI5B,KAAK,CAAE,0BAAyBmC,EAAE,GAAI,GAAED,EAAE,CAACxG,IAAK,IAAGyG,EAAE,CAACzG,IAAK,EAAC,GAAGwG,EAAE,CAACxG,IAAK,GAAE,CAAC;EACxF;EACAwE,SAAS,CAACG,IAAI,EAAE;IACZ,MAAMtF,CAAC,GAAG,IAAI,CAACsG,SAAS;IACxB,IAAI,EAAEtG,CAAC,YAAYY,EAAE,CAAC,EAAE;MACpB,MAAM,IAAIqE,KAAK,CAAC,8BAA8B,CAAC;IACnD;IACA,IAAI,CAACqB,SAAS,GAAGtG,CAAC,CAACc,IAAI,GAAGwE,IAAI;IAC9B,OAAO,IAAI;EACf;EACA,IAAItC,KAAK,GAAG;IACR,OAAO,IAAI,CAACF,MAAM,CAAC,CAAC,CAAC;EACzB;EACA,IAAIwD,SAAS,GAAG;IACZ,MAAMrF,EAAE,GAAG,IAAI,CAAC6B,MAAM;IACtB,OAAO7B,EAAE,CAACA,EAAE,CAACf,MAAM,GAAG,CAAC,CAAC;EAC5B;EACA,IAAIoG,SAAS,CAAChB,IAAI,EAAE;IAChB,MAAMrE,EAAE,GAAG,IAAI,CAAC6B,MAAM;IACtB7B,EAAE,CAACA,EAAE,CAACf,MAAM,GAAG,CAAC,CAAC,GAAGoF,IAAI;EAC5B;AACJ;AACA/J,OAAO,CAACK,OAAO,GAAGA,OAAO;AACzB,SAAS2E,QAAQ,CAAC5B,KAAK,EAAE4C,IAAI,EAAE;EAC3B,KAAK,MAAMvB,CAAC,IAAIuB,IAAI,EAChB5C,KAAK,CAACqB,CAAC,CAAC,GAAG,CAACrB,KAAK,CAACqB,CAAC,CAAC,IAAI,CAAC,KAAKuB,IAAI,CAACvB,CAAC,CAAC,IAAI,CAAC,CAAC;EAC/C,OAAOrB,KAAK;AAChB;AACA,SAASO,YAAY,CAACP,KAAK,EAAE4C,IAAI,EAAE;EAC/B,OAAOA,IAAI,YAAY7E,MAAM,CAACoC,WAAW,GAAGyB,QAAQ,CAAC5B,KAAK,EAAE4C,IAAI,CAAC5C,KAAK,CAAC,GAAGA,KAAK;AACnF;AACA,SAASE,YAAY,CAACwI,IAAI,EAAE1I,KAAK,EAAEC,SAAS,EAAE;EAC1C,IAAIyI,IAAI,YAAY3K,MAAM,CAACR,IAAI,EAC3B,OAAOoL,WAAW,CAACD,IAAI,CAAC;EAC5B,IAAI,CAACE,WAAW,CAACF,IAAI,CAAC,EAClB,OAAOA,IAAI;EACf,OAAO,IAAI3K,MAAM,CAACQ,KAAK,CAACmK,IAAI,CAACG,MAAM,CAACzH,MAAM,CAAC,CAAC0H,KAAK,EAAEnD,CAAC,KAAK;IACrD,IAAIA,CAAC,YAAY5H,MAAM,CAACR,IAAI,EACxBoI,CAAC,GAAGgD,WAAW,CAAChD,CAAC,CAAC;IACtB,IAAIA,CAAC,YAAY5H,MAAM,CAACQ,KAAK,EACzBuK,KAAK,CAAC/C,IAAI,CAAC,GAAGJ,CAAC,CAACkD,MAAM,CAAC,CAAC,KAExBC,KAAK,CAAC/C,IAAI,CAACJ,CAAC,CAAC;IACjB,OAAOmD,KAAK;EAChB,CAAC,EAAE,EAAE,CAAC,CAAC;EACP,SAASH,WAAW,CAACtH,CAAC,EAAE;IACpB,MAAMsE,CAAC,GAAG1F,SAAS,CAACoB,CAAC,CAACxD,GAAG,CAAC;IAC1B,IAAI8H,CAAC,KAAK5F,SAAS,IAAIC,KAAK,CAACqB,CAAC,CAACxD,GAAG,CAAC,KAAK,CAAC,EACrC,OAAOwD,CAAC;IACZ,OAAOrB,KAAK,CAACqB,CAAC,CAACxD,GAAG,CAAC;IACnB,OAAO8H,CAAC;EACZ;EACA,SAASiD,WAAW,CAACvG,CAAC,EAAE;IACpB,OAAQA,CAAC,YAAYtE,MAAM,CAACQ,KAAK,IAC7B8D,CAAC,CAACwG,MAAM,CAACE,IAAI,CAAEpD,CAAC,IAAKA,CAAC,YAAY5H,MAAM,CAACR,IAAI,IAAIyC,KAAK,CAAC2F,CAAC,CAAC9H,GAAG,CAAC,KAAK,CAAC,IAAIoC,SAAS,CAAC0F,CAAC,CAAC9H,GAAG,CAAC,KAAKkC,SAAS,CAAC;EAC9G;AACJ;AACA,SAAS4B,aAAa,CAAC3B,KAAK,EAAE4C,IAAI,EAAE;EAChC,KAAK,MAAMvB,CAAC,IAAIuB,IAAI,EAChB5C,KAAK,CAACqB,CAAC,CAAC,GAAG,CAACrB,KAAK,CAACqB,CAAC,CAAC,IAAI,CAAC,KAAKuB,IAAI,CAACvB,CAAC,CAAC,IAAI,CAAC,CAAC;AACnD;AACA,SAASrE,GAAG,CAACgM,CAAC,EAAE;EACZ,OAAO,OAAOA,CAAC,IAAI,SAAS,IAAI,OAAOA,CAAC,IAAI,QAAQ,IAAIA,CAAC,KAAK,IAAI,GAAG,CAACA,CAAC,GAAG,CAAC,CAAC,EAAEjL,MAAM,CAACD,CAAC,CAAG,IAAGmL,GAAG,CAACD,CAAC,CAAE,EAAC;AACxG;AACApM,OAAO,CAACI,GAAG,GAAGA,GAAG;AACjB,MAAMkM,OAAO,GAAGC,OAAO,CAACvM,OAAO,CAACM,SAAS,CAAC6B,GAAG,CAAC;AAC9C;AACA,SAAShC,GAAG,CAAC,GAAGmG,IAAI,EAAE;EAClB,OAAOA,IAAI,CAAC9B,MAAM,CAAC8H,OAAO,CAAC;AAC/B;AACAtM,OAAO,CAACG,GAAG,GAAGA,GAAG;AACjB,MAAMqM,MAAM,GAAGD,OAAO,CAACvM,OAAO,CAACM,SAAS,CAAC4B,EAAE,CAAC;AAC5C;AACA,SAAShC,EAAE,CAAC,GAAGoG,IAAI,EAAE;EACjB,OAAOA,IAAI,CAAC9B,MAAM,CAACgI,MAAM,CAAC;AAC9B;AACAxM,OAAO,CAACE,EAAE,GAAGA,EAAE;AACf,SAASqM,OAAO,CAAC1I,EAAE,EAAE;EACjB,OAAO,CAACuI,CAAC,EAAEK,CAAC,KAAML,CAAC,KAAKjL,MAAM,CAACJ,GAAG,GAAG0L,CAAC,GAAGA,CAAC,KAAKtL,MAAM,CAACJ,GAAG,GAAGqL,CAAC,GAAG,CAAC,CAAC,EAAEjL,MAAM,CAACD,CAAC,CAAG,GAAEmL,GAAG,CAACD,CAAC,CAAE,IAAGvI,EAAG,IAAGwI,GAAG,CAACI,CAAC,CAAE,EAAE;AAC9G;AACA,SAASJ,GAAG,CAACD,CAAC,EAAE;EACZ,OAAOA,CAAC,YAAYjL,MAAM,CAACR,IAAI,GAAGyL,CAAC,GAAG,CAAC,CAAC,EAAEjL,MAAM,CAACD,CAAC,CAAG,IAAGkL,CAAE,GAAE;AAChE"},"metadata":{},"sourceType":"script","externalDependencies":[]}