{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.move = void 0;\nconst core_1 = require(\"@angular-devkit/core\");\nconst base_1 = require(\"./base\");\nfunction move(from, to) {\n  if (to === undefined) {\n    to = from;\n    from = '/';\n  }\n  const fromPath = (0, core_1.normalize)('/' + from);\n  const toPath = (0, core_1.normalize)('/' + to);\n  if (fromPath === toPath) {\n    return base_1.noop;\n  }\n  return tree => {\n    if (tree.exists(fromPath)) {\n      // fromPath is a file\n      tree.rename(fromPath, toPath);\n    } else {\n      // fromPath is a directory\n      tree.getDir(fromPath).visit(path => {\n        tree.rename(path, (0, core_1.join)(toPath, path.slice(fromPath.length)));\n      });\n    }\n    return tree;\n  };\n}\nexports.move = move;","map":{"version":3,"names":["Object","defineProperty","exports","value","move","core_1","require","base_1","from","to","undefined","fromPath","normalize","toPath","noop","tree","exists","rename","getDir","visit","path","join","slice","length"],"sources":["/Users/sabyrzhanolzhabay/Web-Dev/Arabakz/ArabaFrontend/node_modules/@angular-devkit/schematics/src/rules/move.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.move = void 0;\nconst core_1 = require(\"@angular-devkit/core\");\nconst base_1 = require(\"./base\");\nfunction move(from, to) {\n    if (to === undefined) {\n        to = from;\n        from = '/';\n    }\n    const fromPath = (0, core_1.normalize)('/' + from);\n    const toPath = (0, core_1.normalize)('/' + to);\n    if (fromPath === toPath) {\n        return base_1.noop;\n    }\n    return (tree) => {\n        if (tree.exists(fromPath)) {\n            // fromPath is a file\n            tree.rename(fromPath, toPath);\n        }\n        else {\n            // fromPath is a directory\n            tree.getDir(fromPath).visit((path) => {\n                tree.rename(path, (0, core_1.join)(toPath, path.slice(fromPath.length)));\n            });\n        }\n        return tree;\n    };\n}\nexports.move = move;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,IAAI,GAAG,KAAK,CAAC;AACrB,MAAMC,MAAM,GAAGC,OAAO,CAAC,sBAAsB,CAAC;AAC9C,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAQ,CAAC;AAChC,SAASF,IAAI,CAACI,IAAI,EAAEC,EAAE,EAAE;EACpB,IAAIA,EAAE,KAAKC,SAAS,EAAE;IAClBD,EAAE,GAAGD,IAAI;IACTA,IAAI,GAAG,GAAG;EACd;EACA,MAAMG,QAAQ,GAAG,CAAC,CAAC,EAAEN,MAAM,CAACO,SAAS,EAAE,GAAG,GAAGJ,IAAI,CAAC;EAClD,MAAMK,MAAM,GAAG,CAAC,CAAC,EAAER,MAAM,CAACO,SAAS,EAAE,GAAG,GAAGH,EAAE,CAAC;EAC9C,IAAIE,QAAQ,KAAKE,MAAM,EAAE;IACrB,OAAON,MAAM,CAACO,IAAI;EACtB;EACA,OAAQC,IAAI,IAAK;IACb,IAAIA,IAAI,CAACC,MAAM,CAACL,QAAQ,CAAC,EAAE;MACvB;MACAI,IAAI,CAACE,MAAM,CAACN,QAAQ,EAAEE,MAAM,CAAC;IACjC,CAAC,MACI;MACD;MACAE,IAAI,CAACG,MAAM,CAACP,QAAQ,CAAC,CAACQ,KAAK,CAAEC,IAAI,IAAK;QAClCL,IAAI,CAACE,MAAM,CAACG,IAAI,EAAE,CAAC,CAAC,EAAEf,MAAM,CAACgB,IAAI,EAAER,MAAM,EAAEO,IAAI,CAACE,KAAK,CAACX,QAAQ,CAACY,MAAM,CAAC,CAAC,CAAC;MAC5E,CAAC,CAAC;IACN;IACA,OAAOR,IAAI;EACf,CAAC;AACL;AACAb,OAAO,CAACE,IAAI,GAAGA,IAAI"},"metadata":{},"sourceType":"script","externalDependencies":[]}