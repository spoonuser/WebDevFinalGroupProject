{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst codegen_1 = require(\"../../compile/codegen\");\nconst util_1 = require(\"../../compile/util\");\nconst ucs2length_1 = require(\"../../runtime/ucs2length\");\nconst error = {\n  message({\n    keyword,\n    schemaCode\n  }) {\n    const comp = keyword === \"maxLength\" ? \"more\" : \"fewer\";\n    return (0, codegen_1.str)`must NOT have ${comp} than ${schemaCode} characters`;\n  },\n  params: ({\n    schemaCode\n  }) => (0, codegen_1._)`{limit: ${schemaCode}}`\n};\nconst def = {\n  keyword: [\"maxLength\", \"minLength\"],\n  type: \"string\",\n  schemaType: \"number\",\n  $data: true,\n  error,\n  code(cxt) {\n    const {\n      keyword,\n      data,\n      schemaCode,\n      it\n    } = cxt;\n    const op = keyword === \"maxLength\" ? codegen_1.operators.GT : codegen_1.operators.LT;\n    const len = it.opts.unicode === false ? (0, codegen_1._)`${data}.length` : (0, codegen_1._)`${(0, util_1.useFunc)(cxt.gen, ucs2length_1.default)}(${data})`;\n    cxt.fail$data((0, codegen_1._)`${len} ${op} ${schemaCode}`);\n  }\n};\nexports.default = def;","map":{"version":3,"names":["Object","defineProperty","exports","value","codegen_1","require","util_1","ucs2length_1","error","message","keyword","schemaCode","comp","str","params","_","def","type","schemaType","$data","code","cxt","data","it","op","operators","GT","LT","len","opts","unicode","useFunc","gen","default","fail$data"],"sources":["/Users/sabyrzhanolzhabay/Web-Dev/Arabakz/ArabaFrontend/node_modules/ajv/dist/vocabularies/validation/limitLength.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst codegen_1 = require(\"../../compile/codegen\");\nconst util_1 = require(\"../../compile/util\");\nconst ucs2length_1 = require(\"../../runtime/ucs2length\");\nconst error = {\n    message({ keyword, schemaCode }) {\n        const comp = keyword === \"maxLength\" ? \"more\" : \"fewer\";\n        return (0, codegen_1.str) `must NOT have ${comp} than ${schemaCode} characters`;\n    },\n    params: ({ schemaCode }) => (0, codegen_1._) `{limit: ${schemaCode}}`,\n};\nconst def = {\n    keyword: [\"maxLength\", \"minLength\"],\n    type: \"string\",\n    schemaType: \"number\",\n    $data: true,\n    error,\n    code(cxt) {\n        const { keyword, data, schemaCode, it } = cxt;\n        const op = keyword === \"maxLength\" ? codegen_1.operators.GT : codegen_1.operators.LT;\n        const len = it.opts.unicode === false ? (0, codegen_1._) `${data}.length` : (0, codegen_1._) `${(0, util_1.useFunc)(cxt.gen, ucs2length_1.default)}(${data})`;\n        cxt.fail$data((0, codegen_1._) `${len} ${op} ${schemaCode}`);\n    },\n};\nexports.default = def;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,MAAMC,SAAS,GAAGC,OAAO,CAAC,uBAAuB,CAAC;AAClD,MAAMC,MAAM,GAAGD,OAAO,CAAC,oBAAoB,CAAC;AAC5C,MAAME,YAAY,GAAGF,OAAO,CAAC,0BAA0B,CAAC;AACxD,MAAMG,KAAK,GAAG;EACVC,OAAO,CAAC;IAAEC,OAAO;IAAEC;EAAW,CAAC,EAAE;IAC7B,MAAMC,IAAI,GAAGF,OAAO,KAAK,WAAW,GAAG,MAAM,GAAG,OAAO;IACvD,OAAO,CAAC,CAAC,EAAEN,SAAS,CAACS,GAAG,CAAG,iBAAgBD,IAAK,SAAQD,UAAW,aAAY;EACnF,CAAC;EACDG,MAAM,EAAE,CAAC;IAAEH;EAAW,CAAC,KAAK,CAAC,CAAC,EAAEP,SAAS,CAACW,CAAC,CAAG,WAAUJ,UAAW;AACvE,CAAC;AACD,MAAMK,GAAG,GAAG;EACRN,OAAO,EAAE,CAAC,WAAW,EAAE,WAAW,CAAC;EACnCO,IAAI,EAAE,QAAQ;EACdC,UAAU,EAAE,QAAQ;EACpBC,KAAK,EAAE,IAAI;EACXX,KAAK;EACLY,IAAI,CAACC,GAAG,EAAE;IACN,MAAM;MAAEX,OAAO;MAAEY,IAAI;MAAEX,UAAU;MAAEY;IAAG,CAAC,GAAGF,GAAG;IAC7C,MAAMG,EAAE,GAAGd,OAAO,KAAK,WAAW,GAAGN,SAAS,CAACqB,SAAS,CAACC,EAAE,GAAGtB,SAAS,CAACqB,SAAS,CAACE,EAAE;IACpF,MAAMC,GAAG,GAAGL,EAAE,CAACM,IAAI,CAACC,OAAO,KAAK,KAAK,GAAG,CAAC,CAAC,EAAE1B,SAAS,CAACW,CAAC,CAAG,GAAEO,IAAK,SAAQ,GAAG,CAAC,CAAC,EAAElB,SAAS,CAACW,CAAC,CAAG,GAAE,CAAC,CAAC,EAAET,MAAM,CAACyB,OAAO,EAAEV,GAAG,CAACW,GAAG,EAAEzB,YAAY,CAAC0B,OAAO,CAAE,IAAGX,IAAK,GAAE;IAC7JD,GAAG,CAACa,SAAS,CAAC,CAAC,CAAC,EAAE9B,SAAS,CAACW,CAAC,CAAG,GAAEa,GAAI,IAAGJ,EAAG,IAAGb,UAAW,EAAC,CAAC;EAChE;AACJ,CAAC;AACDT,OAAO,CAAC+B,OAAO,GAAGjB,GAAG"},"metadata":{},"sourceType":"script","externalDependencies":[]}