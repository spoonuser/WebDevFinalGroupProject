{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.levenshtein = exports.capitalize = exports.underscore = exports.classify = exports.camelize = exports.dasherize = exports.decamelize = void 0;\nconst STRING_DASHERIZE_REGEXP = /[ _]/g;\nconst STRING_DECAMELIZE_REGEXP = /([a-z\\d])([A-Z])/g;\nconst STRING_CAMELIZE_REGEXP = /(-|_|\\.|\\s)+(.)?/g;\nconst STRING_UNDERSCORE_REGEXP_1 = /([a-z\\d])([A-Z]+)/g;\nconst STRING_UNDERSCORE_REGEXP_2 = /-|\\s+/g;\n/**\n * Converts a camelized string into all lower case separated by underscores.\n *\n ```javascript\n decamelize('innerHTML');         // 'inner_html'\n decamelize('action_name');       // 'action_name'\n decamelize('css-class-name');    // 'css-class-name'\n decamelize('my favorite items'); // 'my favorite items'\n ```\n\n @method decamelize\n @param {String} str The string to decamelize.\n @return {String} the decamelized string.\n */\nfunction decamelize(str) {\n  return str.replace(STRING_DECAMELIZE_REGEXP, '$1_$2').toLowerCase();\n}\nexports.decamelize = decamelize;\n/**\n Replaces underscores, spaces, or camelCase with dashes.\n\n ```javascript\n dasherize('innerHTML');         // 'inner-html'\n dasherize('action_name');       // 'action-name'\n dasherize('css-class-name');    // 'css-class-name'\n dasherize('my favorite items'); // 'my-favorite-items'\n ```\n\n @method dasherize\n @param {String} str The string to dasherize.\n @return {String} the dasherized string.\n */\nfunction dasherize(str) {\n  return decamelize(str).replace(STRING_DASHERIZE_REGEXP, '-');\n}\nexports.dasherize = dasherize;\n/**\n Returns the lowerCamelCase form of a string.\n\n ```javascript\n camelize('innerHTML');          // 'innerHTML'\n camelize('action_name');        // 'actionName'\n camelize('css-class-name');     // 'cssClassName'\n camelize('my favorite items');  // 'myFavoriteItems'\n camelize('My Favorite Items');  // 'myFavoriteItems'\n ```\n\n @method camelize\n @param {String} str The string to camelize.\n @return {String} the camelized string.\n */\nfunction camelize(str) {\n  return str.replace(STRING_CAMELIZE_REGEXP, (_match, _separator, chr) => {\n    return chr ? chr.toUpperCase() : '';\n  }).replace(/^([A-Z])/, match => match.toLowerCase());\n}\nexports.camelize = camelize;\n/**\n Returns the UpperCamelCase form of a string.\n\n @example\n ```javascript\n 'innerHTML'.classify();          // 'InnerHTML'\n 'action_name'.classify();        // 'ActionName'\n 'css-class-name'.classify();     // 'CssClassName'\n 'my favorite items'.classify();  // 'MyFavoriteItems'\n 'app.component'.classify();      // 'AppComponent'\n ```\n @method classify\n @param {String} str the string to classify\n @return {String} the classified string\n */\nfunction classify(str) {\n  return str.split('.').map(part => capitalize(camelize(part))).join('');\n}\nexports.classify = classify;\n/**\n More general than decamelize. Returns the lower_case_and_underscored\n form of a string.\n\n ```javascript\n 'innerHTML'.underscore();          // 'inner_html'\n 'action_name'.underscore();        // 'action_name'\n 'css-class-name'.underscore();     // 'css_class_name'\n 'my favorite items'.underscore();  // 'my_favorite_items'\n ```\n\n @method underscore\n @param {String} str The string to underscore.\n @return {String} the underscored string.\n */\nfunction underscore(str) {\n  return str.replace(STRING_UNDERSCORE_REGEXP_1, '$1_$2').replace(STRING_UNDERSCORE_REGEXP_2, '_').toLowerCase();\n}\nexports.underscore = underscore;\n/**\n Returns the Capitalized form of a string\n\n ```javascript\n 'innerHTML'.capitalize()         // 'InnerHTML'\n 'action_name'.capitalize()       // 'Action_name'\n 'css-class-name'.capitalize()    // 'Css-class-name'\n 'my favorite items'.capitalize() // 'My favorite items'\n ```\n\n @method capitalize\n @param {String} str The string to capitalize.\n @return {String} The capitalized string.\n */\nfunction capitalize(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\nexports.capitalize = capitalize;\n/**\n * Calculate the levenshtein distance of two strings.\n * See https://en.wikipedia.org/wiki/Levenshtein_distance.\n * Based off https://gist.github.com/andrei-m/982927 (for using the faster dynamic programming\n * version).\n *\n * @param a String a.\n * @param b String b.\n * @returns A number that represents the distance between the two strings. The greater the number\n *   the more distant the strings are from each others.\n */\nfunction levenshtein(a, b) {\n  if (a.length == 0) {\n    return b.length;\n  }\n  if (b.length == 0) {\n    return a.length;\n  }\n  const matrix = [];\n  // increment along the first column of each row\n  for (let i = 0; i <= b.length; i++) {\n    matrix[i] = [i];\n  }\n  // increment each column in the first row\n  for (let j = 0; j <= a.length; j++) {\n    matrix[0][j] = j;\n  }\n  // Fill in the rest of the matrix\n  for (let i = 1; i <= b.length; i++) {\n    for (let j = 1; j <= a.length; j++) {\n      if (b.charAt(i - 1) == a.charAt(j - 1)) {\n        matrix[i][j] = matrix[i - 1][j - 1];\n      } else {\n        matrix[i][j] = Math.min(matrix[i - 1][j - 1] + 1,\n        // substitution\n        matrix[i][j - 1] + 1,\n        // insertion\n        matrix[i - 1][j] + 1);\n      }\n    }\n  }\n  return matrix[b.length][a.length];\n}\nexports.levenshtein = levenshtein;","map":{"version":3,"names":["Object","defineProperty","exports","value","levenshtein","capitalize","underscore","classify","camelize","dasherize","decamelize","STRING_DASHERIZE_REGEXP","STRING_DECAMELIZE_REGEXP","STRING_CAMELIZE_REGEXP","STRING_UNDERSCORE_REGEXP_1","STRING_UNDERSCORE_REGEXP_2","str","replace","toLowerCase","_match","_separator","chr","toUpperCase","match","split","map","part","join","charAt","slice","a","b","length","matrix","i","j","Math","min"],"sources":["/Users/sabyrzhanolzhabay/Web-Dev/Arabakz/ArabaFrontend/node_modules/@angular/cli/node_modules/@angular-devkit/core/src/utils/strings.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.levenshtein = exports.capitalize = exports.underscore = exports.classify = exports.camelize = exports.dasherize = exports.decamelize = void 0;\nconst STRING_DASHERIZE_REGEXP = /[ _]/g;\nconst STRING_DECAMELIZE_REGEXP = /([a-z\\d])([A-Z])/g;\nconst STRING_CAMELIZE_REGEXP = /(-|_|\\.|\\s)+(.)?/g;\nconst STRING_UNDERSCORE_REGEXP_1 = /([a-z\\d])([A-Z]+)/g;\nconst STRING_UNDERSCORE_REGEXP_2 = /-|\\s+/g;\n/**\n * Converts a camelized string into all lower case separated by underscores.\n *\n ```javascript\n decamelize('innerHTML');         // 'inner_html'\n decamelize('action_name');       // 'action_name'\n decamelize('css-class-name');    // 'css-class-name'\n decamelize('my favorite items'); // 'my favorite items'\n ```\n\n @method decamelize\n @param {String} str The string to decamelize.\n @return {String} the decamelized string.\n */\nfunction decamelize(str) {\n    return str.replace(STRING_DECAMELIZE_REGEXP, '$1_$2').toLowerCase();\n}\nexports.decamelize = decamelize;\n/**\n Replaces underscores, spaces, or camelCase with dashes.\n\n ```javascript\n dasherize('innerHTML');         // 'inner-html'\n dasherize('action_name');       // 'action-name'\n dasherize('css-class-name');    // 'css-class-name'\n dasherize('my favorite items'); // 'my-favorite-items'\n ```\n\n @method dasherize\n @param {String} str The string to dasherize.\n @return {String} the dasherized string.\n */\nfunction dasherize(str) {\n    return decamelize(str).replace(STRING_DASHERIZE_REGEXP, '-');\n}\nexports.dasherize = dasherize;\n/**\n Returns the lowerCamelCase form of a string.\n\n ```javascript\n camelize('innerHTML');          // 'innerHTML'\n camelize('action_name');        // 'actionName'\n camelize('css-class-name');     // 'cssClassName'\n camelize('my favorite items');  // 'myFavoriteItems'\n camelize('My Favorite Items');  // 'myFavoriteItems'\n ```\n\n @method camelize\n @param {String} str The string to camelize.\n @return {String} the camelized string.\n */\nfunction camelize(str) {\n    return str\n        .replace(STRING_CAMELIZE_REGEXP, (_match, _separator, chr) => {\n        return chr ? chr.toUpperCase() : '';\n    })\n        .replace(/^([A-Z])/, (match) => match.toLowerCase());\n}\nexports.camelize = camelize;\n/**\n Returns the UpperCamelCase form of a string.\n\n @example\n ```javascript\n 'innerHTML'.classify();          // 'InnerHTML'\n 'action_name'.classify();        // 'ActionName'\n 'css-class-name'.classify();     // 'CssClassName'\n 'my favorite items'.classify();  // 'MyFavoriteItems'\n 'app.component'.classify();      // 'AppComponent'\n ```\n @method classify\n @param {String} str the string to classify\n @return {String} the classified string\n */\nfunction classify(str) {\n    return str\n        .split('.')\n        .map((part) => capitalize(camelize(part)))\n        .join('');\n}\nexports.classify = classify;\n/**\n More general than decamelize. Returns the lower_case_and_underscored\n form of a string.\n\n ```javascript\n 'innerHTML'.underscore();          // 'inner_html'\n 'action_name'.underscore();        // 'action_name'\n 'css-class-name'.underscore();     // 'css_class_name'\n 'my favorite items'.underscore();  // 'my_favorite_items'\n ```\n\n @method underscore\n @param {String} str The string to underscore.\n @return {String} the underscored string.\n */\nfunction underscore(str) {\n    return str\n        .replace(STRING_UNDERSCORE_REGEXP_1, '$1_$2')\n        .replace(STRING_UNDERSCORE_REGEXP_2, '_')\n        .toLowerCase();\n}\nexports.underscore = underscore;\n/**\n Returns the Capitalized form of a string\n\n ```javascript\n 'innerHTML'.capitalize()         // 'InnerHTML'\n 'action_name'.capitalize()       // 'Action_name'\n 'css-class-name'.capitalize()    // 'Css-class-name'\n 'my favorite items'.capitalize() // 'My favorite items'\n ```\n\n @method capitalize\n @param {String} str The string to capitalize.\n @return {String} The capitalized string.\n */\nfunction capitalize(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n}\nexports.capitalize = capitalize;\n/**\n * Calculate the levenshtein distance of two strings.\n * See https://en.wikipedia.org/wiki/Levenshtein_distance.\n * Based off https://gist.github.com/andrei-m/982927 (for using the faster dynamic programming\n * version).\n *\n * @param a String a.\n * @param b String b.\n * @returns A number that represents the distance between the two strings. The greater the number\n *   the more distant the strings are from each others.\n */\nfunction levenshtein(a, b) {\n    if (a.length == 0) {\n        return b.length;\n    }\n    if (b.length == 0) {\n        return a.length;\n    }\n    const matrix = [];\n    // increment along the first column of each row\n    for (let i = 0; i <= b.length; i++) {\n        matrix[i] = [i];\n    }\n    // increment each column in the first row\n    for (let j = 0; j <= a.length; j++) {\n        matrix[0][j] = j;\n    }\n    // Fill in the rest of the matrix\n    for (let i = 1; i <= b.length; i++) {\n        for (let j = 1; j <= a.length; j++) {\n            if (b.charAt(i - 1) == a.charAt(j - 1)) {\n                matrix[i][j] = matrix[i - 1][j - 1];\n            }\n            else {\n                matrix[i][j] = Math.min(matrix[i - 1][j - 1] + 1, // substitution\n                matrix[i][j - 1] + 1, // insertion\n                matrix[i - 1][j] + 1);\n            }\n        }\n    }\n    return matrix[b.length][a.length];\n}\nexports.levenshtein = levenshtein;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}