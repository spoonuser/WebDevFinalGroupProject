{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseJsonPointer = exports.joinJsonPointer = exports.buildJsonPointer = void 0;\nfunction buildJsonPointer(fragments) {\n  return '/' + fragments.map(f => {\n    return f.replace(/~/g, '~0').replace(/\\//g, '~1');\n  }).join('/');\n}\nexports.buildJsonPointer = buildJsonPointer;\nfunction joinJsonPointer(root, ...others) {\n  if (root == '/') {\n    return buildJsonPointer(others);\n  }\n  return root + buildJsonPointer(others);\n}\nexports.joinJsonPointer = joinJsonPointer;\nfunction parseJsonPointer(pointer) {\n  if (pointer === '') {\n    return [];\n  }\n  if (pointer.charAt(0) !== '/') {\n    throw new Error('Relative pointer: ' + pointer);\n  }\n  return pointer.substring(1).split(/\\//).map(str => str.replace(/~1/g, '/').replace(/~0/g, '~'));\n}\nexports.parseJsonPointer = parseJsonPointer;","map":{"version":3,"names":["Object","defineProperty","exports","value","parseJsonPointer","joinJsonPointer","buildJsonPointer","fragments","map","f","replace","join","root","others","pointer","charAt","Error","substring","split","str"],"sources":["/Users/sabyrzhanolzhabay/Web-Dev/Arabakz/ArabaFrontend/node_modules/@angular/cli/node_modules/@angular-devkit/core/src/json/schema/pointer.js"],"sourcesContent":["\"use strict\";\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseJsonPointer = exports.joinJsonPointer = exports.buildJsonPointer = void 0;\nfunction buildJsonPointer(fragments) {\n    return ('/' +\n        fragments\n            .map((f) => {\n            return f.replace(/~/g, '~0').replace(/\\//g, '~1');\n        })\n            .join('/'));\n}\nexports.buildJsonPointer = buildJsonPointer;\nfunction joinJsonPointer(root, ...others) {\n    if (root == '/') {\n        return buildJsonPointer(others);\n    }\n    return (root + buildJsonPointer(others));\n}\nexports.joinJsonPointer = joinJsonPointer;\nfunction parseJsonPointer(pointer) {\n    if (pointer === '') {\n        return [];\n    }\n    if (pointer.charAt(0) !== '/') {\n        throw new Error('Relative pointer: ' + pointer);\n    }\n    return pointer\n        .substring(1)\n        .split(/\\//)\n        .map((str) => str.replace(/~1/g, '/').replace(/~0/g, '~'));\n}\nexports.parseJsonPointer = parseJsonPointer;\n"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,gBAAgB,GAAGF,OAAO,CAACG,eAAe,GAAGH,OAAO,CAACI,gBAAgB,GAAG,KAAK,CAAC;AACtF,SAASA,gBAAgB,CAACC,SAAS,EAAE;EACjC,OAAQ,GAAG,GACPA,SAAS,CACJC,GAAG,CAAEC,CAAC,IAAK;IACZ,OAAOA,CAAC,CAACC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAACA,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC;EACrD,CAAC,CAAC,CACGC,IAAI,CAAC,GAAG,CAAC;AACtB;AACAT,OAAO,CAACI,gBAAgB,GAAGA,gBAAgB;AAC3C,SAASD,eAAe,CAACO,IAAI,EAAE,GAAGC,MAAM,EAAE;EACtC,IAAID,IAAI,IAAI,GAAG,EAAE;IACb,OAAON,gBAAgB,CAACO,MAAM,CAAC;EACnC;EACA,OAAQD,IAAI,GAAGN,gBAAgB,CAACO,MAAM,CAAC;AAC3C;AACAX,OAAO,CAACG,eAAe,GAAGA,eAAe;AACzC,SAASD,gBAAgB,CAACU,OAAO,EAAE;EAC/B,IAAIA,OAAO,KAAK,EAAE,EAAE;IAChB,OAAO,EAAE;EACb;EACA,IAAIA,OAAO,CAACC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;IAC3B,MAAM,IAAIC,KAAK,CAAC,oBAAoB,GAAGF,OAAO,CAAC;EACnD;EACA,OAAOA,OAAO,CACTG,SAAS,CAAC,CAAC,CAAC,CACZC,KAAK,CAAC,IAAI,CAAC,CACXV,GAAG,CAAEW,GAAG,IAAKA,GAAG,CAACT,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;AAClE;AACAR,OAAO,CAACE,gBAAgB,GAAGA,gBAAgB"},"metadata":{},"sourceType":"script","externalDependencies":[]}