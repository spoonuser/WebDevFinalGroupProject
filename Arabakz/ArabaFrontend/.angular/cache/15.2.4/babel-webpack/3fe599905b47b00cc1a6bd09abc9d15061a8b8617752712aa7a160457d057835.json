{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\n/**\n * Creates a JSON scanner on the given text.\n * If ignoreTrivia is set, whitespaces or comments are ignored.\n */\nexport function createScanner(text, ignoreTrivia = false) {\n  const len = text.length;\n  let pos = 0,\n    value = '',\n    tokenOffset = 0,\n    token = 16 /* SyntaxKind.Unknown */,\n    lineNumber = 0,\n    lineStartOffset = 0,\n    tokenLineStartOffset = 0,\n    prevTokenLineStartOffset = 0,\n    scanError = 0 /* ScanError.None */;\n  function scanHexDigits(count, exact) {\n    let digits = 0;\n    let value = 0;\n    while (digits < count || !exact) {\n      let ch = text.charCodeAt(pos);\n      if (ch >= 48 /* CharacterCodes._0 */ && ch <= 57 /* CharacterCodes._9 */) {\n        value = value * 16 + ch - 48 /* CharacterCodes._0 */;\n      } else if (ch >= 65 /* CharacterCodes.A */ && ch <= 70 /* CharacterCodes.F */) {\n        value = value * 16 + ch - 65 /* CharacterCodes.A */ + 10;\n      } else if (ch >= 97 /* CharacterCodes.a */ && ch <= 102 /* CharacterCodes.f */) {\n        value = value * 16 + ch - 97 /* CharacterCodes.a */ + 10;\n      } else {\n        break;\n      }\n      pos++;\n      digits++;\n    }\n    if (digits < count) {\n      value = -1;\n    }\n    return value;\n  }\n  function setPosition(newPosition) {\n    pos = newPosition;\n    value = '';\n    tokenOffset = 0;\n    token = 16 /* SyntaxKind.Unknown */;\n    scanError = 0 /* ScanError.None */;\n  }\n\n  function scanNumber() {\n    let start = pos;\n    if (text.charCodeAt(pos) === 48 /* CharacterCodes._0 */) {\n      pos++;\n    } else {\n      pos++;\n      while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n        pos++;\n      }\n    }\n    if (pos < text.length && text.charCodeAt(pos) === 46 /* CharacterCodes.dot */) {\n      pos++;\n      if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n        pos++;\n        while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n          pos++;\n        }\n      } else {\n        scanError = 3 /* ScanError.UnexpectedEndOfNumber */;\n        return text.substring(start, pos);\n      }\n    }\n    let end = pos;\n    if (pos < text.length && (text.charCodeAt(pos) === 69 /* CharacterCodes.E */ || text.charCodeAt(pos) === 101 /* CharacterCodes.e */)) {\n      pos++;\n      if (pos < text.length && text.charCodeAt(pos) === 43 /* CharacterCodes.plus */ || text.charCodeAt(pos) === 45 /* CharacterCodes.minus */) {\n        pos++;\n      }\n      if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n        pos++;\n        while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n          pos++;\n        }\n        end = pos;\n      } else {\n        scanError = 3 /* ScanError.UnexpectedEndOfNumber */;\n      }\n    }\n\n    return text.substring(start, end);\n  }\n  function scanString() {\n    let result = '',\n      start = pos;\n    while (true) {\n      if (pos >= len) {\n        result += text.substring(start, pos);\n        scanError = 2 /* ScanError.UnexpectedEndOfString */;\n        break;\n      }\n      const ch = text.charCodeAt(pos);\n      if (ch === 34 /* CharacterCodes.doubleQuote */) {\n        result += text.substring(start, pos);\n        pos++;\n        break;\n      }\n      if (ch === 92 /* CharacterCodes.backslash */) {\n        result += text.substring(start, pos);\n        pos++;\n        if (pos >= len) {\n          scanError = 2 /* ScanError.UnexpectedEndOfString */;\n          break;\n        }\n        const ch2 = text.charCodeAt(pos++);\n        switch (ch2) {\n          case 34 /* CharacterCodes.doubleQuote */:\n            result += '\\\"';\n            break;\n          case 92 /* CharacterCodes.backslash */:\n            result += '\\\\';\n            break;\n          case 47 /* CharacterCodes.slash */:\n            result += '/';\n            break;\n          case 98 /* CharacterCodes.b */:\n            result += '\\b';\n            break;\n          case 102 /* CharacterCodes.f */:\n            result += '\\f';\n            break;\n          case 110 /* CharacterCodes.n */:\n            result += '\\n';\n            break;\n          case 114 /* CharacterCodes.r */:\n            result += '\\r';\n            break;\n          case 116 /* CharacterCodes.t */:\n            result += '\\t';\n            break;\n          case 117 /* CharacterCodes.u */:\n            const ch3 = scanHexDigits(4, true);\n            if (ch3 >= 0) {\n              result += String.fromCharCode(ch3);\n            } else {\n              scanError = 4 /* ScanError.InvalidUnicode */;\n            }\n\n            break;\n          default:\n            scanError = 5 /* ScanError.InvalidEscapeCharacter */;\n        }\n\n        start = pos;\n        continue;\n      }\n      if (ch >= 0 && ch <= 0x1f) {\n        if (isLineBreak(ch)) {\n          result += text.substring(start, pos);\n          scanError = 2 /* ScanError.UnexpectedEndOfString */;\n          break;\n        } else {\n          scanError = 6 /* ScanError.InvalidCharacter */;\n          // mark as error but continue with string\n        }\n      }\n\n      pos++;\n    }\n    return result;\n  }\n  function scanNext() {\n    value = '';\n    scanError = 0 /* ScanError.None */;\n    tokenOffset = pos;\n    lineStartOffset = lineNumber;\n    prevTokenLineStartOffset = tokenLineStartOffset;\n    if (pos >= len) {\n      // at the end\n      tokenOffset = len;\n      return token = 17 /* SyntaxKind.EOF */;\n    }\n\n    let code = text.charCodeAt(pos);\n    // trivia: whitespace\n    if (isWhiteSpace(code)) {\n      do {\n        pos++;\n        value += String.fromCharCode(code);\n        code = text.charCodeAt(pos);\n      } while (isWhiteSpace(code));\n      return token = 15 /* SyntaxKind.Trivia */;\n    }\n    // trivia: newlines\n    if (isLineBreak(code)) {\n      pos++;\n      value += String.fromCharCode(code);\n      if (code === 13 /* CharacterCodes.carriageReturn */ && text.charCodeAt(pos) === 10 /* CharacterCodes.lineFeed */) {\n        pos++;\n        value += '\\n';\n      }\n      lineNumber++;\n      tokenLineStartOffset = pos;\n      return token = 14 /* SyntaxKind.LineBreakTrivia */;\n    }\n\n    switch (code) {\n      // tokens: []{}:,\n      case 123 /* CharacterCodes.openBrace */:\n        pos++;\n        return token = 1 /* SyntaxKind.OpenBraceToken */;\n      case 125 /* CharacterCodes.closeBrace */:\n        pos++;\n        return token = 2 /* SyntaxKind.CloseBraceToken */;\n      case 91 /* CharacterCodes.openBracket */:\n        pos++;\n        return token = 3 /* SyntaxKind.OpenBracketToken */;\n      case 93 /* CharacterCodes.closeBracket */:\n        pos++;\n        return token = 4 /* SyntaxKind.CloseBracketToken */;\n      case 58 /* CharacterCodes.colon */:\n        pos++;\n        return token = 6 /* SyntaxKind.ColonToken */;\n      case 44 /* CharacterCodes.comma */:\n        pos++;\n        return token = 5 /* SyntaxKind.CommaToken */;\n      // strings\n      case 34 /* CharacterCodes.doubleQuote */:\n        pos++;\n        value = scanString();\n        return token = 10 /* SyntaxKind.StringLiteral */;\n      // comments\n      case 47 /* CharacterCodes.slash */:\n        const start = pos - 1;\n        // Single-line comment\n        if (text.charCodeAt(pos + 1) === 47 /* CharacterCodes.slash */) {\n          pos += 2;\n          while (pos < len) {\n            if (isLineBreak(text.charCodeAt(pos))) {\n              break;\n            }\n            pos++;\n          }\n          value = text.substring(start, pos);\n          return token = 12 /* SyntaxKind.LineCommentTrivia */;\n        }\n        // Multi-line comment\n        if (text.charCodeAt(pos + 1) === 42 /* CharacterCodes.asterisk */) {\n          pos += 2;\n          const safeLength = len - 1; // For lookahead.\n          let commentClosed = false;\n          while (pos < safeLength) {\n            const ch = text.charCodeAt(pos);\n            if (ch === 42 /* CharacterCodes.asterisk */ && text.charCodeAt(pos + 1) === 47 /* CharacterCodes.slash */) {\n              pos += 2;\n              commentClosed = true;\n              break;\n            }\n            pos++;\n            if (isLineBreak(ch)) {\n              if (ch === 13 /* CharacterCodes.carriageReturn */ && text.charCodeAt(pos) === 10 /* CharacterCodes.lineFeed */) {\n                pos++;\n              }\n              lineNumber++;\n              tokenLineStartOffset = pos;\n            }\n          }\n          if (!commentClosed) {\n            pos++;\n            scanError = 1 /* ScanError.UnexpectedEndOfComment */;\n          }\n\n          value = text.substring(start, pos);\n          return token = 13 /* SyntaxKind.BlockCommentTrivia */;\n        }\n        // just a single slash\n        value += String.fromCharCode(code);\n        pos++;\n        return token = 16 /* SyntaxKind.Unknown */;\n      // numbers\n      case 45 /* CharacterCodes.minus */:\n        value += String.fromCharCode(code);\n        pos++;\n        if (pos === len || !isDigit(text.charCodeAt(pos))) {\n          return token = 16 /* SyntaxKind.Unknown */;\n        }\n      // found a minus, followed by a number so\n      // we fall through to proceed with scanning\n      // numbers\n      case 48 /* CharacterCodes._0 */:\n      case 49 /* CharacterCodes._1 */:\n      case 50 /* CharacterCodes._2 */:\n      case 51 /* CharacterCodes._3 */:\n      case 52 /* CharacterCodes._4 */:\n      case 53 /* CharacterCodes._5 */:\n      case 54 /* CharacterCodes._6 */:\n      case 55 /* CharacterCodes._7 */:\n      case 56 /* CharacterCodes._8 */:\n      case 57 /* CharacterCodes._9 */:\n        value += scanNumber();\n        return token = 11 /* SyntaxKind.NumericLiteral */;\n      // literals and unknown symbols\n      default:\n        // is a literal? Read the full word.\n        while (pos < len && isUnknownContentCharacter(code)) {\n          pos++;\n          code = text.charCodeAt(pos);\n        }\n        if (tokenOffset !== pos) {\n          value = text.substring(tokenOffset, pos);\n          // keywords: true, false, null\n          switch (value) {\n            case 'true':\n              return token = 8 /* SyntaxKind.TrueKeyword */;\n            case 'false':\n              return token = 9 /* SyntaxKind.FalseKeyword */;\n            case 'null':\n              return token = 7 /* SyntaxKind.NullKeyword */;\n          }\n\n          return token = 16 /* SyntaxKind.Unknown */;\n        }\n        // some\n        value += String.fromCharCode(code);\n        pos++;\n        return token = 16 /* SyntaxKind.Unknown */;\n    }\n  }\n\n  function isUnknownContentCharacter(code) {\n    if (isWhiteSpace(code) || isLineBreak(code)) {\n      return false;\n    }\n    switch (code) {\n      case 125 /* CharacterCodes.closeBrace */:\n      case 93 /* CharacterCodes.closeBracket */:\n      case 123 /* CharacterCodes.openBrace */:\n      case 91 /* CharacterCodes.openBracket */:\n      case 34 /* CharacterCodes.doubleQuote */:\n      case 58 /* CharacterCodes.colon */:\n      case 44 /* CharacterCodes.comma */:\n      case 47 /* CharacterCodes.slash */:\n        return false;\n    }\n    return true;\n  }\n  function scanNextNonTrivia() {\n    let result;\n    do {\n      result = scanNext();\n    } while (result >= 12 /* SyntaxKind.LineCommentTrivia */ && result <= 15 /* SyntaxKind.Trivia */);\n    return result;\n  }\n  return {\n    setPosition: setPosition,\n    getPosition: () => pos,\n    scan: ignoreTrivia ? scanNextNonTrivia : scanNext,\n    getToken: () => token,\n    getTokenValue: () => value,\n    getTokenOffset: () => tokenOffset,\n    getTokenLength: () => pos - tokenOffset,\n    getTokenStartLine: () => lineStartOffset,\n    getTokenStartCharacter: () => tokenOffset - prevTokenLineStartOffset,\n    getTokenError: () => scanError\n  };\n}\nfunction isWhiteSpace(ch) {\n  return ch === 32 /* CharacterCodes.space */ || ch === 9 /* CharacterCodes.tab */;\n}\n\nfunction isLineBreak(ch) {\n  return ch === 10 /* CharacterCodes.lineFeed */ || ch === 13 /* CharacterCodes.carriageReturn */;\n}\n\nfunction isDigit(ch) {\n  return ch >= 48 /* CharacterCodes._0 */ && ch <= 57 /* CharacterCodes._9 */;\n}\n\nvar CharacterCodes;\n(function (CharacterCodes) {\n  CharacterCodes[CharacterCodes[\"lineFeed\"] = 10] = \"lineFeed\";\n  CharacterCodes[CharacterCodes[\"carriageReturn\"] = 13] = \"carriageReturn\";\n  CharacterCodes[CharacterCodes[\"space\"] = 32] = \"space\";\n  CharacterCodes[CharacterCodes[\"_0\"] = 48] = \"_0\";\n  CharacterCodes[CharacterCodes[\"_1\"] = 49] = \"_1\";\n  CharacterCodes[CharacterCodes[\"_2\"] = 50] = \"_2\";\n  CharacterCodes[CharacterCodes[\"_3\"] = 51] = \"_3\";\n  CharacterCodes[CharacterCodes[\"_4\"] = 52] = \"_4\";\n  CharacterCodes[CharacterCodes[\"_5\"] = 53] = \"_5\";\n  CharacterCodes[CharacterCodes[\"_6\"] = 54] = \"_6\";\n  CharacterCodes[CharacterCodes[\"_7\"] = 55] = \"_7\";\n  CharacterCodes[CharacterCodes[\"_8\"] = 56] = \"_8\";\n  CharacterCodes[CharacterCodes[\"_9\"] = 57] = \"_9\";\n  CharacterCodes[CharacterCodes[\"a\"] = 97] = \"a\";\n  CharacterCodes[CharacterCodes[\"b\"] = 98] = \"b\";\n  CharacterCodes[CharacterCodes[\"c\"] = 99] = \"c\";\n  CharacterCodes[CharacterCodes[\"d\"] = 100] = \"d\";\n  CharacterCodes[CharacterCodes[\"e\"] = 101] = \"e\";\n  CharacterCodes[CharacterCodes[\"f\"] = 102] = \"f\";\n  CharacterCodes[CharacterCodes[\"g\"] = 103] = \"g\";\n  CharacterCodes[CharacterCodes[\"h\"] = 104] = \"h\";\n  CharacterCodes[CharacterCodes[\"i\"] = 105] = \"i\";\n  CharacterCodes[CharacterCodes[\"j\"] = 106] = \"j\";\n  CharacterCodes[CharacterCodes[\"k\"] = 107] = \"k\";\n  CharacterCodes[CharacterCodes[\"l\"] = 108] = \"l\";\n  CharacterCodes[CharacterCodes[\"m\"] = 109] = \"m\";\n  CharacterCodes[CharacterCodes[\"n\"] = 110] = \"n\";\n  CharacterCodes[CharacterCodes[\"o\"] = 111] = \"o\";\n  CharacterCodes[CharacterCodes[\"p\"] = 112] = \"p\";\n  CharacterCodes[CharacterCodes[\"q\"] = 113] = \"q\";\n  CharacterCodes[CharacterCodes[\"r\"] = 114] = \"r\";\n  CharacterCodes[CharacterCodes[\"s\"] = 115] = \"s\";\n  CharacterCodes[CharacterCodes[\"t\"] = 116] = \"t\";\n  CharacterCodes[CharacterCodes[\"u\"] = 117] = \"u\";\n  CharacterCodes[CharacterCodes[\"v\"] = 118] = \"v\";\n  CharacterCodes[CharacterCodes[\"w\"] = 119] = \"w\";\n  CharacterCodes[CharacterCodes[\"x\"] = 120] = \"x\";\n  CharacterCodes[CharacterCodes[\"y\"] = 121] = \"y\";\n  CharacterCodes[CharacterCodes[\"z\"] = 122] = \"z\";\n  CharacterCodes[CharacterCodes[\"A\"] = 65] = \"A\";\n  CharacterCodes[CharacterCodes[\"B\"] = 66] = \"B\";\n  CharacterCodes[CharacterCodes[\"C\"] = 67] = \"C\";\n  CharacterCodes[CharacterCodes[\"D\"] = 68] = \"D\";\n  CharacterCodes[CharacterCodes[\"E\"] = 69] = \"E\";\n  CharacterCodes[CharacterCodes[\"F\"] = 70] = \"F\";\n  CharacterCodes[CharacterCodes[\"G\"] = 71] = \"G\";\n  CharacterCodes[CharacterCodes[\"H\"] = 72] = \"H\";\n  CharacterCodes[CharacterCodes[\"I\"] = 73] = \"I\";\n  CharacterCodes[CharacterCodes[\"J\"] = 74] = \"J\";\n  CharacterCodes[CharacterCodes[\"K\"] = 75] = \"K\";\n  CharacterCodes[CharacterCodes[\"L\"] = 76] = \"L\";\n  CharacterCodes[CharacterCodes[\"M\"] = 77] = \"M\";\n  CharacterCodes[CharacterCodes[\"N\"] = 78] = \"N\";\n  CharacterCodes[CharacterCodes[\"O\"] = 79] = \"O\";\n  CharacterCodes[CharacterCodes[\"P\"] = 80] = \"P\";\n  CharacterCodes[CharacterCodes[\"Q\"] = 81] = \"Q\";\n  CharacterCodes[CharacterCodes[\"R\"] = 82] = \"R\";\n  CharacterCodes[CharacterCodes[\"S\"] = 83] = \"S\";\n  CharacterCodes[CharacterCodes[\"T\"] = 84] = \"T\";\n  CharacterCodes[CharacterCodes[\"U\"] = 85] = \"U\";\n  CharacterCodes[CharacterCodes[\"V\"] = 86] = \"V\";\n  CharacterCodes[CharacterCodes[\"W\"] = 87] = \"W\";\n  CharacterCodes[CharacterCodes[\"X\"] = 88] = \"X\";\n  CharacterCodes[CharacterCodes[\"Y\"] = 89] = \"Y\";\n  CharacterCodes[CharacterCodes[\"Z\"] = 90] = \"Z\";\n  CharacterCodes[CharacterCodes[\"asterisk\"] = 42] = \"asterisk\";\n  CharacterCodes[CharacterCodes[\"backslash\"] = 92] = \"backslash\";\n  CharacterCodes[CharacterCodes[\"closeBrace\"] = 125] = \"closeBrace\";\n  CharacterCodes[CharacterCodes[\"closeBracket\"] = 93] = \"closeBracket\";\n  CharacterCodes[CharacterCodes[\"colon\"] = 58] = \"colon\";\n  CharacterCodes[CharacterCodes[\"comma\"] = 44] = \"comma\";\n  CharacterCodes[CharacterCodes[\"dot\"] = 46] = \"dot\";\n  CharacterCodes[CharacterCodes[\"doubleQuote\"] = 34] = \"doubleQuote\";\n  CharacterCodes[CharacterCodes[\"minus\"] = 45] = \"minus\";\n  CharacterCodes[CharacterCodes[\"openBrace\"] = 123] = \"openBrace\";\n  CharacterCodes[CharacterCodes[\"openBracket\"] = 91] = \"openBracket\";\n  CharacterCodes[CharacterCodes[\"plus\"] = 43] = \"plus\";\n  CharacterCodes[CharacterCodes[\"slash\"] = 47] = \"slash\";\n  CharacterCodes[CharacterCodes[\"formFeed\"] = 12] = \"formFeed\";\n  CharacterCodes[CharacterCodes[\"tab\"] = 9] = \"tab\";\n})(CharacterCodes || (CharacterCodes = {}));","map":{"version":3,"names":["createScanner","text","ignoreTrivia","len","length","pos","value","tokenOffset","token","lineNumber","lineStartOffset","tokenLineStartOffset","prevTokenLineStartOffset","scanError","scanHexDigits","count","exact","digits","ch","charCodeAt","setPosition","newPosition","scanNumber","start","isDigit","substring","end","scanString","result","ch2","ch3","String","fromCharCode","isLineBreak","scanNext","code","isWhiteSpace","safeLength","commentClosed","isUnknownContentCharacter","scanNextNonTrivia","getPosition","scan","getToken","getTokenValue","getTokenOffset","getTokenLength","getTokenStartLine","getTokenStartCharacter","getTokenError","CharacterCodes"],"sources":["/Users/sabyrzhanolzhabay/Web-Dev/Arabakz/ArabaFrontend/node_modules/jsonc-parser/lib/esm/impl/scanner.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n/**\n * Creates a JSON scanner on the given text.\n * If ignoreTrivia is set, whitespaces or comments are ignored.\n */\nexport function createScanner(text, ignoreTrivia = false) {\n    const len = text.length;\n    let pos = 0, value = '', tokenOffset = 0, token = 16 /* SyntaxKind.Unknown */, lineNumber = 0, lineStartOffset = 0, tokenLineStartOffset = 0, prevTokenLineStartOffset = 0, scanError = 0 /* ScanError.None */;\n    function scanHexDigits(count, exact) {\n        let digits = 0;\n        let value = 0;\n        while (digits < count || !exact) {\n            let ch = text.charCodeAt(pos);\n            if (ch >= 48 /* CharacterCodes._0 */ && ch <= 57 /* CharacterCodes._9 */) {\n                value = value * 16 + ch - 48 /* CharacterCodes._0 */;\n            }\n            else if (ch >= 65 /* CharacterCodes.A */ && ch <= 70 /* CharacterCodes.F */) {\n                value = value * 16 + ch - 65 /* CharacterCodes.A */ + 10;\n            }\n            else if (ch >= 97 /* CharacterCodes.a */ && ch <= 102 /* CharacterCodes.f */) {\n                value = value * 16 + ch - 97 /* CharacterCodes.a */ + 10;\n            }\n            else {\n                break;\n            }\n            pos++;\n            digits++;\n        }\n        if (digits < count) {\n            value = -1;\n        }\n        return value;\n    }\n    function setPosition(newPosition) {\n        pos = newPosition;\n        value = '';\n        tokenOffset = 0;\n        token = 16 /* SyntaxKind.Unknown */;\n        scanError = 0 /* ScanError.None */;\n    }\n    function scanNumber() {\n        let start = pos;\n        if (text.charCodeAt(pos) === 48 /* CharacterCodes._0 */) {\n            pos++;\n        }\n        else {\n            pos++;\n            while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n            }\n        }\n        if (pos < text.length && text.charCodeAt(pos) === 46 /* CharacterCodes.dot */) {\n            pos++;\n            if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n                while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                    pos++;\n                }\n            }\n            else {\n                scanError = 3 /* ScanError.UnexpectedEndOfNumber */;\n                return text.substring(start, pos);\n            }\n        }\n        let end = pos;\n        if (pos < text.length && (text.charCodeAt(pos) === 69 /* CharacterCodes.E */ || text.charCodeAt(pos) === 101 /* CharacterCodes.e */)) {\n            pos++;\n            if (pos < text.length && text.charCodeAt(pos) === 43 /* CharacterCodes.plus */ || text.charCodeAt(pos) === 45 /* CharacterCodes.minus */) {\n                pos++;\n            }\n            if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n                while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                    pos++;\n                }\n                end = pos;\n            }\n            else {\n                scanError = 3 /* ScanError.UnexpectedEndOfNumber */;\n            }\n        }\n        return text.substring(start, end);\n    }\n    function scanString() {\n        let result = '', start = pos;\n        while (true) {\n            if (pos >= len) {\n                result += text.substring(start, pos);\n                scanError = 2 /* ScanError.UnexpectedEndOfString */;\n                break;\n            }\n            const ch = text.charCodeAt(pos);\n            if (ch === 34 /* CharacterCodes.doubleQuote */) {\n                result += text.substring(start, pos);\n                pos++;\n                break;\n            }\n            if (ch === 92 /* CharacterCodes.backslash */) {\n                result += text.substring(start, pos);\n                pos++;\n                if (pos >= len) {\n                    scanError = 2 /* ScanError.UnexpectedEndOfString */;\n                    break;\n                }\n                const ch2 = text.charCodeAt(pos++);\n                switch (ch2) {\n                    case 34 /* CharacterCodes.doubleQuote */:\n                        result += '\\\"';\n                        break;\n                    case 92 /* CharacterCodes.backslash */:\n                        result += '\\\\';\n                        break;\n                    case 47 /* CharacterCodes.slash */:\n                        result += '/';\n                        break;\n                    case 98 /* CharacterCodes.b */:\n                        result += '\\b';\n                        break;\n                    case 102 /* CharacterCodes.f */:\n                        result += '\\f';\n                        break;\n                    case 110 /* CharacterCodes.n */:\n                        result += '\\n';\n                        break;\n                    case 114 /* CharacterCodes.r */:\n                        result += '\\r';\n                        break;\n                    case 116 /* CharacterCodes.t */:\n                        result += '\\t';\n                        break;\n                    case 117 /* CharacterCodes.u */:\n                        const ch3 = scanHexDigits(4, true);\n                        if (ch3 >= 0) {\n                            result += String.fromCharCode(ch3);\n                        }\n                        else {\n                            scanError = 4 /* ScanError.InvalidUnicode */;\n                        }\n                        break;\n                    default:\n                        scanError = 5 /* ScanError.InvalidEscapeCharacter */;\n                }\n                start = pos;\n                continue;\n            }\n            if (ch >= 0 && ch <= 0x1f) {\n                if (isLineBreak(ch)) {\n                    result += text.substring(start, pos);\n                    scanError = 2 /* ScanError.UnexpectedEndOfString */;\n                    break;\n                }\n                else {\n                    scanError = 6 /* ScanError.InvalidCharacter */;\n                    // mark as error but continue with string\n                }\n            }\n            pos++;\n        }\n        return result;\n    }\n    function scanNext() {\n        value = '';\n        scanError = 0 /* ScanError.None */;\n        tokenOffset = pos;\n        lineStartOffset = lineNumber;\n        prevTokenLineStartOffset = tokenLineStartOffset;\n        if (pos >= len) {\n            // at the end\n            tokenOffset = len;\n            return token = 17 /* SyntaxKind.EOF */;\n        }\n        let code = text.charCodeAt(pos);\n        // trivia: whitespace\n        if (isWhiteSpace(code)) {\n            do {\n                pos++;\n                value += String.fromCharCode(code);\n                code = text.charCodeAt(pos);\n            } while (isWhiteSpace(code));\n            return token = 15 /* SyntaxKind.Trivia */;\n        }\n        // trivia: newlines\n        if (isLineBreak(code)) {\n            pos++;\n            value += String.fromCharCode(code);\n            if (code === 13 /* CharacterCodes.carriageReturn */ && text.charCodeAt(pos) === 10 /* CharacterCodes.lineFeed */) {\n                pos++;\n                value += '\\n';\n            }\n            lineNumber++;\n            tokenLineStartOffset = pos;\n            return token = 14 /* SyntaxKind.LineBreakTrivia */;\n        }\n        switch (code) {\n            // tokens: []{}:,\n            case 123 /* CharacterCodes.openBrace */:\n                pos++;\n                return token = 1 /* SyntaxKind.OpenBraceToken */;\n            case 125 /* CharacterCodes.closeBrace */:\n                pos++;\n                return token = 2 /* SyntaxKind.CloseBraceToken */;\n            case 91 /* CharacterCodes.openBracket */:\n                pos++;\n                return token = 3 /* SyntaxKind.OpenBracketToken */;\n            case 93 /* CharacterCodes.closeBracket */:\n                pos++;\n                return token = 4 /* SyntaxKind.CloseBracketToken */;\n            case 58 /* CharacterCodes.colon */:\n                pos++;\n                return token = 6 /* SyntaxKind.ColonToken */;\n            case 44 /* CharacterCodes.comma */:\n                pos++;\n                return token = 5 /* SyntaxKind.CommaToken */;\n            // strings\n            case 34 /* CharacterCodes.doubleQuote */:\n                pos++;\n                value = scanString();\n                return token = 10 /* SyntaxKind.StringLiteral */;\n            // comments\n            case 47 /* CharacterCodes.slash */:\n                const start = pos - 1;\n                // Single-line comment\n                if (text.charCodeAt(pos + 1) === 47 /* CharacterCodes.slash */) {\n                    pos += 2;\n                    while (pos < len) {\n                        if (isLineBreak(text.charCodeAt(pos))) {\n                            break;\n                        }\n                        pos++;\n                    }\n                    value = text.substring(start, pos);\n                    return token = 12 /* SyntaxKind.LineCommentTrivia */;\n                }\n                // Multi-line comment\n                if (text.charCodeAt(pos + 1) === 42 /* CharacterCodes.asterisk */) {\n                    pos += 2;\n                    const safeLength = len - 1; // For lookahead.\n                    let commentClosed = false;\n                    while (pos < safeLength) {\n                        const ch = text.charCodeAt(pos);\n                        if (ch === 42 /* CharacterCodes.asterisk */ && text.charCodeAt(pos + 1) === 47 /* CharacterCodes.slash */) {\n                            pos += 2;\n                            commentClosed = true;\n                            break;\n                        }\n                        pos++;\n                        if (isLineBreak(ch)) {\n                            if (ch === 13 /* CharacterCodes.carriageReturn */ && text.charCodeAt(pos) === 10 /* CharacterCodes.lineFeed */) {\n                                pos++;\n                            }\n                            lineNumber++;\n                            tokenLineStartOffset = pos;\n                        }\n                    }\n                    if (!commentClosed) {\n                        pos++;\n                        scanError = 1 /* ScanError.UnexpectedEndOfComment */;\n                    }\n                    value = text.substring(start, pos);\n                    return token = 13 /* SyntaxKind.BlockCommentTrivia */;\n                }\n                // just a single slash\n                value += String.fromCharCode(code);\n                pos++;\n                return token = 16 /* SyntaxKind.Unknown */;\n            // numbers\n            case 45 /* CharacterCodes.minus */:\n                value += String.fromCharCode(code);\n                pos++;\n                if (pos === len || !isDigit(text.charCodeAt(pos))) {\n                    return token = 16 /* SyntaxKind.Unknown */;\n                }\n            // found a minus, followed by a number so\n            // we fall through to proceed with scanning\n            // numbers\n            case 48 /* CharacterCodes._0 */:\n            case 49 /* CharacterCodes._1 */:\n            case 50 /* CharacterCodes._2 */:\n            case 51 /* CharacterCodes._3 */:\n            case 52 /* CharacterCodes._4 */:\n            case 53 /* CharacterCodes._5 */:\n            case 54 /* CharacterCodes._6 */:\n            case 55 /* CharacterCodes._7 */:\n            case 56 /* CharacterCodes._8 */:\n            case 57 /* CharacterCodes._9 */:\n                value += scanNumber();\n                return token = 11 /* SyntaxKind.NumericLiteral */;\n            // literals and unknown symbols\n            default:\n                // is a literal? Read the full word.\n                while (pos < len && isUnknownContentCharacter(code)) {\n                    pos++;\n                    code = text.charCodeAt(pos);\n                }\n                if (tokenOffset !== pos) {\n                    value = text.substring(tokenOffset, pos);\n                    // keywords: true, false, null\n                    switch (value) {\n                        case 'true': return token = 8 /* SyntaxKind.TrueKeyword */;\n                        case 'false': return token = 9 /* SyntaxKind.FalseKeyword */;\n                        case 'null': return token = 7 /* SyntaxKind.NullKeyword */;\n                    }\n                    return token = 16 /* SyntaxKind.Unknown */;\n                }\n                // some\n                value += String.fromCharCode(code);\n                pos++;\n                return token = 16 /* SyntaxKind.Unknown */;\n        }\n    }\n    function isUnknownContentCharacter(code) {\n        if (isWhiteSpace(code) || isLineBreak(code)) {\n            return false;\n        }\n        switch (code) {\n            case 125 /* CharacterCodes.closeBrace */:\n            case 93 /* CharacterCodes.closeBracket */:\n            case 123 /* CharacterCodes.openBrace */:\n            case 91 /* CharacterCodes.openBracket */:\n            case 34 /* CharacterCodes.doubleQuote */:\n            case 58 /* CharacterCodes.colon */:\n            case 44 /* CharacterCodes.comma */:\n            case 47 /* CharacterCodes.slash */:\n                return false;\n        }\n        return true;\n    }\n    function scanNextNonTrivia() {\n        let result;\n        do {\n            result = scanNext();\n        } while (result >= 12 /* SyntaxKind.LineCommentTrivia */ && result <= 15 /* SyntaxKind.Trivia */);\n        return result;\n    }\n    return {\n        setPosition: setPosition,\n        getPosition: () => pos,\n        scan: ignoreTrivia ? scanNextNonTrivia : scanNext,\n        getToken: () => token,\n        getTokenValue: () => value,\n        getTokenOffset: () => tokenOffset,\n        getTokenLength: () => pos - tokenOffset,\n        getTokenStartLine: () => lineStartOffset,\n        getTokenStartCharacter: () => tokenOffset - prevTokenLineStartOffset,\n        getTokenError: () => scanError,\n    };\n}\nfunction isWhiteSpace(ch) {\n    return ch === 32 /* CharacterCodes.space */ || ch === 9 /* CharacterCodes.tab */;\n}\nfunction isLineBreak(ch) {\n    return ch === 10 /* CharacterCodes.lineFeed */ || ch === 13 /* CharacterCodes.carriageReturn */;\n}\nfunction isDigit(ch) {\n    return ch >= 48 /* CharacterCodes._0 */ && ch <= 57 /* CharacterCodes._9 */;\n}\nvar CharacterCodes;\n(function (CharacterCodes) {\n    CharacterCodes[CharacterCodes[\"lineFeed\"] = 10] = \"lineFeed\";\n    CharacterCodes[CharacterCodes[\"carriageReturn\"] = 13] = \"carriageReturn\";\n    CharacterCodes[CharacterCodes[\"space\"] = 32] = \"space\";\n    CharacterCodes[CharacterCodes[\"_0\"] = 48] = \"_0\";\n    CharacterCodes[CharacterCodes[\"_1\"] = 49] = \"_1\";\n    CharacterCodes[CharacterCodes[\"_2\"] = 50] = \"_2\";\n    CharacterCodes[CharacterCodes[\"_3\"] = 51] = \"_3\";\n    CharacterCodes[CharacterCodes[\"_4\"] = 52] = \"_4\";\n    CharacterCodes[CharacterCodes[\"_5\"] = 53] = \"_5\";\n    CharacterCodes[CharacterCodes[\"_6\"] = 54] = \"_6\";\n    CharacterCodes[CharacterCodes[\"_7\"] = 55] = \"_7\";\n    CharacterCodes[CharacterCodes[\"_8\"] = 56] = \"_8\";\n    CharacterCodes[CharacterCodes[\"_9\"] = 57] = \"_9\";\n    CharacterCodes[CharacterCodes[\"a\"] = 97] = \"a\";\n    CharacterCodes[CharacterCodes[\"b\"] = 98] = \"b\";\n    CharacterCodes[CharacterCodes[\"c\"] = 99] = \"c\";\n    CharacterCodes[CharacterCodes[\"d\"] = 100] = \"d\";\n    CharacterCodes[CharacterCodes[\"e\"] = 101] = \"e\";\n    CharacterCodes[CharacterCodes[\"f\"] = 102] = \"f\";\n    CharacterCodes[CharacterCodes[\"g\"] = 103] = \"g\";\n    CharacterCodes[CharacterCodes[\"h\"] = 104] = \"h\";\n    CharacterCodes[CharacterCodes[\"i\"] = 105] = \"i\";\n    CharacterCodes[CharacterCodes[\"j\"] = 106] = \"j\";\n    CharacterCodes[CharacterCodes[\"k\"] = 107] = \"k\";\n    CharacterCodes[CharacterCodes[\"l\"] = 108] = \"l\";\n    CharacterCodes[CharacterCodes[\"m\"] = 109] = \"m\";\n    CharacterCodes[CharacterCodes[\"n\"] = 110] = \"n\";\n    CharacterCodes[CharacterCodes[\"o\"] = 111] = \"o\";\n    CharacterCodes[CharacterCodes[\"p\"] = 112] = \"p\";\n    CharacterCodes[CharacterCodes[\"q\"] = 113] = \"q\";\n    CharacterCodes[CharacterCodes[\"r\"] = 114] = \"r\";\n    CharacterCodes[CharacterCodes[\"s\"] = 115] = \"s\";\n    CharacterCodes[CharacterCodes[\"t\"] = 116] = \"t\";\n    CharacterCodes[CharacterCodes[\"u\"] = 117] = \"u\";\n    CharacterCodes[CharacterCodes[\"v\"] = 118] = \"v\";\n    CharacterCodes[CharacterCodes[\"w\"] = 119] = \"w\";\n    CharacterCodes[CharacterCodes[\"x\"] = 120] = \"x\";\n    CharacterCodes[CharacterCodes[\"y\"] = 121] = \"y\";\n    CharacterCodes[CharacterCodes[\"z\"] = 122] = \"z\";\n    CharacterCodes[CharacterCodes[\"A\"] = 65] = \"A\";\n    CharacterCodes[CharacterCodes[\"B\"] = 66] = \"B\";\n    CharacterCodes[CharacterCodes[\"C\"] = 67] = \"C\";\n    CharacterCodes[CharacterCodes[\"D\"] = 68] = \"D\";\n    CharacterCodes[CharacterCodes[\"E\"] = 69] = \"E\";\n    CharacterCodes[CharacterCodes[\"F\"] = 70] = \"F\";\n    CharacterCodes[CharacterCodes[\"G\"] = 71] = \"G\";\n    CharacterCodes[CharacterCodes[\"H\"] = 72] = \"H\";\n    CharacterCodes[CharacterCodes[\"I\"] = 73] = \"I\";\n    CharacterCodes[CharacterCodes[\"J\"] = 74] = \"J\";\n    CharacterCodes[CharacterCodes[\"K\"] = 75] = \"K\";\n    CharacterCodes[CharacterCodes[\"L\"] = 76] = \"L\";\n    CharacterCodes[CharacterCodes[\"M\"] = 77] = \"M\";\n    CharacterCodes[CharacterCodes[\"N\"] = 78] = \"N\";\n    CharacterCodes[CharacterCodes[\"O\"] = 79] = \"O\";\n    CharacterCodes[CharacterCodes[\"P\"] = 80] = \"P\";\n    CharacterCodes[CharacterCodes[\"Q\"] = 81] = \"Q\";\n    CharacterCodes[CharacterCodes[\"R\"] = 82] = \"R\";\n    CharacterCodes[CharacterCodes[\"S\"] = 83] = \"S\";\n    CharacterCodes[CharacterCodes[\"T\"] = 84] = \"T\";\n    CharacterCodes[CharacterCodes[\"U\"] = 85] = \"U\";\n    CharacterCodes[CharacterCodes[\"V\"] = 86] = \"V\";\n    CharacterCodes[CharacterCodes[\"W\"] = 87] = \"W\";\n    CharacterCodes[CharacterCodes[\"X\"] = 88] = \"X\";\n    CharacterCodes[CharacterCodes[\"Y\"] = 89] = \"Y\";\n    CharacterCodes[CharacterCodes[\"Z\"] = 90] = \"Z\";\n    CharacterCodes[CharacterCodes[\"asterisk\"] = 42] = \"asterisk\";\n    CharacterCodes[CharacterCodes[\"backslash\"] = 92] = \"backslash\";\n    CharacterCodes[CharacterCodes[\"closeBrace\"] = 125] = \"closeBrace\";\n    CharacterCodes[CharacterCodes[\"closeBracket\"] = 93] = \"closeBracket\";\n    CharacterCodes[CharacterCodes[\"colon\"] = 58] = \"colon\";\n    CharacterCodes[CharacterCodes[\"comma\"] = 44] = \"comma\";\n    CharacterCodes[CharacterCodes[\"dot\"] = 46] = \"dot\";\n    CharacterCodes[CharacterCodes[\"doubleQuote\"] = 34] = \"doubleQuote\";\n    CharacterCodes[CharacterCodes[\"minus\"] = 45] = \"minus\";\n    CharacterCodes[CharacterCodes[\"openBrace\"] = 123] = \"openBrace\";\n    CharacterCodes[CharacterCodes[\"openBracket\"] = 91] = \"openBracket\";\n    CharacterCodes[CharacterCodes[\"plus\"] = 43] = \"plus\";\n    CharacterCodes[CharacterCodes[\"slash\"] = 47] = \"slash\";\n    CharacterCodes[CharacterCodes[\"formFeed\"] = 12] = \"formFeed\";\n    CharacterCodes[CharacterCodes[\"tab\"] = 9] = \"tab\";\n})(CharacterCodes || (CharacterCodes = {}));\n"],"mappings":"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Ac,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG;EAC/CA,cAAc,CAACA,cAAc,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG;EAC/CA,cAAc,CAACA,cAAc,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG;EAC/CA,cAAc,CAACA,cAAc,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG;EAC/CA,cAAc,CAACA,cAAc,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG;EAC/CA,cAAc,CAACA,cAAc,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG;EAC/CA,cAAc,CAACA,cAAc,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG;EAC/CA,cAAc,CAACA,cAAc,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG;EAC/CA,cAAc,CAACA,cAAc,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG;EAC/CA,cAAc,CAACA,cAAc,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG;EAC/CA,cAAc,CAACA,cAAc,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG;EAC/CA,cAAc,CAACA,cAAc,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG;EAC/CA,cAAc,CAACA,cAAc,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG;EAC/CA,cAAc,CAACA,cAAc,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG;EAC/CA,cAAc,CAACA,cAAc,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG;EAC/CA,cAAc,CAACA,cAAc,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG;EAC/CA,cAAc,CAACA,cAAc,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG;EAC/CA,cAAc,CAACA,cAAc,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG;EAC/CA,cAAc,CAACA,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG;EAC9CA,cAAc,CAACA,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG;EAC9CA,cAAc,CAACA,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG;EAC9CA,cAAc,CAACA,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG;EAC9CA,cAAc,CAACA,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG;EAC9CA,cAAc,CAACA,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG;EAC9CA,cAAc,CAACA,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG;EAC9CA,cAAc,CAACA,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG;EAC9CA,cAAc,CAACA,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG;EAC9CA,cAAc,CAACA,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG;EAC9CA,cAAc,CAACA,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG;EAC9CA,cAAc,CAACA,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG;EAC9CA,cAAc,CAACA,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG;EAC9CA,cAAc,CAACA,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG;EAC9CA,cAAc,CAACA,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG;EAC9CA,cAAc,CAACA,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG;EAC9CA,cAAc,CAACA,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG;EAC9CA,cAAc,CAACA,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG;EAC9CA,cAAc,CAACA,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG;EAC9CA,cAAc,CAACA,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG;EAC9CA,cAAc,CAACA,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG;EAC9CA,cAAc,CAACA,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG;EAC9CA,cAAc,CAACA,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG;EAC9CA,cAAc,CAACA,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG;EAC9CA,cAAc,CAACA,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG;EAC9CA,cAAc,CAACA,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,GAAG;EAC9CA,cAAc,CAACA,cAAc,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC,GAAG,UAAU;EAC5DA,cAAc,CAACA,cAAc,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,GAAG,WAAW;EAC9DA,cAAc,CAACA,cAAc,CAAC,YAAY,CAAC,GAAG,GAAG,CAAC,GAAG,YAAY;EACjEA,cAAc,CAACA,cAAc,CAAC,cAAc,CAAC,GAAG,EAAE,CAAC,GAAG,cAAc;EACpEA,cAAc,CAACA,cAAc,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,GAAG,OAAO;EACtDA,cAAc,CAACA,cAAc,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,GAAG,OAAO;EACtDA,cAAc,CAACA,cAAc,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,GAAG,KAAK;EAClDA,cAAc,CAACA,cAAc,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC,GAAG,aAAa;EAClEA,cAAc,CAACA,cAAc,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,GAAG,OAAO;EACtDA,cAAc,CAACA,cAAc,CAAC,WAAW,CAAC,GAAG,GAAG,CAAC,GAAG,WAAW;EAC/DA,cAAc,CAACA,cAAc,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC,GAAG,aAAa;EAClEA,cAAc,CAACA,cAAc,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,GAAG,MAAM;EACpDA,cAAc,CAACA,cAAc,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,GAAG,OAAO;EACtDA,cAAc,CAACA,cAAc,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC,GAAG,UAAU;EAC5DA,cAAc,CAACA,cAAc,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK;AACrD,CAAC,EAAEA,cAAc,KAAKA,cAAc,GAAG,CAAC,CAAC,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}