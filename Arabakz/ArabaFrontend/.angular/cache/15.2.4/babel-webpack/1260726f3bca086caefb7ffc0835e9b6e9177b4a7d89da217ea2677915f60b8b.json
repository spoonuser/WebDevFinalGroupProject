{"ast":null,"code":"/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\n/**\n * A data structure which is a combination of an array and a set. Adding a new\n * member is O(1), testing for membership is O(1), and finding the index of an\n * element is O(1). Removing elements from the set is not supported. Only\n * strings are supported for membership.\n */\nclass ArraySet {\n  constructor() {\n    this._array = [];\n    this._set = new Map();\n  }\n\n  /**\n   * Static method for creating ArraySet instances from an existing array.\n   */\n  static fromArray(aArray, aAllowDuplicates) {\n    const set = new ArraySet();\n    for (let i = 0, len = aArray.length; i < len; i++) {\n      set.add(aArray[i], aAllowDuplicates);\n    }\n    return set;\n  }\n\n  /**\n   * Return how many unique items are in this ArraySet. If duplicates have been\n   * added, than those do not count towards the size.\n   *\n   * @returns Number\n   */\n  size() {\n    return this._set.size;\n  }\n\n  /**\n   * Add the given string to this set.\n   *\n   * @param String aStr\n   */\n  add(aStr, aAllowDuplicates) {\n    const isDuplicate = this.has(aStr);\n    const idx = this._array.length;\n    if (!isDuplicate || aAllowDuplicates) {\n      this._array.push(aStr);\n    }\n    if (!isDuplicate) {\n      this._set.set(aStr, idx);\n    }\n  }\n\n  /**\n   * Is the given string a member of this set?\n   *\n   * @param String aStr\n   */\n  has(aStr) {\n    return this._set.has(aStr);\n  }\n\n  /**\n   * What is the index of the given string in the array?\n   *\n   * @param String aStr\n   */\n  indexOf(aStr) {\n    const idx = this._set.get(aStr);\n    if (idx >= 0) {\n      return idx;\n    }\n    throw new Error('\"' + aStr + '\" is not in the set.');\n  }\n\n  /**\n   * What is the element at the given index?\n   *\n   * @param Number aIdx\n   */\n  at(aIdx) {\n    if (aIdx >= 0 && aIdx < this._array.length) {\n      return this._array[aIdx];\n    }\n    throw new Error(\"No element indexed by \" + aIdx);\n  }\n\n  /**\n   * Returns the array representation of this set (which has the proper indices\n   * indicated by indexOf). Note that this is a copy of the internal array used\n   * for storing the members so that no one can mess with internal state.\n   */\n  toArray() {\n    return this._array.slice();\n  }\n}\nexports.ArraySet = ArraySet;","map":{"version":3,"names":["ArraySet","constructor","_array","_set","Map","fromArray","aArray","aAllowDuplicates","set","i","len","length","add","size","aStr","isDuplicate","has","idx","push","indexOf","get","Error","at","aIdx","toArray","slice","exports"],"sources":["/Users/sabyrzhanolzhabay/Web-Dev/Arabakz/ArabaFrontend/node_modules/source-map/lib/array-set.js"],"sourcesContent":["/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\n/**\n * A data structure which is a combination of an array and a set. Adding a new\n * member is O(1), testing for membership is O(1), and finding the index of an\n * element is O(1). Removing elements from the set is not supported. Only\n * strings are supported for membership.\n */\nclass ArraySet {\n  constructor() {\n    this._array = [];\n    this._set = new Map();\n  }\n\n  /**\n   * Static method for creating ArraySet instances from an existing array.\n   */\n  static fromArray(aArray, aAllowDuplicates) {\n    const set = new ArraySet();\n    for (let i = 0, len = aArray.length; i < len; i++) {\n      set.add(aArray[i], aAllowDuplicates);\n    }\n    return set;\n  }\n\n  /**\n   * Return how many unique items are in this ArraySet. If duplicates have been\n   * added, than those do not count towards the size.\n   *\n   * @returns Number\n   */\n  size() {\n    return this._set.size;\n  }\n\n  /**\n   * Add the given string to this set.\n   *\n   * @param String aStr\n   */\n  add(aStr, aAllowDuplicates) {\n    const isDuplicate = this.has(aStr);\n    const idx = this._array.length;\n    if (!isDuplicate || aAllowDuplicates) {\n      this._array.push(aStr);\n    }\n    if (!isDuplicate) {\n      this._set.set(aStr, idx);\n    }\n  }\n\n  /**\n   * Is the given string a member of this set?\n   *\n   * @param String aStr\n   */\n  has(aStr) {\n      return this._set.has(aStr);\n  }\n\n  /**\n   * What is the index of the given string in the array?\n   *\n   * @param String aStr\n   */\n  indexOf(aStr) {\n    const idx = this._set.get(aStr);\n    if (idx >= 0) {\n        return idx;\n    }\n    throw new Error('\"' + aStr + '\" is not in the set.');\n  }\n\n  /**\n   * What is the element at the given index?\n   *\n   * @param Number aIdx\n   */\n  at(aIdx) {\n    if (aIdx >= 0 && aIdx < this._array.length) {\n      return this._array[aIdx];\n    }\n    throw new Error(\"No element indexed by \" + aIdx);\n  }\n\n  /**\n   * Returns the array representation of this set (which has the proper indices\n   * indicated by indexOf). Note that this is a copy of the internal array used\n   * for storing the members so that no one can mess with internal state.\n   */\n  toArray() {\n    return this._array.slice();\n  }\n}\nexports.ArraySet = ArraySet;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,QAAQ,CAAC;EACbC,WAAW,GAAG;IACZ,IAAI,CAACC,MAAM,GAAG,EAAE;IAChB,IAAI,CAACC,IAAI,GAAG,IAAIC,GAAG,EAAE;EACvB;;EAEA;AACF;AACA;EACE,OAAOC,SAAS,CAACC,MAAM,EAAEC,gBAAgB,EAAE;IACzC,MAAMC,GAAG,GAAG,IAAIR,QAAQ,EAAE;IAC1B,KAAK,IAAIS,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGJ,MAAM,CAACK,MAAM,EAAEF,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;MACjDD,GAAG,CAACI,GAAG,CAACN,MAAM,CAACG,CAAC,CAAC,EAAEF,gBAAgB,CAAC;IACtC;IACA,OAAOC,GAAG;EACZ;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEK,IAAI,GAAG;IACL,OAAO,IAAI,CAACV,IAAI,CAACU,IAAI;EACvB;;EAEA;AACF;AACA;AACA;AACA;EACED,GAAG,CAACE,IAAI,EAAEP,gBAAgB,EAAE;IAC1B,MAAMQ,WAAW,GAAG,IAAI,CAACC,GAAG,CAACF,IAAI,CAAC;IAClC,MAAMG,GAAG,GAAG,IAAI,CAACf,MAAM,CAACS,MAAM;IAC9B,IAAI,CAACI,WAAW,IAAIR,gBAAgB,EAAE;MACpC,IAAI,CAACL,MAAM,CAACgB,IAAI,CAACJ,IAAI,CAAC;IACxB;IACA,IAAI,CAACC,WAAW,EAAE;MAChB,IAAI,CAACZ,IAAI,CAACK,GAAG,CAACM,IAAI,EAAEG,GAAG,CAAC;IAC1B;EACF;;EAEA;AACF;AACA;AACA;AACA;EACED,GAAG,CAACF,IAAI,EAAE;IACN,OAAO,IAAI,CAACX,IAAI,CAACa,GAAG,CAACF,IAAI,CAAC;EAC9B;;EAEA;AACF;AACA;AACA;AACA;EACEK,OAAO,CAACL,IAAI,EAAE;IACZ,MAAMG,GAAG,GAAG,IAAI,CAACd,IAAI,CAACiB,GAAG,CAACN,IAAI,CAAC;IAC/B,IAAIG,GAAG,IAAI,CAAC,EAAE;MACV,OAAOA,GAAG;IACd;IACA,MAAM,IAAII,KAAK,CAAC,GAAG,GAAGP,IAAI,GAAG,sBAAsB,CAAC;EACtD;;EAEA;AACF;AACA;AACA;AACA;EACEQ,EAAE,CAACC,IAAI,EAAE;IACP,IAAIA,IAAI,IAAI,CAAC,IAAIA,IAAI,GAAG,IAAI,CAACrB,MAAM,CAACS,MAAM,EAAE;MAC1C,OAAO,IAAI,CAACT,MAAM,CAACqB,IAAI,CAAC;IAC1B;IACA,MAAM,IAAIF,KAAK,CAAC,wBAAwB,GAAGE,IAAI,CAAC;EAClD;;EAEA;AACF;AACA;AACA;AACA;EACEC,OAAO,GAAG;IACR,OAAO,IAAI,CAACtB,MAAM,CAACuB,KAAK,EAAE;EAC5B;AACF;AACAC,OAAO,CAAC1B,QAAQ,GAAGA,QAAQ"},"metadata":{},"sourceType":"script","externalDependencies":[]}