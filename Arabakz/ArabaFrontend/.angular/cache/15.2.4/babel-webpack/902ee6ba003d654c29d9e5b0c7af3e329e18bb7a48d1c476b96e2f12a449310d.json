{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst codegen_1 = require(\"../../compile/codegen\");\nconst util_1 = require(\"../../compile/util\");\nconst equal_1 = require(\"../../runtime/equal\");\nconst error = {\n  message: \"must be equal to one of the allowed values\",\n  params: ({\n    schemaCode\n  }) => (0, codegen_1._)`{allowedValues: ${schemaCode}}`\n};\nconst def = {\n  keyword: \"enum\",\n  schemaType: \"array\",\n  $data: true,\n  error,\n  code(cxt) {\n    const {\n      gen,\n      data,\n      $data,\n      schema,\n      schemaCode,\n      it\n    } = cxt;\n    if (!$data && schema.length === 0) throw new Error(\"enum must have non-empty array\");\n    const useLoop = schema.length >= it.opts.loopEnum;\n    let eql;\n    const getEql = () => eql !== null && eql !== void 0 ? eql : eql = (0, util_1.useFunc)(gen, equal_1.default);\n    let valid;\n    if (useLoop || $data) {\n      valid = gen.let(\"valid\");\n      cxt.block$data(valid, loopEnum);\n    } else {\n      /* istanbul ignore if */\n      if (!Array.isArray(schema)) throw new Error(\"ajv implementation error\");\n      const vSchema = gen.const(\"vSchema\", schemaCode);\n      valid = (0, codegen_1.or)(...schema.map((_x, i) => equalCode(vSchema, i)));\n    }\n    cxt.pass(valid);\n    function loopEnum() {\n      gen.assign(valid, false);\n      gen.forOf(\"v\", schemaCode, v => gen.if((0, codegen_1._)`${getEql()}(${data}, ${v})`, () => gen.assign(valid, true).break()));\n    }\n    function equalCode(vSchema, i) {\n      const sch = schema[i];\n      return typeof sch === \"object\" && sch !== null ? (0, codegen_1._)`${getEql()}(${data}, ${vSchema}[${i}])` : (0, codegen_1._)`${data} === ${sch}`;\n    }\n  }\n};\nexports.default = def;","map":{"version":3,"names":["Object","defineProperty","exports","value","codegen_1","require","util_1","equal_1","error","message","params","schemaCode","_","def","keyword","schemaType","$data","code","cxt","gen","data","schema","it","length","Error","useLoop","opts","loopEnum","eql","getEql","useFunc","default","valid","let","block$data","Array","isArray","vSchema","const","or","map","_x","i","equalCode","pass","assign","forOf","v","if","break","sch"],"sources":["/Users/sabyrzhanolzhabay/Web-Dev/Arabakz/ArabaFrontend/node_modules/ajv/dist/vocabularies/validation/enum.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst codegen_1 = require(\"../../compile/codegen\");\nconst util_1 = require(\"../../compile/util\");\nconst equal_1 = require(\"../../runtime/equal\");\nconst error = {\n    message: \"must be equal to one of the allowed values\",\n    params: ({ schemaCode }) => (0, codegen_1._) `{allowedValues: ${schemaCode}}`,\n};\nconst def = {\n    keyword: \"enum\",\n    schemaType: \"array\",\n    $data: true,\n    error,\n    code(cxt) {\n        const { gen, data, $data, schema, schemaCode, it } = cxt;\n        if (!$data && schema.length === 0)\n            throw new Error(\"enum must have non-empty array\");\n        const useLoop = schema.length >= it.opts.loopEnum;\n        let eql;\n        const getEql = () => (eql !== null && eql !== void 0 ? eql : (eql = (0, util_1.useFunc)(gen, equal_1.default)));\n        let valid;\n        if (useLoop || $data) {\n            valid = gen.let(\"valid\");\n            cxt.block$data(valid, loopEnum);\n        }\n        else {\n            /* istanbul ignore if */\n            if (!Array.isArray(schema))\n                throw new Error(\"ajv implementation error\");\n            const vSchema = gen.const(\"vSchema\", schemaCode);\n            valid = (0, codegen_1.or)(...schema.map((_x, i) => equalCode(vSchema, i)));\n        }\n        cxt.pass(valid);\n        function loopEnum() {\n            gen.assign(valid, false);\n            gen.forOf(\"v\", schemaCode, (v) => gen.if((0, codegen_1._) `${getEql()}(${data}, ${v})`, () => gen.assign(valid, true).break()));\n        }\n        function equalCode(vSchema, i) {\n            const sch = schema[i];\n            return typeof sch === \"object\" && sch !== null\n                ? (0, codegen_1._) `${getEql()}(${data}, ${vSchema}[${i}])`\n                : (0, codegen_1._) `${data} === ${sch}`;\n        }\n    },\n};\nexports.default = def;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}